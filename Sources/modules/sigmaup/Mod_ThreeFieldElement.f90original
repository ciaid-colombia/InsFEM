module Mod_ThreeFieldElement
   use typre
   use Mod_Element
   use Mod_ThreeField
   
contains

   ! Elemental components in the Three Field case
   ! Voigt notation 2d=>  s11 s22 s12  3d => s11 s22 s33 s23 s13 s12
   
   !Three Field case no-elastic

   subroutine supm_elmbst(e,timom,tisig,dvolu,acvis,auxtens,elmat)
   
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in constitutive equation
    !    1/2mu(S,T)+tau1*(div(T),div(S))-tau3*(1/2mu*(T),1/2mu*(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: acvis,timom,tisig,dvolu
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux,aux2,aux1


      aux1=1.0_rp/(2.0_rp*acvis)
      aux= (aux1*(1.0_rp-tisig*aux1)*dvolu)
      aux2=timom*dvolu
      
      do jnode=1,e%pnode    
         do inode=1,e%pnode
      
            elmat(1,inode,1,jnode) = aux*e%shape(inode,e%igaus)*e%shape(jnode,e%igaus)+aux2*(e%cartd(1,inode)*e%cartd(1,jnode)) + elmat(1,inode,1,jnode)
            elmat(1,inode,2,jnode) = 0.0_rp + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = aux2*(e%cartd(1,inode)*e%cartd(2,jnode)) + elmat(1,inode,3,jnode)
            elmat(2,inode,1,jnode) = 0.0_rp + elmat(2,inode,1,jnode)
            elmat(2,inode,2,jnode) = aux*e%shape(inode,e%igaus)*e%shape(jnode,e%igaus)+aux2*e%cartd(2,inode)*e%cartd(2,jnode) + elmat(2,inode,2,jnode)
            elmat(2,inode,3,jnode) = aux2*e%cartd(2,inode)*e%cartd(1,jnode) + elmat(2,inode,3,jnode)
            elmat(3,inode,1,jnode) = aux2*e%cartd(2,inode)*e%cartd(1,jnode) + elmat(3,inode,1,jnode)
            elmat(3,inode,2,jnode) = aux2*e%cartd(1,inode)*e%cartd(2,jnode) + elmat(3,inode,2,jnode)                                         
            elmat(3,inode,3,jnode) = 2.0_rp*aux*e%shape(inode,e%igaus)*e%shape(jnode,e%igaus) + &
                  aux2*(e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(2,inode)*e%cartd(2,jnode)) + elmat(3,inode,3,jnode)
            

         end do
      end do   

   end subroutine supm_elmbst
   
   subroutine supm_elmbst3(e,timom,tisig,dvolu,acvis,auxtens,beta,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in constitutive equation
    !    1/2mu(S,T)+tau1*(div(T),div(S))-tau3*(1/2mu*(T),1/2mu*(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: acvis
      real(rp),    intent(in)    :: timom,tisig,dvolu,beta
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux,aux2,aux1

      aux1=1.0_rp/(2.0_rp*acvis)
      aux=aux1*(1.0_rp-tisig*aux1)*dvolu
      aux2=(1.0_rp-beta)*timom*dvolu

      do jnode=1,e%pnode
         do inode=1,e%pnode
       
            elmat(1,inode,1,jnode) = aux*e%shape(inode,e%igaus)*e%shape(jnode,e%igaus)+aux2*e%cartd(1,inode)*e%cartd(1,jnode) + elmat(1,inode,1,jnode)
            elmat(1,inode,2,jnode) = 0.0_rp + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = 0.0_rp + elmat(1,inode,3,jnode)
            elmat(1,inode,4,jnode) = 0.0_rp + elmat(1,inode,4,jnode)
            elmat(1,inode,5,jnode) = aux2*e%cartd(1,inode)*e%cartd(3,jnode) + elmat(1,inode,5,jnode)
            elmat(1,inode,6,jnode) = aux2*e%cartd(1,inode)*e%cartd(2,jnode) + elmat(1,inode,6,jnode)
            
            elmat(2,inode,1,jnode) = 0.0_rp + elmat(2,inode,1,jnode)                                  
            elmat(2,inode,2,jnode) = aux*e%shape(inode,e%igaus)*e%shape(jnode,e%igaus)+aux2*e%cartd(2,inode)*e%cartd(2,jnode) + elmat(2,inode,2,jnode)
            elmat(2,inode,3,jnode) = 0.0_rp + elmat(2,inode,3,jnode)
            elmat(2,inode,4,jnode) = aux2*e%cartd(2,inode)*e%cartd(3,jnode) + elmat(2,inode,4,jnode)
            elmat(2,inode,5,jnode) = 0.0_rp + elmat(2,inode,5,jnode)
            elmat(2,inode,6,jnode) = aux2*e%cartd(2,inode)*e%cartd(1,jnode) + elmat(2,inode,6,jnode)

            elmat(3,inode,1,jnode) = 0.0_rp + elmat(3,inode,1,jnode)
            elmat(3,inode,2,jnode) = 0.0_rp + elmat(3,inode,2,jnode)
            elmat(3,inode,3,jnode) = aux*e%shape(inode,e%igaus)*e%shape(jnode,e%igaus)+aux2*e%cartd(3,inode)*e%cartd(3,jnode) + elmat(3,inode,3,jnode)
            elmat(3,inode,4,jnode) = aux2*e%cartd(3,inode)*e%cartd(2,jnode) + elmat(3,inode,4,jnode)
            elmat(3,inode,5,jnode) = aux2*e%cartd(3,inode)*e%cartd(1,jnode) + elmat(3,inode,5,jnode)
            elmat(3,inode,6,jnode) = 0.0_rp + elmat(3,inode,6,jnode)
            
            elmat(4,inode,1,jnode) = 0.0_rp + elmat(4,inode,1,jnode) 
            elmat(4,inode,2,jnode) = aux2*e%cartd(3,inode)*e%cartd(2,jnode) + elmat(4,inode,2,jnode)
            elmat(4,inode,3,jnode) = aux2*e%cartd(2,inode)*e%cartd(3,jnode) + elmat(4,inode,3,jnode)
            elmat(4,inode,4,jnode) = 2.0_rp*aux*e%shape(inode,e%igaus)*e%shape(jnode,e%igaus) + &
                                       aux2*(e%cartd(3,inode)*e%cartd(3,jnode) + e%cartd(2,inode)*e%cartd(2,jnode)) &
                                       + elmat(4,inode,4,jnode)
            elmat(4,inode,5,jnode) = aux2*e%cartd(2,inode)*e%cartd(1,jnode) + elmat(4,inode,5,jnode)
            elmat(4,inode,6,jnode) = aux2*e%cartd(3,inode)*e%cartd(1,jnode) + elmat(4,inode,6,jnode)
                              
            elmat(5,inode,1,jnode) = aux2*e%cartd(3,inode)*e%cartd(1,jnode) + elmat(5,inode,1,jnode)
            elmat(5,inode,2,jnode) = 0.0_rp + elmat(5,inode,2,jnode)
            elmat(5,inode,3,jnode) = aux2*e%cartd(1,inode)*e%cartd(3,jnode) + elmat(5,inode,3,jnode)
            elmat(5,inode,4,jnode) = aux2*e%cartd(1,inode)*e%cartd(2,jnode) + elmat(5,inode,4,jnode)
            elmat(5,inode,5,jnode) = 2.0_rp*aux*e%shape(inode,e%igaus)*e%shape(jnode,e%igaus) + &
                                       aux2*(e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(3,inode)*e%cartd(3,jnode)) &
                                       + elmat(5,inode,5,jnode)    
            elmat(5,inode,6,jnode) = aux2*e%cartd(3,inode)*e%cartd(2,jnode) + elmat(5,inode,6,jnode)  
            
            elmat(6,inode,1,jnode) = aux2*e%cartd(2,inode)*e%cartd(1,jnode) + elmat(6,inode,1,jnode)
            elmat(6,inode,2,jnode) = aux2*e%cartd(1,inode)*e%cartd(2,jnode) + elmat(6,inode,2,jnode)
            elmat(6,inode,3,jnode) = 0.0_rp + elmat(6,inode,3,jnode)
            elmat(6,inode,4,jnode) = aux2*e%cartd(1,inode)*e%cartd(3,jnode) + elmat(6,inode,4,jnode)
            elmat(6,inode,5,jnode) = aux2*e%cartd(2,inode)*e%cartd(3,jnode) + elmat(6,inode,5,jnode)
            elmat(6,inode,6,jnode) = 2.0_rp*aux*e%shape(inode,e%igaus)*e%shape(jnode,e%igaus) + &
                                    aux2*(e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(2,inode)*e%cartd(2,jnode)) &
                                    + elmat(6,inode,6,jnode)                                  

         end do
      end do   

   end subroutine supm_elmbst3   
   
   subroutine supm_elmbut(e,timom,tisig,dtinv,gpadv,dvolu,acden,acvis,auxtens,grvel,elmat) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: tisig,timom,dvolu,acvis,acden,dtinv,gpadv(e%pnode),grvel(e%ndime,e%ndime)  
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode,aux3
      real(rp)                   :: aux,aux1,tmp,aux2,aux4


      tmp  = acden*dtinv
      aux2=-timom*dvolu     
      aux= -(1.0_rp - (tisig/(2.0_rp*acvis)))*dvolu 
      
      do jnode=1,e%pnode  
         aux1=acden*gpadv(jnode) 
         do inode=1,e%pnode     
         
            elmat(1,inode,1,jnode) = aux*e%shape(inode,e%igaus)*e%cartd(1,jnode) &              
                  + aux2*e%cartd(1,inode)*(aux1 + e%shape(jnode,e%igaus)*tmp) &  
                  + elmat(1,inode,1,jnode)                                      
            
            elmat(1,inode,2,jnode) = 0.0_rp &
                  + elmat(1,inode,2,jnode)
            
            elmat(2,inode,1,jnode) = 0.0_rp &
                  + elmat(2,inode,1,jnode) 
   
            elmat(2,inode,2,jnode) = aux*e%shape(inode,e%igaus)*e%cartd(2,jnode) &
               + aux2*e%cartd(2,inode)*(aux1+e%shape(jnode,e%igaus)*tmp) &
               + elmat(2,inode,2,jnode)
               
            elmat(3,inode,1,jnode) = aux*e%shape(inode,e%igaus)*e%cartd(2,jnode) &
               + aux2*e%cartd(2,inode)*(aux1+e%shape(jnode,e%igaus)*tmp) &
               + elmat(3,inode,1,jnode)
               
            elmat(3,inode,2,jnode) = aux*e%shape(inode,e%igaus)*e%cartd(1,jnode) & 
               + aux2*e%cartd(1,inode)*(aux1+e%shape(jnode,e%igaus)*tmp) &              
               + elmat(3,inode,2,jnode)                                         

         end do  
      end do

   end subroutine supm_elmbut
   
   subroutine supm_elmbut3(e,timom,tisig,dtinv,gpadv,dvolu,acden,acvis,auxtens,beta,elmat) 
   
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: tisig,timom,dvolu,acvis,acden,dtinv,gpadv(e%pnode),beta
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux,aux1,tmp,aux2

      
      aux=-(1.0_rp-tisig*(1.0_rp/(2.0_rp*acvis)))*dvolu 
      aux2=-timom*dvolu*(1.0_rp-beta) 
      tmp  = acden*dtinv
      
      do jnode=1,e%pnode
         aux1=acden*gpadv(jnode)       
         do inode=1,e%pnode

            elmat(1,inode,1,jnode) = aux*e%shape(inode,e%igaus)*e%cartd(1,jnode)*(1.0_rp-beta) &
                  + aux2*e%cartd(1,inode)*(aux1 + e%shape(jnode,e%igaus)*tmp) &            
                  + elmat(1,inode,1,jnode)
            elmat(1,inode,2,jnode) = 0.0_rp + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = 0.0_rp + elmat(1,inode,3,jnode)
               
            elmat(2,inode,1,jnode) = 0.0_rp + elmat(2,inode,1,jnode)
            elmat(2,inode,2,jnode) = aux*e%shape(inode,e%igaus)*e%cartd(2,jnode)*(1.0_rp-beta) & 
               + aux2*e%cartd(2,inode)*(aux1 + e%shape(jnode,e%igaus)*tmp) &
               + elmat(2,inode,2,jnode)  
            elmat(2,inode,3,jnode) = 0.0_rp + elmat(2,inode,3,jnode)
               
            elmat(3,inode,1,jnode) = 0.0_rp + elmat(3,inode,1,jnode)
            elmat(3,inode,2,jnode) = 0.0_rp + elmat(3,inode,2,jnode)
            elmat(3,inode,3,jnode) = aux*e%shape(inode,e%igaus)*e%cartd(3,jnode)*(1.0_rp-beta) &
               + aux2*e%cartd(3,inode)*(aux1 + e%shape(jnode,e%igaus)*tmp) &
               + elmat(3,inode,3,jnode) 
               
            elmat(4,inode,1,jnode) = 0.0_rp + elmat(4,inode,1,jnode)
            elmat(4,inode,2,jnode) = aux*e%shape(inode,e%igaus)*e%cartd(3,jnode)*(1.0_rp-beta) &
               + aux2*e%cartd(3,inode)*(aux1 + e%shape(jnode,e%igaus)*tmp) &
               + elmat(4,inode,2,jnode)
            elmat(4,inode,3,jnode) = aux*e%shape(inode,e%igaus)*e%cartd(2,jnode)*(1.0_rp-beta) & 
               + aux2*e%cartd(2,inode)*(aux1 + e%shape(jnode,e%igaus)*tmp) &
               + elmat(4,inode,3,jnode)
               
            elmat(5,inode,1,jnode) = aux*e%shape(inode,e%igaus)*e%cartd(3,jnode)*(1.0_rp-beta) & 
               + aux2*e%cartd(3,inode)*(aux1 + e%shape(jnode,e%igaus)*tmp) &
               + elmat(5,inode,1,jnode)
            elmat(5,inode,2,jnode) = 0.0_rp + elmat(5,inode,2,jnode)
            elmat(5,inode,3,jnode) = aux*e%shape(inode,e%igaus)*e%cartd(1,jnode)*(1.0_rp-beta) &
               + aux2*e%cartd(1,inode)*(aux1 + e%shape(jnode,e%igaus)*tmp) &
               + elmat(5,inode,3,jnode)
               
            elmat(6,inode,1,jnode) = aux*e%shape(inode,e%igaus)*e%cartd(2,jnode)*(1.0_rp-beta) &
               + aux2*e%cartd(2,inode)*(aux1 + e%shape(jnode,e%igaus)*tmp) &
               + elmat(6,inode,1,jnode)
            elmat(6,inode,2,jnode) = aux*e%shape(inode,e%igaus)*e%cartd(1,jnode)*(1.0_rp-beta) &
               + aux2*e%cartd(1,inode)*(aux1 + e%shape(jnode,e%igaus)*tmp) &
               + elmat(6,inode,2,jnode)
            elmat(6,inode,3,jnode) = 0.0_rp + elmat(6,inode,3,jnode)                                  

         end do  
      end do

   end subroutine supm_elmbut3    
   
   subroutine supm_elmbpt(e,timom,dvolu,auxtens,beta,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the third lhs term for ASGS in constitutive equation
    !    -tau1*(gra(p),div(t))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: timom,dvolu,beta
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,1,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux

      aux=-timom*dvolu    
      do jnode=1,e%pnode  
         do inode=1,e%pnode    

            elmat(1,inode,1,jnode) = e%cartd(1,inode)*aux*e%cartd(1,jnode) + elmat(1,inode,1,jnode)
            elmat(2,inode,1,jnode) = e%cartd(2,inode)*aux*e%cartd(2,jnode) + elmat(2,inode,1,jnode)
            elmat(3,inode,1,jnode) = (e%cartd(2,inode)*e%cartd(1,jnode) + e%cartd(1,inode)*e%cartd(2,jnode))*aux &
               + elmat(3,inode,1,jnode)

      end do  
   end do

   end subroutine supm_elmbpt 
   
   subroutine supm_elmbpt3(e,timom,dvolu,auxtens,beta,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the third lhs term for ASGS in constitutive equation
    !    -tau1*(gra(p),div(t))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: timom,dvolu,beta
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,1,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux


      aux=-timom*dvolu*(1.0_rp-beta)          
      do jnode=1,e%pnode
         do inode=1,e%pnode   

            elmat(1,inode,1,jnode) = e%cartd(1,inode)*aux*e%cartd(1,jnode) + elmat(1,inode,1,jnode)  
            elmat(2,inode,1,jnode) = e%cartd(2,inode)*aux*e%cartd(2,jnode) + elmat(2,inode,1,jnode)
            elmat(3,inode,1,jnode) = e%cartd(3,inode)*aux*e%cartd(3,jnode) + elmat(3,inode,1,jnode)   
            elmat(4,inode,1,jnode) = (e%cartd(3,inode)*e%cartd(2,jnode) + e%cartd(2,inode)*e%cartd(3,jnode))*aux &
                                       + elmat(4,inode,1,jnode) 
            elmat(5,inode,1,jnode) = (e%cartd(3,inode)*e%cartd(1,jnode) + e%cartd(1,inode)*e%cartd(3,jnode))*aux &
                                       + elmat(5,inode,1,jnode)  
            elmat(6,inode,1,jnode) = (e%cartd(2,inode)*e%cartd(1,jnode) + e%cartd(1,inode)*e%cartd(2,jnode))*aux &
                                       + elmat(6,inode,1,jnode)   

         end do  
      end do

   end subroutine supm_elmbpt3   
   
   subroutine supm_elmbsv(e,timom,tisig,dvolu,acvis,acden,gpadv,auxtens,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in momentum equation
    !    (gra_sym(v),S) -tau3(gra_sym(v),1/2mu*S) -tau1(rho*a*grad(v),div(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: tisig,timom,dvolu,acvis,acden,gpadv(e%pnode) 
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux,aux1

      aux  = (1.0_rp - (tisig/(2.0_rp*acvis)))*dvolu 
      do inode=1,e%pnode
         aux1 = -acden*gpadv(inode)*timom*dvolu        
         do jnode=1,e%pnode
         
            elmat(1,inode,1,jnode) = e%cartd(1,inode)*aux*e%shape(jnode,e%igaus) + e%cartd(1,jnode)*aux1 & 
                  + elmat(1,inode,1,jnode)                                      
            elmat(1,inode,2,jnode) = 0.0_rp + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = e%cartd(2,inode)*aux*e%shape(jnode,e%igaus) + e%cartd(2,jnode)*aux1 & 
                  + elmat(1,inode,3,jnode)
               
            elmat(2,inode,1,jnode) = 0.0_rp + elmat(2,inode,1,jnode)
            elmat(2,inode,2,jnode) = e%cartd(2,inode)*aux*e%shape(jnode,e%igaus) + e%cartd(2,jnode)*aux1 & 
                  + elmat(2,inode,2,jnode)
            elmat(2,inode,3,jnode) = e%cartd(1,inode)*aux*e%shape(jnode,e%igaus) + e%cartd(1,jnode)*aux1 & 
                  + elmat(2,inode,3,jnode)                                    
      
         end do  
      end do
 
   end subroutine supm_elmbsv
   
   subroutine supm_elmbsv3(e,timom,tisig,dvolu,acvis,acden,gpadv,auxtens,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in momentum equation
    !    (gra_sym(v),S) -tau3(gra_sym(v),1/2mu*S) -tau1(rho*a*grad(v),div(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: tisig,timom,dvolu,acvis,acden,gpadv(e%pnode)
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux,aux1

      aux  = (1.0_rp-tisig*(1.0_rp/(2.0_rp*acvis)))*dvolu 
      do inode=1,e%pnode
         aux1 = -acden*gpadv(inode)*timom*dvolu         
         do jnode=1,e%pnode

            elmat(1,inode,1,jnode) = e%cartd(1,inode)*(aux)*e%shape(jnode,e%igaus) + e%cartd(1,jnode)*aux1 & 
                     + elmat(1,inode,1,jnode)
            elmat(1,inode,2,jnode) = 0.0_rp + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = 0.0_rp + elmat(1,inode,3,jnode)
            elmat(1,inode,4,jnode) = 0.0_rp + elmat(1,inode,4,jnode)   
            elmat(1,inode,5,jnode) = e%cartd(3,inode)*(aux)*e%shape(jnode,e%igaus) + e%cartd(3,jnode)*aux1 &
                     + elmat(1,inode,5,jnode)
            elmat(1,inode,6,jnode) = e%cartd(2,inode)*(aux)*e%shape(jnode,e%igaus) + e%cartd(2,jnode)*aux1 &
                     + elmat(1,inode,6,jnode)

            elmat(2,inode,1,jnode) = 0.0_rp + elmat(2,inode,1,jnode)
            elmat(2,inode,2,jnode) = e%cartd(2,inode)*(aux)*e%shape(jnode,e%igaus) + e%cartd(2,jnode)*aux1 & 
                     + elmat(2,inode,2,jnode)
            elmat(2,inode,3,jnode) = 0.0_rp + elmat(2,inode,3,jnode)
            elmat(2,inode,4,jnode) = e%cartd(3,inode)*(aux)*e%shape(jnode,e%igaus) + e%cartd(3,jnode)*aux1 & 
                     + elmat(2,inode,4,jnode)  
            elmat(2,inode,5,jnode) = 0.0_rp + elmat(2,inode,5,jnode)
            elmat(2,inode,6,jnode) = e%cartd(1,inode)*(aux)*e%shape(jnode,e%igaus) + e%cartd(1,jnode)*aux1 &
                     + elmat(2,inode,6,jnode)  

            elmat(3,inode,1,jnode) = 0.0_rp + elmat(3,inode,1,jnode)
            elmat(3,inode,2,jnode) = 0.0_rp + elmat(3,inode,2,jnode)
            elmat(3,inode,3,jnode) = e%cartd(3,inode)*(aux)*e%shape(jnode,e%igaus) + e%cartd(3,jnode)*aux1 &
                     + elmat(3,inode,3,jnode) 
            elmat(3,inode,4,jnode) = e%cartd(2,inode)*(aux)*e%shape(jnode,e%igaus) + e%cartd(2,jnode)*aux1 &
                     + elmat(3,inode,4,jnode)
            elmat(3,inode,5,jnode) = e%cartd(1,inode)*(aux)*e%shape(jnode,e%igaus) + e%cartd(1,jnode)*aux1 &
                     + elmat(3,inode,5,jnode)
            elmat(3,inode,6,jnode) = 0.0_rp + elmat(3,inode,6,jnode)                                 
      
         end do  
      end do
 
   end subroutine supm_elmbsv3   
   
   subroutine supm_elmbuv2(e,tisig,timom,dvolu,acvis,acden,beta,gpadv,grvel,elmat) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in momentum equation
    !    tau3*(gra_sym(v),gra_sym(u))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      real(rp),    intent(in)    :: tisig,dvolu,beta,acvis,grvel(e%ndime,e%ndime),timom,gpadv(e%pnode),acden
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode,aux4
      real(rp)                   :: aux,aux1,aux2,aux3

      aux = (tisig*dvolu) !aporte Newton
      
      do inode=1,e%pnode         
         do jnode=1,e%pnode
            
            elmat(1,inode,1,jnode)= aux*(e%cartd(1,inode)*e%cartd(1,jnode)+0.5_rp*e%cartd(2,inode)*e%cartd(2,jnode)) &
               + elmat(1,inode,1,jnode)            
            elmat(1,inode,2,jnode)= aux*(0.5_rp*e%cartd(2,inode)*e%cartd(1,jnode)) + elmat(1,inode,2,jnode)         
            elmat(2,inode,1,jnode)= aux*(0.5_rp*e%cartd(1,inode)*e%cartd(2,jnode)) + elmat(2,inode,1,jnode)
            elmat(2,inode,2,jnode)= aux*(0.5_rp*e%cartd(1,inode)*e%cartd(1,jnode)+e%cartd(2,inode)*e%cartd(2,jnode)) &
               + elmat(2,inode,2,jnode)
         end do  
      end do
 
   end subroutine supm_elmbuv2
   
   subroutine supm_elmbuv23(e,tisig,dvolu,beta,elmat) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in momentum equation
    !    tau3*(gra_sym(v),gra_sym(u))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      real(rp),    intent(in)    :: tisig,dvolu,beta
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux

      aux=tisig*dvolu*(1.0_rp-beta)
      do jnode=1,e%pnode
         do inode=1,e%pnode
    
            elmat(1,inode,1,jnode)= aux*(e%cartd(1,inode)*e%cartd(1,jnode)+0.5_rp*e%cartd(2,inode)*e%cartd(2,jnode) &
               + 0.5_rp*e%cartd(3,inode)*e%cartd(3,jnode)) + elmat(1,inode,1,jnode)                                  
            elmat(1,inode,2,jnode)= aux*(0.5_rp*e%cartd(2,inode)*e%cartd(1,jnode)) + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode)= aux*(0.5_rp*e%cartd(3,inode)*e%cartd(1,jnode)) + elmat(1,inode,3,jnode)
   
            elmat(2,inode,1,jnode)= aux*(0.5_rp*e%cartd(1,inode)*e%cartd(2,jnode)) + elmat(2,inode,1,jnode)
            elmat(2,inode,2,jnode)= aux*(0.5_rp*e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(2,inode)*e%cartd(2,jnode) &
               + 0.5_rp*e%cartd(3,inode)*e%cartd(3,jnode)) + elmat(2,inode,2,jnode)                                
            elmat(2,inode,3,jnode)= aux*(0.5_rp*e%cartd(3,inode)*e%cartd(2,jnode)) + elmat(2,inode,3,jnode)
   
            elmat(3,inode,1,jnode)= aux*(0.5_rp*e%cartd(1,inode)*e%cartd(3,jnode)) + elmat(3,inode,1,jnode)
            elmat(3,inode,2,jnode)= aux*(0.5_rp*e%cartd(2,inode)*e%cartd(3,jnode)) + elmat(3,inode,2,jnode)                                
            elmat(3,inode,3,jnode)= aux*(0.5_rp*e%cartd(1,inode)*e%cartd(1,jnode) + 0.5_rp*e%cartd(2,inode)*e%cartd(2,jnode) &
               + e%cartd(3,inode)*e%cartd(3,jnode)) + elmat(3,inode,3,jnode)            
               

         end do  
      end do
 
   end subroutine supm_elmbuv23   

   subroutine supm_elmbsq(e,timom,dvolu,auxtens,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the lhs term for ASGS in momentum equation
    !    tau1*(gra(q),div(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: timom,dvolu
      real(rp),    intent(inout) :: elmat(1,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux


      aux=-timom*dvolu    
      do jnode=1,e%pnode      
         do inode=1,e%pnode   

            elmat(1,inode,1,jnode) = e%cartd(1,inode)*(aux)*e%cartd(1,jnode) + elmat(1,inode,1,jnode)
            elmat(1,inode,2,jnode) = e%cartd(2,inode)*(aux)*e%cartd(2,jnode) + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = (e%cartd(1,inode)*e%cartd(2,jnode) + e%cartd(2,inode)*e%cartd(1,jnode))*aux &
                  + elmat(1,inode,3,jnode)                      

         end do  
      end do

   end subroutine supm_elmbsq 
   
   subroutine supm_elmbsq3(e,timom,dvolu,auxtens,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the lhs term for ASGS in momentum equation
    !    tau1*(gra(q),div(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: timom,dvolu
      real(rp),    intent(inout) :: elmat(1,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux

      aux=-timom*dvolu   
      do jnode=1,e%pnode
         do inode=1,e%pnode   

            elmat(1,inode,1,jnode) = e%cartd(1,inode)*(aux)*e%cartd(1,jnode) + elmat(1,inode,1,jnode)
            elmat(1,inode,2,jnode) = e%cartd(2,inode)*(aux)*e%cartd(2,jnode) + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = e%cartd(3,inode)*(aux)*e%cartd(3,jnode) + elmat(1,inode,3,jnode) 
            elmat(1,inode,4,jnode) = (e%cartd(2,inode)*e%cartd(3,jnode) + e%cartd(3,inode)*e%cartd(2,jnode))*aux & 
                                          + elmat(1,inode,4,jnode)  
            elmat(1,inode,5,jnode) = (e%cartd(1,inode)*e%cartd(3,jnode) + e%cartd(3,inode)*e%cartd(1,jnode))*aux &
                                          + elmat(1,inode,5,jnode)                     
            elmat(1,inode,6,jnode) = (e%cartd(1,inode)*e%cartd(2,jnode) + e%cartd(2,inode)*e%cartd(1,jnode))*aux &
                                          + elmat(1,inode,6,jnode)                    

         end do  
      end do

   end subroutine supm_elmbsq3     
  
   subroutine supm_elmrhc(e,timom,tisig,acvis,acden,dvolu,elext,auxtens,beta,elextS,gpvel,grvel,elrhs)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: elext(e%ndime),elextS(auxtens),gpvel(e%ndime),grvel(e%ndime,e%ndime)
      real(rp),    intent(in)    :: dvolu,timom,beta,tisig,acvis,acden
      real(rp),    intent(inout) :: elrhs(auxtens,e%mnode)
      integer(ip)                :: inode,aux2
      real(rp)                   :: aux,aux1,aux3


      aux  = -timom*dvolu
      do inode=1,e%pnode
         aux1= (e%shape(inode,e%igaus)*(1.0_rp - tisig/(2.0_rp*acvis))*dvolu)
      
         elrhs(1,inode) = e%cartd(1,inode)*elext(1)*aux + aux1*elextS(1) &
               + elrhs(1,inode) 
         elrhs(2,inode) = e%cartd(2,inode)*elext(2)*aux + aux1*elextS(2) &
               + elrhs(2,inode)
         elrhs(3,inode) = (e%cartd(1,inode)*elext(2) + e%cartd(2,inode)*elext(1))*aux & 
               + 2.0_rp*aux1*elextS(3) &
               + elrhs(3,inode)
  
      end do

   end subroutine supm_elmrhc
   
   subroutine supm_elmrhc3(e,timom,dvolu,elext,auxtens,beta,elrhs)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: elext(e%ndime),beta
      real(rp),    intent(in)    :: dvolu,timom
      real(rp),    intent(inout) :: elrhs(auxtens,e%mnode)
      integer(ip)                :: inode
      real(rp)                   :: aux

      aux = -timom*dvolu*(1.0_rp-beta)
      do inode=1,e%pnode

            elrhs(1,inode) = e%cartd(1,inode)*(elext(1))*aux + elrhs(1,inode) 
            elrhs(2,inode) = e%cartd(2,inode)*(elext(2))*aux + elrhs(2,inode)
            elrhs(3,inode) = e%cartd(3,inode)*(elext(3))*aux + elrhs(3,inode)
            elrhs(4,inode) = (e%cartd(2,inode)*elext(3) + e%cartd(3,inode)*elext(2))*aux & 
                  + elrhs(4,inode)
            elrhs(5,inode) = (e%cartd(1,inode)*elext(3) + e%cartd(3,inode)*elext(1))*aux & 
                  + elrhs(5,inode)
            elrhs(6,inode) = (e%cartd(1,inode)*elext(2) + e%cartd(2,inode)*elext(1))*aux & 
                  + elrhs(6,inode)
  
      end do

   end subroutine supm_elmrhc3    
   
   subroutine supm_elmrhu(e,timom,tidiv,tisig,acden,auxtens,dvolu,elextC,elextS,gpvel,grvel,gpadv,elrhs)  
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: elextC(1),elextS(auxtens),gpadv(e%pnode),acden
      real(rp),    intent(in)    :: dvolu,tidiv,tisig,timom,gpvel(e%ndime),grvel(e%ndime,e%ndime)
      real(rp),    intent(inout) :: elrhs(e%ndime,e%mnode)
      integer(ip)                :: inode,aux3
      real(rp)                   :: aux,aux1,aux2

      aux = tidiv*dvolu 
      aux1= (tisig*dvolu)
      do inode=1,e%pnode

         elrhs(1,inode) = e%cartd(1,inode)*elextC(1)*aux &
               - (e%cartd(1,inode)*elextS(1) + e%cartd(2,inode)*elextS(3))*aux1 &
               + elrhs(1,inode) 
         elrhs(2,inode) = e%cartd(2,inode)*elextC(1)*aux &
               - (e%cartd(2,inode)*elextS(2) + e%cartd(1,inode)*elextS(3))*aux1 &           
               + elrhs(2,inode)
  
      end do

   end subroutine supm_elmrhu
   
   subroutine supm_elmrhu3(e,timom,tidiv,tisig,acden,auxtens,dvolu,elextC,elextS,gpvel,grvel,gpadv,elrhs)  
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: elextC(1),elextS(auxtens),gpadv(e%pnode),acden
      real(rp),    intent(in)    :: dvolu,tidiv,tisig,timom,gpvel(e%ndime),grvel(e%ndime,e%ndime)
      real(rp),    intent(inout) :: elrhs(e%ndime,e%mnode)
      integer(ip)                :: inode,aux3
      real(rp)                   :: aux,aux1,aux2

      aux = tidiv*dvolu 
      aux1= (tisig*dvolu)
      do inode=1,e%pnode


         elrhs(1,inode) = e%cartd(1,inode)*elextC(1)*aux &
               - (e%cartd(1,inode)*elextS(1) + e%cartd(2,inode)*elextS(6) + e%cartd(3,inode)*elextS(5))*aux1 &
               + elrhs(1,inode) 
         elrhs(2,inode) = e%cartd(2,inode)*elextC(1)*aux &
               - (e%cartd(1,inode)*elextS(6) + e%cartd(2,inode)*elextS(2) + e%cartd(3,inode)*elextS(4))*aux1 &         
               + elrhs(2,inode)               
         elrhs(3,inode) = e%cartd(3,inode)*elextC(1)*aux &
               - (e%cartd(1,inode)*elextS(5) + e%cartd(2,inode)*elextS(4) + e%cartd(3,inode)*elextS(3))*aux1 &           
               + elrhs(3,inode)               
  
      end do

   end subroutine supm_elmrhu3    
   
   subroutine supm_elmrhp(e,acden,timom,dvolu,elextC,gpvel,grvel,elrhs)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      real(rp),    intent(in)    :: elextC(1),acden,timom
      real(rp),    intent(in)    :: dvolu,gpvel(e%ndime),grvel(e%ndime,e%ndime)
      real(rp),    intent(inout) :: elrhs(1,e%mnode)
      integer(ip)                :: inode,aux1
      real(rp)                   :: aux2

    
      do inode=1,e%pnode

         elrhs(1,inode) = e%shape(inode,e%igaus)*dvolu*elextC(1) &
               + elrhs(1,inode) 
  
      end do

   end subroutine supm_elmrhp
   
   subroutine supm_elmrhp3(e,acden,timom,dvolu,elextC,gpvel,grvel,elrhs)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      real(rp),    intent(in)    :: elextC(1),acden,timom
      real(rp),    intent(in)    :: dvolu,gpvel(e%ndime),grvel(e%ndime,e%ndime)
      real(rp),    intent(inout) :: elrhs(1,e%mnode)
      integer(ip)                :: inode,aux1
      real(rp)                   :: aux2

    
      do inode=1,e%pnode

         elrhs(1,inode) = e%shape(inode,e%igaus)*dvolu*elextC(1) &
               + elrhs(1,inode) 
  
      end do

   end subroutine supm_elmrhp3    

   !*****************************************************************************************************************************
   !Three Field viscoelastic 
   !*****************************************************************************************************************************
   
   subroutine sup_TimeIntegrationToElext(e,auxtens,Integrator,auxVE,dtinv,gpsig,elextS)
      use typre
      use Mod_Element
      use Mod_TimeIntegrator
      implicit none
      class(FiniteElement)        :: e
      type(TimeIntegratorDt1)    :: Integrator
      integer(ip), intent(in)    :: auxtens
      real(rp)                   :: gpsig(auxtens,*),elextS(auxtens)
      real(rp)                   :: auxVE,dtinv      
      real(rp)                   :: gprhs(auxtens)
      
      !Time integration
      call Integrator%GetRHS(auxtens,gpsig(:,2),gprhs)
      elextS = elextS + auxVE*dtinv*gprhs(1:auxtens)
      
      
   end subroutine sup_TimeIntegrationToElext
   
   !************************************************************************************************************************************
   !Galerkin terms 

   subroutine supm_elmbstGal(e,acvis,auxVE,auxG,auxPTT,dtinv,dvolu,auxtens,gpadv,grvel,gpsig,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the Galerkin component of elmst matrix
    !    1/2mu(S,T)+tau1*(div(T),div(S))-tau3*(1/2mu*(T),1/2mu*(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxPTT
      real(rp),    intent(in)    :: dvolu,acvis,auxG,auxVE,dtinv
      real(rp),    intent(in)    :: gpadv(e%pnode),grvel(e%ndime,e%ndime),gpsig(auxtens)
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux1
      real(rp)                   :: Res11s11,Res11s12,Res11s22,Res12s11,Res12s12,Res12S22, &
                                    Res22s11,Res22s12,Res22S22,traza                                   

 

      traza= (gpsig(1) + gpsig(2))
 
      do jnode=1,e%pnode      
      
         Res11s11 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode) - 2.0_rp*grvel(1,1)*e%shape(jnode,e%igaus)) &
               + auxVE*(auxPTT*(auxG/acvis))*(2.0_rp*gpsig(1))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus) &
               + (1_ip - auxPTT)*auxVE*(auxG/acvis)*(traza + gpsig(1))*e%shape(jnode,e%igaus)               
         Res11s12 = (auxVE)*(-2.0_rp)*grvel(1,2)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*(2.0_rp*gpsig(3))*e%shape(jnode,e%igaus)
         Res11s22 = (1_ip - auxPTT)*auxVE*(auxG/acvis)*(gpsig(1))*e%shape(jnode,e%igaus)
         
         Res12s11 = -(auxVE)*grvel(2,1)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(3)*e%shape(jnode,e%igaus)
         Res12s12 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode)) &
               + auxVE*(auxG/acvis)*(gpsig(1) + gpsig(2))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus) 
         Res12s22 = -(auxVE)*grvel(1,2)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(3)*e%shape(jnode,e%igaus) 
         
         Res22s11 = (1_ip - auxPTT)*auxVE*(auxG/acvis)*(gpsig(2))*e%shape(jnode,e%igaus)
         Res22s12 = (auxVE)*(-2.0_rp)*grvel(2,1)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*(2.0_rp*gpsig(3))*e%shape(jnode,e%igaus) 
         Res22s22 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode) - 2.0_rp*grvel(2,2)*e%shape(jnode,e%igaus)) &
               + auxVE*(auxPTT*(auxG/acvis))*(2.0_rp*gpsig(2))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus) &
               + (1_ip - auxPTT)*auxVE*(auxG/acvis)*(traza + gpsig(2))*e%shape(jnode,e%igaus)    
               
      
         do inode=1,e%pnode
         
            aux1=e%shape(inode,e%igaus)*dvolu
      
            elmat(1,inode,1,jnode) = aux1*Res11s11 + elmat(1,inode,1,jnode)
            elmat(1,inode,2,jnode) = aux1*Res11s22 + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = aux1*Res11s12 + elmat(1,inode,3,jnode)
            
            elmat(2,inode,1,jnode) = aux1*Res22s11 + elmat(2,inode,1,jnode)
            elmat(2,inode,2,jnode) = aux1*Res22s22 + elmat(2,inode,2,jnode)
            elmat(2,inode,3,jnode) = aux1*Res22s12 + elmat(2,inode,3,jnode)
            
            elmat(3,inode,1,jnode) = aux1*(2.0_rp*Res12s11) + elmat(3,inode,1,jnode)
            elmat(3,inode,2,jnode) = aux1*(2.0_rp*Res12s22) + elmat(3,inode,2,jnode)                                         
            elmat(3,inode,3,jnode) = aux1*(2.0_rp*Res12s12) + elmat(3,inode,3,jnode)                                  

         end do
      end do   

   end subroutine supm_elmbstGal   
   
   
   
   subroutine supm_elmbstGal3d(e,acvis,auxVE,auxG,auxPTT,dtinv,dvolu,auxtens,gpadv,grvel,gpsig,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the Galerkin component of elmst matrix
    !    1/2mu(S,T)+tau1*(div(T),div(S))-tau3*(1/2mu*(T),1/2mu*(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxPTT
      real(rp),    intent(in)    :: dvolu,acvis,auxG,auxVE,dtinv
      real(rp),    intent(in)    :: gpadv(e%pnode),grvel(e%ndime,e%ndime),gpsig(auxtens)
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux1
      real(rp)                   :: Res11s11,Res11s12,Res11s13,Res11s22,Res11s23,Res11s33, &
                                    Res22s11,Res22s12,Res22s13,Res22s22,Res22s23,Res22s33, &
                                    Res33s11,Res33s12,Res33s13,Res33s22,Res33s23,Res33s33, &
                                    Res12s11,Res12s12,Res12s13,Res12s22,Res12s23,Res12s33, &
                                    Res13s11,Res13s12,Res13s13,Res13s22,Res13s23,Res13s33, &
                                    Res23s11,Res23s12,Res23s13,Res23s22,Res23s23,Res23s33, &
                                    Res21s11,Res21s12,Res21s13,Res21s22,Res21s23,Res21s33, &
                                    Res31s11,Res31s12,Res31s13,Res31s22,Res31s23,Res31s33, &
                                    Res32s11,Res32s12,Res32s13,Res32s22,Res32s23,Res32s33                                    
 
      do jnode=1,e%pnode      
      
         Res11s11 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode) - 2.0_rp*grvel(1,1)*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(2.0_rp*gpsig(1))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)
         Res11s12 = (auxVE)*(-2.0_rp)*grvel(1,2)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*(2.0_rp*gpsig(6))*e%shape(jnode,e%igaus)
         Res11s13 = (auxVE)*(-2.0_rp)*grvel(1,3)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*(2.0_rp*gpsig(5))*e%shape(jnode,e%igaus)
         Res11s22 = 0.0_rp
         Res11s23 = 0.0_rp
         Res11s33 = 0.0_rp
         
         Res22s11 = 0.0_rp
         Res22s12 = (auxVE)*(-2.0_rp)*grvel(2,1)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*(2.0_rp*gpsig(6))*e%shape(jnode,e%igaus)
         Res22s13 = 0.0_rp         
         Res22s22 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode) - 2.0_rp*grvel(2,2)*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(2.0_rp*gpsig(2))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)   
         Res22s23 = (auxVE)*(-2.0_rp)*grvel(2,3)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*(2.0_rp*gpsig(4))*e%shape(jnode,e%igaus)
         Res22s33 = 0.0_rp
         
         Res33s11 = 0.0_rp
         Res33s12 = 0.0_rp
         Res33s13 = (auxVE)*(-2.0_rp)*grvel(3,1)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*(2.0_rp*gpsig(5))*e%shape(jnode,e%igaus)
         Res33s22 = 0.0_rp
         Res33s23 = (auxVE)*(-2.0_rp)*grvel(3,2)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*(2.0_rp*gpsig(4))*e%shape(jnode,e%igaus)
         Res33s33 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode) - 2.0_rp*grvel(3,3)*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(2.0_rp*gpsig(3))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)
            
         Res12s11 = -(auxVE)*grvel(2,1)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(6)*e%shape(jnode,e%igaus)
         Res12s12 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode)) &
               - auxVE*((grvel(2,2) + grvel(1,1))*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(gpsig(1) + auxPTT*gpsig(2))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)
         Res12s13 = -(auxVE)*grvel(2,3)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(4)*e%shape(jnode,e%igaus)
         Res12s22 = -(auxVE)*grvel(1,2)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(6)*e%shape(jnode,e%igaus)          
         Res12s23 = -(auxVE)*grvel(1,3)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(5)*e%shape(jnode,e%igaus)
         Res12s33 = 0.0_rp
         
         Res21s11 = -(auxVE)*grvel(2,1)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(6)*e%shape(jnode,e%igaus)
         Res21s12 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode)) &
               - auxVE*((grvel(2,2) + grvel(1,1))*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(auxPTT*gpsig(1) + gpsig(2))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)
         Res21s13 = -(auxVE)*grvel(2,3)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(4)*e%shape(jnode,e%igaus)
         Res21s22 = -(auxVE)*grvel(1,2)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(6)*e%shape(jnode,e%igaus)          
         Res21s23 = -(auxVE)*grvel(1,3)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(5)*e%shape(jnode,e%igaus)
         Res21s33 = 0.0_rp         
         
         Res13s11 = -(auxVE)*grvel(3,1)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(5)*e%shape(jnode,e%igaus)
         Res13s12 = -(auxVE)*grvel(3,2)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(4)*e%shape(jnode,e%igaus)
         Res13s13 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode)) &
               - auxVE*((grvel(3,3) + grvel(1,1))*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(gpsig(1) + auxPTT*gpsig(3))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)
         Res13s22 = 0.0_rp        
         Res13s23 = -(auxVE)*grvel(1,2)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(6)*e%shape(jnode,e%igaus)
         Res13s33 = -(auxVE)*grvel(1,3)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(5)*e%shape(jnode,e%igaus)   
         
         Res31s11 = -(auxVE)*grvel(3,1)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(5)*e%shape(jnode,e%igaus)
         Res31s12 = -(auxVE)*grvel(3,2)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(4)*e%shape(jnode,e%igaus)
         Res31s13 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode)) &
               - auxVE*((grvel(3,3) + grvel(1,1))*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(auxPTT*gpsig(1) + gpsig(3))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)
         Res31s22 = 0.0_rp        
         Res31s23 = -(auxVE)*grvel(1,2)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(6)*e%shape(jnode,e%igaus)
         Res31s33 = -(auxVE)*grvel(1,3)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(5)*e%shape(jnode,e%igaus)           

         Res23s11 = 0.0_rp
         Res23s12 = -(auxVE)*grvel(3,1)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(5)*e%shape(jnode,e%igaus)
         Res23s13 = -(auxVE)*grvel(2,1)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(6)*e%shape(jnode,e%igaus)
         Res23s22 = -(auxVE)*grvel(3,2)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(4)*e%shape(jnode,e%igaus)         
         Res23s23 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode)) &
               - auxVE*((grvel(3,3) + grvel(2,2))*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(gpsig(2) + auxPTT*gpsig(3))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)       
         Res23s33 = -(auxVE)*grvel(2,3)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(4)*e%shape(jnode,e%igaus)  
         
         Res32s11 = 0.0_rp
         Res32s12 = -(auxVE)*grvel(3,1)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(5)*e%shape(jnode,e%igaus)
         Res32s13 = -(auxVE)*grvel(2,1)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(6)*e%shape(jnode,e%igaus)
         Res32s22 = -(auxVE)*grvel(3,2)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(4)*e%shape(jnode,e%igaus)         
         Res32s23 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode)) &
               - auxVE*((grvel(3,3) + grvel(2,2))*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(auxPTT*gpsig(2) + gpsig(3))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)       
         Res32s33 = -(auxVE)*grvel(2,3)*e%shape(jnode,e%igaus) + auxVE*((auxG/acvis))*gpsig(4)*e%shape(jnode,e%igaus)  
                  
         
      
         do inode=1,e%pnode
         
            aux1=e%shape(inode,e%igaus)*dvolu
      
            elmat(1,inode,1,jnode) = aux1*Res11s11 + elmat(1,inode,1,jnode)
            elmat(1,inode,2,jnode) = aux1*Res11s22 + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = aux1*Res11s33 + elmat(1,inode,3,jnode)
            elmat(1,inode,4,jnode) = aux1*Res11s23 + elmat(1,inode,4,jnode)
            elmat(1,inode,5,jnode) = aux1*Res11s13 + elmat(1,inode,5,jnode)            
            elmat(1,inode,6,jnode) = aux1*Res11s12 + elmat(1,inode,6,jnode)
            
            elmat(2,inode,1,jnode) = aux1*Res22s11 + elmat(2,inode,1,jnode)
            elmat(2,inode,2,jnode) = aux1*Res22s22 + elmat(2,inode,2,jnode)
            elmat(2,inode,3,jnode) = aux1*Res22s33 + elmat(2,inode,3,jnode)
            elmat(2,inode,4,jnode) = aux1*Res22s23 + elmat(2,inode,4,jnode)
            elmat(2,inode,5,jnode) = aux1*Res22s13 + elmat(2,inode,5,jnode)            
            elmat(2,inode,6,jnode) = aux1*Res22s12 + elmat(2,inode,6,jnode)
            
            elmat(3,inode,1,jnode) = aux1*Res33s11 + elmat(3,inode,1,jnode)
            elmat(3,inode,2,jnode) = aux1*Res33s22 + elmat(3,inode,2,jnode)
            elmat(3,inode,3,jnode) = aux1*Res33s33 + elmat(3,inode,3,jnode)
            elmat(3,inode,4,jnode) = aux1*Res33s23 + elmat(3,inode,4,jnode)
            elmat(3,inode,5,jnode) = aux1*Res33s13 + elmat(3,inode,5,jnode)            
            elmat(3,inode,6,jnode) = aux1*Res33s12 + elmat(3,inode,6,jnode)
            
            elmat(4,inode,1,jnode) = aux1*(Res23s11 + Res32s11) + elmat(4,inode,1,jnode)
            elmat(4,inode,2,jnode) = aux1*(Res23s22 + Res32s22) + elmat(4,inode,2,jnode)                                         
            elmat(4,inode,3,jnode) = aux1*(Res23s33 + Res32s33) + elmat(4,inode,3,jnode)               
            elmat(4,inode,4,jnode) = aux1*(Res23s23 + Res32s23) + elmat(4,inode,4,jnode)
            elmat(4,inode,5,jnode) = aux1*(Res23s13 + Res32s13) + elmat(4,inode,5,jnode)                                         
            elmat(4,inode,6,jnode) = aux1*(Res23s12 + Res32s12) + elmat(4,inode,6,jnode)  

            elmat(5,inode,1,jnode) = aux1*(Res13s11 + Res31s11) + elmat(5,inode,1,jnode)
            elmat(5,inode,2,jnode) = aux1*(Res13s22 + Res31s22) + elmat(5,inode,2,jnode)                                         
            elmat(5,inode,3,jnode) = aux1*(Res13s33 + Res31s33) + elmat(5,inode,3,jnode)               
            elmat(5,inode,4,jnode) = aux1*(Res13s23 + Res31s23) + elmat(5,inode,4,jnode)
            elmat(5,inode,5,jnode) = aux1*(Res13s13 + Res31s13) + elmat(5,inode,5,jnode)                                         
            elmat(5,inode,6,jnode) = aux1*(Res13s12 + Res31s12) + elmat(5,inode,6,jnode)              

            elmat(6,inode,1,jnode) = aux1*(Res12s11 + Res21s11) + elmat(6,inode,1,jnode)
            elmat(6,inode,2,jnode) = aux1*(Res12s22 + Res21s22) + elmat(6,inode,2,jnode)                                         
            elmat(6,inode,3,jnode) = aux1*(Res12s33 + Res21s33) + elmat(6,inode,3,jnode)               
            elmat(6,inode,4,jnode) = aux1*(Res12s23 + Res21s23) + elmat(6,inode,4,jnode)
            elmat(6,inode,5,jnode) = aux1*(Res12s13 + Res21s13) + elmat(6,inode,5,jnode)                                         
            elmat(6,inode,6,jnode) = aux1*(Res12s12 + Res21s12) + elmat(6,inode,6,jnode) 

            
         end do
      end do   

   end subroutine supm_elmbstGal3d   
   
   subroutine supm_elmbutGal(e,auxVE,dtinv,gpadv,dvolu,auxtens,beta,grvel,gpsig,grsig,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: dvolu,dtinv,gpadv(e%pnode),beta,grvel(e%ndime,e%ndime),gpsig(auxtens),grsig(auxtens,e%ndime),auxVE  
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux3
      real(rp)                   :: Res11u,Res11v,Res12u,Res12v,Res22u,Res22v           

      
      do jnode=1,e%pnode
         
         Res11u = -(1.0_rp - beta)*e%cartd(1,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(1,1) - 2.0_rp*(gpsig(1)*e%cartd(1,jnode) + gpsig(3)*e%cartd(2,jnode)))
         Res11v = auxVE*(e%shape(jnode,e%igaus)*grsig(1,2))
         
         Res12u = -((1.0_rp - beta)/2.0_rp)*e%cartd(2,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(3,1) - (gpsig(2)*e%cartd(2,jnode)))
         Res12v = -((1.0_rp - beta)/2.0_rp)*e%cartd(1,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(3,2) - (gpsig(1)*e%cartd(1,jnode)))
         
         Res22u = auxVE*(e%shape(jnode,e%igaus)*grsig(2,1))
         Res22v = -(1.0_rp - beta)*e%cartd(2,jnode) & 
               + auxVE*(e%shape(jnode,e%igaus)*grsig(2,2) - 2.0_rp*(gpsig(3)*e%cartd(1,jnode) + gpsig(2)*e%cartd(2,jnode)))             
         
         do inode=1,e%pnode
         
            aux3=e%shape(inode,e%igaus)*dvolu
         
            elmat(1,inode,1,jnode) = aux3*Res11u + elmat(1,inode,1,jnode)            
            elmat(1,inode,2,jnode) = aux3*Res11v + elmat(1,inode,2,jnode)
            
            elmat(2,inode,1,jnode) = aux3*Res22u + elmat(2,inode,1,jnode)   
            elmat(2,inode,2,jnode) = aux3*Res22v + elmat(2,inode,2,jnode)
               
            elmat(3,inode,1,jnode) = aux3*(2.0_rp*Res12u) + elmat(3,inode,1,jnode)               
            elmat(3,inode,2,jnode) = aux3*(2.0_rp*Res12v) + elmat(3,inode,2,jnode)                                         

         end do  
      end do

   end subroutine supm_elmbutGal
   
   subroutine supm_elmbutGal3d(e,auxVE,dtinv,gpadv,dvolu,auxtens,beta,grvel,gpsig,grsig,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: dvolu,dtinv,gpadv(e%pnode),beta,grvel(e%ndime,e%ndime),gpsig(auxtens),grsig(auxtens,e%ndime),auxVE  
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux3
      real(rp)                   :: Res11u,Res11v,Res11w,Res12u,Res12v,Res12w,Res22u,Res22v,Res22w, &
                                    Res13u,Res13v,Res13w,Res23u,Res23v,Res23w,Res33u,Res33v,Res33w               

      
      do jnode=1,e%pnode
         
         Res11u = -(1.0_rp - beta)*e%cartd(1,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(1,1) - 2.0_rp*(gpsig(1)*e%cartd(1,jnode) + gpsig(6)*e%cartd(2,jnode) &
               + gpsig(5)*e%cartd(3,jnode)))
         Res11v = auxVE*(e%shape(jnode,e%igaus)*grsig(1,2))
         Res11w = auxVE*(e%shape(jnode,e%igaus)*grsig(1,3))
         
         Res22u = auxVE*(e%shape(jnode,e%igaus)*grsig(2,1))
         Res22v = -(1.0_rp - beta)*e%cartd(2,jnode) & 
               + auxVE*(e%shape(jnode,e%igaus)*grsig(2,2) - 2.0_rp*(gpsig(6)*e%cartd(1,jnode) + gpsig(2)*e%cartd(2,jnode) &
               + gpsig(4)*e%cartd(3,jnode)))             
         Res22w = auxVE*(e%shape(jnode,e%igaus)*grsig(2,3))
         
         Res33u = auxVE*(e%shape(jnode,e%igaus)*grsig(3,1))
         Res33v = auxVE*(e%shape(jnode,e%igaus)*grsig(3,2))
         Res33w = -(1.0_rp - beta)*e%cartd(3,jnode) & 
               + auxVE*(e%shape(jnode,e%igaus)*grsig(3,3) - 2.0_rp*(gpsig(5)*e%cartd(1,jnode) + gpsig(4)*e%cartd(2,jnode) &
               + gpsig(3)*e%cartd(3,jnode)))     
         
         Res12u = -((1.0_rp - beta)/2.0_rp)*e%cartd(2,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(6,1) - (gpsig(6)*e%cartd(1,jnode) + gpsig(2)*e%cartd(2,jnode) &
               + gpsig(4)*e%cartd(3,jnode)))
         Res12v = -((1.0_rp - beta)/2.0_rp)*e%cartd(1,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(6,2) - (gpsig(1)*e%cartd(1,jnode) + gpsig(6)*e%cartd(2,jnode) &
               + gpsig(5)*e%cartd(3,jnode)))
         Res12w = auxVE*(e%shape(jnode,e%igaus)*grsig(6,3))
         
         Res13u = -((1.0_rp - beta)/2.0_rp)*e%cartd(3,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(5,1) - (gpsig(5)*e%cartd(1,jnode) + gpsig(4)*e%cartd(2,jnode) &
               + gpsig(3)*e%cartd(3,jnode)))
         Res13v = auxVE*(e%shape(jnode,e%igaus)*grsig(5,2))
         Res13w = -((1.0_rp - beta)/2.0_rp)*e%cartd(1,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(5,3) - (gpsig(1)*e%cartd(1,jnode) + gpsig(6)*e%cartd(2,jnode) &
               + gpsig(5)*e%cartd(3,jnode)))
               
         Res23u = auxVE*(e%shape(jnode,e%igaus)*grsig(4,1))
         Res23v = -((1.0_rp - beta)/2.0_rp)*e%cartd(3,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(4,2) - (gpsig(5)*e%cartd(1,jnode) + gpsig(4)*e%cartd(2,jnode) &
               + gpsig(3)*e%cartd(3,jnode)))
         Res23w = -((1.0_rp - beta)/2.0_rp)*e%cartd(2,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(4,3) - (gpsig(6)*e%cartd(1,jnode) + gpsig(2)*e%cartd(2,jnode) &
               + gpsig(4)*e%cartd(3,jnode)))
               
         
         do inode=1,e%pnode
         
            aux3=e%shape(inode,e%igaus)*dvolu
         
            elmat(1,inode,1,jnode) = aux3*Res11u + elmat(1,inode,1,jnode)            
            elmat(1,inode,2,jnode) = aux3*Res11v + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = aux3*Res11w + elmat(1,inode,3,jnode)
            
            elmat(2,inode,1,jnode) = aux3*Res22u + elmat(2,inode,1,jnode)   
            elmat(2,inode,2,jnode) = aux3*Res22v + elmat(2,inode,2,jnode)
            elmat(2,inode,3,jnode) = aux3*Res22w + elmat(2,inode,3,jnode)

            elmat(3,inode,1,jnode) = aux3*Res33u + elmat(3,inode,1,jnode)   
            elmat(3,inode,2,jnode) = aux3*Res33v + elmat(3,inode,2,jnode)
            elmat(3,inode,3,jnode) = aux3*Res33w + elmat(3,inode,3,jnode)
            
            elmat(4,inode,1,jnode) = aux3*(2.0_rp*Res23u) + elmat(4,inode,1,jnode)               
            elmat(4,inode,2,jnode) = aux3*(2.0_rp*Res23v) + elmat(4,inode,2,jnode)                                         
            elmat(4,inode,3,jnode) = aux3*(2.0_rp*Res23w) + elmat(4,inode,3,jnode)

            elmat(5,inode,1,jnode) = aux3*(2.0_rp*Res13u) + elmat(5,inode,1,jnode)               
            elmat(5,inode,2,jnode) = aux3*(2.0_rp*Res13v) + elmat(5,inode,2,jnode)                                         
            elmat(5,inode,3,jnode) = aux3*(2.0_rp*Res13w) + elmat(5,inode,3,jnode)            
            
            elmat(6,inode,1,jnode) = aux3*(2.0_rp*Res12u) + elmat(6,inode,1,jnode)               
            elmat(6,inode,2,jnode) = aux3*(2.0_rp*Res12v) + elmat(6,inode,2,jnode)                                         
            elmat(6,inode,3,jnode) = aux3*(2.0_rp*Res12w) + elmat(6,inode,3,jnode)
            
         end do  
      end do

   end subroutine supm_elmbutGal3d   
   
   
   subroutine supm_elmrhcGal(e,auxVE,auxG,auxPTT,acvis,dvolu,auxtens,elextS,gpvel,grvel,gpsig,grsig,elrhs)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxPTT
      real(rp),    intent(in)    :: elextS(auxtens),gpvel(e%ndime),grvel(e%ndime,e%ndime)
      real(rp),    intent(in)    :: dvolu,acvis,auxG,auxVE,gpsig(auxtens),grsig(auxtens,e%ndime)
      real(rp),    intent(inout) :: elrhs(auxtens,e%mnode)
      integer(ip)                :: inode
      real(rp)                   :: aux1
      real(rp)                   :: Res11,Res12,Res22,traza
      
      traza = (gpsig(1) + gpsig(2))
      
      Res11 = elextS(1) + auxVE*((gpvel(1)*grsig(1,1) + gpvel(2)*grsig(1,2)) &
            - 2.0_rp*(grvel(1,1)*gpsig(1) + grvel(1,2)*gpsig(3)) + auxPTT*(auxG/acvis)*(gpsig(1)*gpsig(1) + gpsig(3)*gpsig(3))) &
            + (1_ip - auxPTT)*auxVE*(auxG/acvis)*(traza)*gpsig(1)
      Res12 = elextS(3) + ((gpvel(1)*grsig(3,1) + gpvel(2)*grsig(3,2)) - (grvel(2,1)*gpsig(1) + grvel(1,2)*gpsig(2)) &
            + (auxG/acvis)*(gpsig(1) + gpsig(2))*gpsig(3))*auxVE      
      Res22 = elextS(2) + auxVE*((gpvel(1)*grsig(2,1) + gpvel(2)*grsig(2,2)) &
            - 2.0_rp*(grvel(2,1)*gpsig(3) + grvel(2,2)*gpsig(2)) + auxPTT*(auxG/acvis)*(gpsig(3)*gpsig(3) + gpsig(2)*gpsig(2))) &
            + (1_ip - auxPTT)*auxVE*(auxG/acvis)*(traza)*gpsig(2)
               

      do inode=1,e%pnode
      
         aux1=e%shape(inode,e%igaus)*dvolu
         
         elrhs(1,inode) = aux1*Res11 + elrhs(1,inode) 
         elrhs(2,inode) = aux1*Res22 + elrhs(2,inode)
         elrhs(3,inode) = aux1*(2.0_rp*Res12) + elrhs(3,inode)
  
      end do

   end subroutine supm_elmrhcGal
   
   subroutine supm_elmrhcGal3d(e,auxVE,auxG,auxPTT,acvis,dvolu,auxtens,elextS,gpvel,grvel,gpsig,grsig,elrhs)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxPTT
      real(rp),    intent(in)    :: elextS(auxtens),gpvel(e%ndime),grvel(e%ndime,e%ndime)
      real(rp),    intent(in)    :: dvolu,acvis,auxG,auxVE,gpsig(auxtens),grsig(auxtens,e%ndime)
      real(rp),    intent(inout) :: elrhs(auxtens,e%mnode)
      integer(ip)                :: inode
      real(rp)                   :: aux1
      real(rp)                   :: Res11,Res12,Res21,Res13,Res31,Res22,Res23,Res32,Res33
      
      Res11 = elextS(1) + auxVE*((gpvel(1)*grsig(1,1) + gpvel(2)*grsig(1,2) + gpvel(3)*grsig(1,3)) &
               - 2.0_rp*(grvel(1,1)*gpsig(1) + grvel(1,2)*gpsig(6) + grvel(1,3)*gpsig(5)) &
               + (auxG/acvis)*(gpsig(1)*gpsig(1) + auxPTT*(gpsig(6)*gpsig(6) + gpsig(5)*gpsig(5))))
      
      Res22 = elextS(2) + auxVE*((gpvel(1)*grsig(2,1) + gpvel(2)*grsig(2,2) + gpvel(3)*grsig(2,3)) &
               - 2.0_rp*(grvel(2,1)*gpsig(6) + grvel(2,2)*gpsig(2) + grvel(2,3)*gpsig(4)) &
               + (auxG/acvis)*(gpsig(2)*gpsig(2) + auxPTT*(gpsig(6)*gpsig(6) + gpsig(4)*gpsig(4))))               
      
      Res33 = elextS(3) + auxVE*((gpvel(1)*grsig(3,1) + gpvel(2)*grsig(3,2) + gpvel(3)*grsig(3,3)) &
               - 2.0_rp*(grvel(3,1)*gpsig(5) + grvel(3,2)*gpsig(4) + grvel(3,3)*gpsig(3)) &
               + (auxG/acvis)*(gpsig(3)*gpsig(3) + auxPTT*(gpsig(5)*gpsig(5) + gpsig(4)*gpsig(4))))       
      
      Res12 = elextS(6) + auxVE*((gpvel(1)*grsig(6,1) + gpvel(2)*grsig(6,2) + gpvel(3)*grsig(6,3)) &
               - (grvel(2,1)*gpsig(1) + grvel(1,2)*gpsig(2) + (grvel(2,2) + grvel(1,1))*gpsig(6) &
               + gpsig(5)*grvel(2,3) + gpsig(4)*grvel(1,3)) &
               + (auxG/acvis)*((gpsig(1) + auxPTT*gpsig(2))*gpsig(6) + auxPTT*(gpsig(4)*gpsig(5))))
               
      Res21 = elextS(6) + auxVE*((gpvel(1)*grsig(6,1) + gpvel(2)*grsig(6,2) + gpvel(3)*grsig(6,3)) &
               - (grvel(2,1)*gpsig(1) + grvel(1,2)*gpsig(2) + (grvel(2,2) + grvel(1,1))*gpsig(6) &
               + gpsig(5)*grvel(2,3) + gpsig(4)*grvel(1,3)) &
               + (auxG/acvis)*((auxPTT*gpsig(1) + gpsig(2))*gpsig(6) + auxPTT*(gpsig(4)*gpsig(5))))               

      Res13 = elextS(5) + auxVE*((gpvel(1)*grsig(5,1) + gpvel(2)*grsig(5,2) + gpvel(3)*grsig(5,3)) &
               - (grvel(3,1)*gpsig(1) + grvel(3,2)*gpsig(6) + (grvel(3,3) + grvel(1,1))*gpsig(5) &
               + gpsig(4)*grvel(1,2) + gpsig(3)*grvel(1,3)) &
               + (auxG/acvis)*((gpsig(1) + auxPTT*gpsig(3))*gpsig(5) + auxPTT*(gpsig(4)*gpsig(6))))   
               
      Res31 = elextS(5) + auxVE*((gpvel(1)*grsig(5,1) + gpvel(2)*grsig(5,2) + gpvel(3)*grsig(5,3)) &
               - (grvel(3,1)*gpsig(1) + grvel(3,2)*gpsig(6) + (grvel(3,3) + grvel(1,1))*gpsig(5) &
               + gpsig(4)*grvel(1,2) + gpsig(3)*grvel(1,3)) &
               + (auxG/acvis)*((auxPTT*gpsig(1) + gpsig(3))*gpsig(5) + auxPTT*(gpsig(4)*gpsig(6))))                 
               
      Res23 = elextS(4) + auxVE*((gpvel(1)*grsig(4,1) + gpvel(2)*grsig(4,2) + gpvel(3)*grsig(4,3)) &
               - (grvel(3,1)*gpsig(6) + grvel(3,2)*gpsig(2) + (grvel(3,3) + grvel(2,2))*gpsig(4) &
               + gpsig(5)*grvel(2,1) + gpsig(3)*grvel(2,3)) &
               + (auxG/acvis)*((gpsig(2) + auxPTT*gpsig(3))*gpsig(4) + auxPTT*(gpsig(6)*gpsig(5)))) 
               
      Res32 = elextS(4) + auxVE*((gpvel(1)*grsig(4,1) + gpvel(2)*grsig(4,2) + gpvel(3)*grsig(4,3)) &
               - (grvel(3,1)*gpsig(6) + grvel(3,2)*gpsig(2) + (grvel(3,3) + grvel(2,2))*gpsig(4) &
               + gpsig(5)*grvel(2,1) + gpsig(3)*grvel(2,3)) &
               + (auxG/acvis)*((auxPTT*gpsig(2) + gpsig(3))*gpsig(4) + auxPTT*(gpsig(6)*gpsig(5))))                 
               


      do inode=1,e%pnode
      
         aux1=e%shape(inode,e%igaus)*dvolu
         
         elrhs(1,inode) = aux1*Res11 + elrhs(1,inode) 
         elrhs(2,inode) = aux1*Res22 + elrhs(2,inode)
         elrhs(3,inode) = aux1*Res33 + elrhs(3,inode) 
         elrhs(4,inode) = aux1*(Res23 + Res32) + elrhs(4,inode)         
         elrhs(5,inode) = aux1*(Res13 + Res31) + elrhs(5,inode)         
         elrhs(6,inode) = aux1*(Res12 + Res21) + elrhs(6,inode)
  
      end do

   end subroutine supm_elmrhcGal3d   
   
   subroutine supm_elmbsvGal(e,dvolu,auxtens,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in momentum equation
    !    (gra_sym(v),S) -tau3(gra_sym(v),1/2mu*S) -tau1(rho*a*grad(v),div(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: dvolu
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux

      aux  = dvolu 
      do inode=1,e%pnode       
         do jnode=1,e%pnode
         
            elmat(1,inode,1,jnode) = e%cartd(1,inode)*aux*e%shape(jnode,e%igaus) + elmat(1,inode,1,jnode)                                      
            elmat(1,inode,2,jnode) = 0.0_rp + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = e%cartd(2,inode)*aux*e%shape(jnode,e%igaus) + elmat(1,inode,3,jnode)
               
            elmat(2,inode,1,jnode) = 0.0_rp + elmat(2,inode,1,jnode)
            elmat(2,inode,2,jnode) = e%cartd(2,inode)*aux*e%shape(jnode,e%igaus) + elmat(2,inode,2,jnode)
            elmat(2,inode,3,jnode) = e%cartd(1,inode)*aux*e%shape(jnode,e%igaus) + elmat(2,inode,3,jnode)                                    
      
         end do  
      end do
 
   end subroutine supm_elmbsvGal
   
   subroutine supm_elmbsvGal3d(e,dvolu,auxtens,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in momentum equation
    !    (gra_sym(v),S) -tau3(gra_sym(v),1/2mu*S) -tau1(rho*a*grad(v),div(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: dvolu
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux

      aux  = dvolu 
      do inode=1,e%pnode       
         do jnode=1,e%pnode
         
            elmat(1,inode,1,jnode) = e%cartd(1,inode)*aux*e%shape(jnode,e%igaus) + elmat(1,inode,1,jnode)                                      
            elmat(1,inode,2,jnode) = 0.0_rp + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = 0.0_rp + elmat(1,inode,3,jnode)
            elmat(1,inode,4,jnode) = 0.0_rp + elmat(1,inode,4,jnode)                                      
            elmat(1,inode,5,jnode) = e%cartd(3,inode)*aux*e%shape(jnode,e%igaus) + elmat(1,inode,5,jnode)
            elmat(1,inode,6,jnode) = e%cartd(2,inode)*aux*e%shape(jnode,e%igaus) + elmat(1,inode,6,jnode)

            elmat(2,inode,1,jnode) = 0.0_rp + elmat(2,inode,1,jnode)                                      
            elmat(2,inode,2,jnode) = e%cartd(2,inode)*aux*e%shape(jnode,e%igaus) + elmat(2,inode,2,jnode)
            elmat(2,inode,3,jnode) = 0.0_rp + elmat(2,inode,3,jnode)
            elmat(2,inode,4,jnode) = e%cartd(3,inode)*aux*e%shape(jnode,e%igaus) + elmat(2,inode,4,jnode)                                      
            elmat(2,inode,5,jnode) = 0.0_rp + elmat(2,inode,5,jnode)
            elmat(2,inode,6,jnode) = e%cartd(1,inode)*aux*e%shape(jnode,e%igaus) + elmat(2,inode,6,jnode)         
            
            elmat(3,inode,1,jnode) = 0.0_rp + elmat(3,inode,1,jnode)                                      
            elmat(3,inode,2,jnode) = 0.0_rp + elmat(3,inode,2,jnode)
            elmat(3,inode,3,jnode) = e%cartd(3,inode)*aux*e%shape(jnode,e%igaus) + elmat(3,inode,3,jnode)
            elmat(3,inode,4,jnode) = e%cartd(2,inode)*aux*e%shape(jnode,e%igaus) + elmat(3,inode,4,jnode)                                      
            elmat(3,inode,5,jnode) = e%cartd(1,inode)*aux*e%shape(jnode,e%igaus) + elmat(3,inode,5,jnode)
            elmat(3,inode,6,jnode) = 0.0_rp + elmat(3,inode,6,jnode)                                   
      
         end do  
      end do
 
   end subroutine supm_elmbsvGal3d   
   
   subroutine supm_elmbuvGal(e,dvolu,acvis,beta,acden,gpadv,grvel,dtinv,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in momentum equation
    !    (gra_sym(v),S) -tau3(gra_sym(v),1/2mu*S) -tau1(rho*a*grad(v),div(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      real(rp),    intent(in)    :: dvolu,acden,gpadv(e%pnode),grvel(e%ndime,e%ndime),dtinv,acvis,beta
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux,aux1

      aux  = dvolu*acden
      aux1 = dvolu*acvis*beta

      do inode=1,e%pnode       
         do jnode=1,e%pnode
         
            elmat(1,inode,1,jnode) = aux*e%shape(inode,e%igaus)*(dtinv*e%shape(jnode,e%igaus)  &
                  + gpadv(jnode) + e%shape(jnode,e%igaus)*grvel(1,1)) &
                  + aux1*(e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(2,inode)*e%cartd(2,jnode)) + elmat(1,inode,1,jnode)                                      
            elmat(1,inode,2,jnode) = aux*e%shape(inode,e%igaus)*(e%shape(jnode,e%igaus)*grvel(1,2)) + elmat(1,inode,2,jnode)
               
            elmat(2,inode,1,jnode) = aux*e%shape(inode,e%igaus)*(e%shape(jnode,e%igaus)*grvel(2,1)) + elmat(2,inode,1,jnode)
            elmat(2,inode,2,jnode) = aux*e%shape(inode,e%igaus)*(dtinv*e%shape(jnode,e%igaus)  &
                  + gpadv(jnode) + e%shape(jnode,e%igaus)*grvel(2,2)) &
                  + aux1*(e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(2,inode)*e%cartd(2,jnode)) + elmat(2,inode,2,jnode)        
    
         end do  
      end do
 
   end subroutine supm_elmbuvGal
   
   subroutine supm_elmbuvGal3d(e,dvolu,acvis,beta,acden,gpadv,grvel,dtinv,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in momentum equation
    !    (gra_sym(v),S) -tau3(gra_sym(v),1/2mu*S) -tau1(rho*a*grad(v),div(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      real(rp),    intent(in)    :: dvolu,acden,gpadv(e%pnode),grvel(e%ndime,e%ndime),dtinv,acvis,beta
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux,aux1

      aux  = dvolu*acden
      aux1 = dvolu*acvis*beta
      do inode=1,e%pnode       
         do jnode=1,e%pnode
         
            elmat(1,inode,1,jnode) = aux*e%shape(inode,e%igaus)*(dtinv*e%shape(jnode,e%igaus)  &
                  + gpadv(jnode) + e%shape(jnode,e%igaus)*grvel(1,1)) &
                  + aux1*(e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(2,inode)*e%cartd(2,jnode) + e%cartd(3,inode)*e%cartd(3,jnode)) &
                  + elmat(1,inode,1,jnode)                                      
            elmat(1,inode,2,jnode) = aux*e%shape(inode,e%igaus)*(e%shape(jnode,e%igaus)*grvel(1,2)) + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = aux*e%shape(inode,e%igaus)*(e%shape(jnode,e%igaus)*grvel(1,3)) + elmat(1,inode,3,jnode)         
            
            
            elmat(2,inode,1,jnode) = aux*e%shape(inode,e%igaus)*(e%shape(jnode,e%igaus)*grvel(2,1)) + elmat(2,inode,1,jnode)
            elmat(2,inode,2,jnode) = aux*e%shape(inode,e%igaus)*(dtinv*e%shape(jnode,e%igaus)  &
                  + gpadv(jnode) + e%shape(jnode,e%igaus)*grvel(2,2)) &
                  + aux1*(e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(2,inode)*e%cartd(2,jnode) + e%cartd(3,inode)*e%cartd(3,jnode)) &
                  + elmat(2,inode,2,jnode)                                  
            elmat(2,inode,3,jnode) = aux*e%shape(inode,e%igaus)*(e%shape(jnode,e%igaus)*grvel(2,3)) + elmat(2,inode,3,jnode) 
            
            elmat(3,inode,1,jnode) = aux*e%shape(inode,e%igaus)*(e%shape(jnode,e%igaus)*grvel(3,1)) + elmat(3,inode,1,jnode)
            elmat(3,inode,2,jnode) = aux*e%shape(inode,e%igaus)*(e%shape(jnode,e%igaus)*grvel(3,2)) + elmat(3,inode,2,jnode)         
            elmat(3,inode,3,jnode) = aux*e%shape(inode,e%igaus)*(dtinv*e%shape(jnode,e%igaus)  &
                  + gpadv(jnode) + e%shape(jnode,e%igaus)*grvel(3,3)) &
                  + aux1*(e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(2,inode)*e%cartd(2,jnode) + e%cartd(3,inode)*e%cartd(3,jnode)) &
                  + elmat(3,inode,3,jnode)         
         
         end do  
      end do
 
   end subroutine supm_elmbuvGal3d   
   
   subroutine supm_elmbpvGal(e,dvolu,elmat) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      real(rp),    intent(in)    :: dvolu
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,1,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux1 
          
      do jnode=1,e%pnode
         aux1=-dvolu*e%shape(jnode,e%igaus)       
         do inode=1,e%pnode         
                 
            elmat(1,inode,1,jnode) = aux1*e%cartd(1,inode) + elmat(1,inode,1,jnode)        
            elmat(2,inode,1,jnode) = aux1*e%cartd(2,inode) + elmat(2,inode,1,jnode)               

         end do
      end do

   end subroutine supm_elmbpvGal 

   subroutine supm_elmbpvGal3d(e,dvolu,elmat) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      real(rp),    intent(in)    :: dvolu
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,1,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux1 
          
      do jnode=1,e%pnode
         aux1=-dvolu*e%shape(jnode,e%igaus)       
         do inode=1,e%pnode         
                 
            elmat(1,inode,1,jnode) = aux1*e%cartd(1,inode) + elmat(1,inode,1,jnode)        
            elmat(2,inode,1,jnode) = aux1*e%cartd(2,inode) + elmat(2,inode,1,jnode)               
            elmat(3,inode,1,jnode) = aux1*e%cartd(3,inode) + elmat(3,inode,1,jnode)  
         
         end do
      end do

   end subroutine supm_elmbpvGal3d    
   
   subroutine supm_elmrhuGal(e,acden,dvolu,elext,gpvel,grvel,elrhs)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      real(rp),    intent(in)    :: elext(e%ndime),acden
      real(rp),    intent(in)    :: dvolu,gpvel(e%ndime),grvel(e%ndime,e%ndime)
      real(rp),    intent(inout) :: elrhs(e%ndime,e%mnode)
      integer(ip)                :: inode
      real(rp)                   :: aux

      do inode=1,e%pnode
         aux = e%shape(inode,e%igaus)*dvolu       

         elrhs(1,inode) = aux*(elext(1) + acden*(gpvel(1)*grvel(1,1) + gpvel(2)*grvel(1,2))) &
               + elrhs(1,inode) 
         elrhs(2,inode) = aux*(elext(2) + acden*(gpvel(1)*grvel(2,1) + gpvel(2)*grvel(2,2))) &               
               + elrhs(2,inode)  
      end do

   end subroutine supm_elmrhuGal 

   subroutine supm_elmrhuGal3d(e,acden,dvolu,elext,gpvel,grvel,elrhs)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      real(rp),    intent(in)    :: elext(e%ndime),acden
      real(rp),    intent(in)    :: dvolu,gpvel(e%ndime),grvel(e%ndime,e%ndime)
      real(rp),    intent(inout) :: elrhs(e%ndime,e%mnode)
      integer(ip)                :: inode
      real(rp)                   :: aux

      do inode=1,e%pnode
         aux = e%shape(inode,e%igaus)*dvolu       

         elrhs(1,inode) = aux*(elext(1) + acden*(gpvel(1)*grvel(1,1) + gpvel(2)*grvel(1,2) + gpvel(3)*grvel(1,3))) &
               + elrhs(1,inode) 
         elrhs(2,inode) = aux*(elext(2) + acden*(gpvel(1)*grvel(2,1) + gpvel(2)*grvel(2,2) + gpvel(3)*grvel(2,3))) &               
               + elrhs(2,inode)
         elrhs(3,inode) = aux*(elext(3) + acden*(gpvel(1)*grvel(3,1) + gpvel(2)*grvel(3,2) + gpvel(3)*grvel(3,3))) &               
               + elrhs(3,inode)   
          
      end do

   end subroutine supm_elmrhuGal3d    
   
   subroutine supm_elmbuqGal(e,dvolu,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      real(rp),    intent(in)    :: dvolu
      real(rp),    intent(inout) :: elmat(1,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux2
      
      do inode=1,e%pnode  
         aux2= e%shape(inode,e%igaus)*dvolu      
         do jnode=1,e%pnode                 
                 
            elmat(1,inode,1,jnode) = aux2*e%cartd(1,jnode) + elmat(1,inode,1,jnode)        
            elmat(1,inode,2,jnode) = aux2*e%cartd(2,jnode) + elmat(1,inode,2,jnode)

         end do
      end do

   end subroutine supm_elmbuqGal
   
   subroutine supm_elmbuqGal3d(e,dvolu,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      real(rp),    intent(in)    :: dvolu
      real(rp),    intent(inout) :: elmat(1,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux2
      
      do inode=1,e%pnode  
         aux2= e%shape(inode,e%igaus)*dvolu      
         do jnode=1,e%pnode                 
                 
            elmat(1,inode,1,jnode) = aux2*e%cartd(1,jnode) + elmat(1,inode,1,jnode)        
            elmat(1,inode,2,jnode) = aux2*e%cartd(2,jnode) + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = aux2*e%cartd(3,jnode) + elmat(1,inode,3,jnode)
         
         end do
      end do

   end subroutine supm_elmbuqGal3d   
   
   subroutine supm_elmbpqpena(e,acvis,dvolu,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the third lhs term for ASGS in constitutive equation
    !    -tau1*(gra(p),div(t))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      real(rp),    intent(in)    :: dvolu,acvis
      real(rp),    intent(inout) :: elmat(1,e%mnode,1,e%mnode)
      integer(ip)                :: inode,jnode,k,aux1
      real(rp)                   :: aux,epsi

      k=6
      epsi = (10.0_rp**(-k))/acvis
      aux  = epsi*dvolu    
      
      do jnode=1,e%pnode  
         do inode=1,e%pnode    

         elmat(1,inode,1,jnode) = e%shape(inode,e%igaus)*aux*e%shape(jnode,e%igaus) + elmat(1,inode,1,jnode)
         
         end do  
      end do

   end subroutine supm_elmbpqpena    
   
   subroutine supm_elmrhpGal(e,dvolu,elextC,elrhs)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      real(rp),    intent(in)    :: elextC(1)
      real(rp),    intent(in)    :: dvolu
      real(rp),    intent(inout) :: elrhs(1,e%mnode)
      integer(ip)                :: inode
    
      do inode=1,e%pnode

         elrhs(1,inode) = e%shape(inode,e%igaus)*dvolu*elextC(1) + elrhs(1,inode) 
  
      end do

   end subroutine supm_elmrhpGal     
   
   
   
   !**********************************************************************************************************************************
   !Estabilization terms of Momentum and Continuity equation
   subroutine supm_elmbstEst1(e,beta,timom,dvolu,auxtens,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in constitutive equation
    !    1/2mu(S,T)+tau1*(div(T),div(S))-tau3*(1/2mu*(T),1/2mu*(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: timom,dvolu,beta
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux2
      
      aux2= timom*dvolu*(1.0_rp-beta)      
      
      do jnode=1,e%pnode    
         do inode=1,e%pnode
         
            elmat(1,inode,1,jnode) = aux2*(e%cartd(1,inode)*e%cartd(1,jnode)) + elmat(1,inode,1,jnode)
            elmat(1,inode,2,jnode) = 0.0_rp + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = aux2*(e%cartd(1,inode)*e%cartd(2,jnode)) + elmat(1,inode,3,jnode)
            
            elmat(2,inode,1,jnode) = 0.0_rp + elmat(2,inode,1,jnode)
            elmat(2,inode,2,jnode) = aux2*(e%cartd(2,inode)*e%cartd(2,jnode)) + elmat(2,inode,2,jnode)
            elmat(2,inode,3,jnode) = aux2*(e%cartd(2,inode)*e%cartd(1,jnode)) + elmat(2,inode,3,jnode)
            
            elmat(3,inode,1,jnode) = aux2*(e%cartd(2,inode)*e%cartd(1,jnode)) + elmat(3,inode,1,jnode)
            elmat(3,inode,2,jnode) = aux2*(e%cartd(1,inode)*e%cartd(2,jnode)) + elmat(3,inode,2,jnode)                                         
            elmat(3,inode,3,jnode) = aux2*(e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(2,inode)*e%cartd(2,jnode)) + elmat(3,inode,3,jnode)                                  

         end do
      end do   

   end subroutine supm_elmbstEst1 
   
   subroutine supm_elmbstEst13d(e,beta,timom,dvolu,auxtens,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in constitutive equation
    !    1/2mu(S,T)+tau1*(div(T),div(S))-tau3*(1/2mu*(T),1/2mu*(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: timom,dvolu,beta
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux2
      
      aux2= timom*dvolu*(1.0_rp-beta)      
      
      do jnode=1,e%pnode    
         do inode=1,e%pnode
         
            elmat(1,inode,1,jnode) = aux2*(e%cartd(1,inode)*e%cartd(1,jnode)) + elmat(1,inode,1,jnode)
            elmat(1,inode,2,jnode) = 0.0_rp + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = 0.0_rp + elmat(1,inode,3,jnode)
            elmat(1,inode,4,jnode) = 0.0_rp + elmat(1,inode,4,jnode)
            elmat(1,inode,5,jnode) = aux2*(e%cartd(1,inode)*e%cartd(3,jnode)) + elmat(1,inode,5,jnode)
            elmat(1,inode,6,jnode) = aux2*(e%cartd(1,inode)*e%cartd(2,jnode)) + elmat(1,inode,6,jnode)            

            elmat(2,inode,1,jnode) = 0.0_rp + elmat(2,inode,1,jnode)
            elmat(2,inode,2,jnode) = aux2*(e%cartd(2,inode)*e%cartd(2,jnode)) + elmat(2,inode,2,jnode)
            elmat(2,inode,3,jnode) = 0.0_rp + elmat(2,inode,3,jnode)
            elmat(2,inode,4,jnode) = aux2*(e%cartd(2,inode)*e%cartd(3,jnode)) + elmat(2,inode,4,jnode)
            elmat(2,inode,5,jnode) = 0.0_rp + elmat(2,inode,5,jnode)
            elmat(2,inode,6,jnode) = aux2*(e%cartd(2,inode)*e%cartd(1,jnode)) + elmat(2,inode,6,jnode)            
            
            elmat(3,inode,1,jnode) = 0.0_rp + elmat(3,inode,1,jnode)
            elmat(3,inode,2,jnode) = 0.0_rp + elmat(3,inode,2,jnode)
            elmat(3,inode,3,jnode) = aux2*(e%cartd(3,inode)*e%cartd(3,jnode)) + elmat(3,inode,3,jnode)
            elmat(3,inode,4,jnode) = aux2*(e%cartd(3,inode)*e%cartd(2,jnode)) + elmat(3,inode,4,jnode)
            elmat(3,inode,5,jnode) = aux2*(e%cartd(3,inode)*e%cartd(1,jnode)) + elmat(3,inode,5,jnode)
            elmat(3,inode,6,jnode) = 0.0_rp + elmat(3,inode,6,jnode) 

            elmat(4,inode,1,jnode) = 0.0_rp + elmat(4,inode,1,jnode)
            elmat(4,inode,2,jnode) = aux2*(e%cartd(3,inode)*e%cartd(2,jnode)) + elmat(4,inode,2,jnode)                                         
            elmat(4,inode,3,jnode) = aux2*(e%cartd(2,inode)*e%cartd(3,jnode)) + elmat(4,inode,3,jnode)
            elmat(4,inode,4,jnode) = aux2*(e%cartd(2,inode)*e%cartd(2,jnode) + e%cartd(3,inode)*e%cartd(3,jnode)) + elmat(4,inode,4,jnode) 
            elmat(4,inode,5,jnode) = aux2*(e%cartd(2,inode)*e%cartd(1,jnode)) + elmat(4,inode,5,jnode) 
            elmat(4,inode,6,jnode) = aux2*(e%cartd(3,inode)*e%cartd(1,jnode)) + elmat(4,inode,6,jnode)             

            elmat(5,inode,1,jnode) = aux2*(e%cartd(3,inode)*e%cartd(1,jnode)) + elmat(5,inode,1,jnode)
            elmat(5,inode,2,jnode) = 0.0_rp + elmat(5,inode,2,jnode)                                         
            elmat(5,inode,3,jnode) = aux2*(e%cartd(1,inode)*e%cartd(3,jnode)) + elmat(5,inode,3,jnode)
            elmat(5,inode,4,jnode) = aux2*(e%cartd(1,inode)*e%cartd(2,jnode)) + elmat(5,inode,4,jnode) 
            elmat(5,inode,5,jnode) = aux2*(e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(3,inode)*e%cartd(3,jnode)) + elmat(5,inode,5,jnode) 
            elmat(5,inode,6,jnode) = aux2*(e%cartd(3,inode)*e%cartd(2,jnode)) + elmat(5,inode,6,jnode)              
            
            elmat(6,inode,1,jnode) = aux2*(e%cartd(2,inode)*e%cartd(1,jnode)) + elmat(6,inode,1,jnode)
            elmat(6,inode,2,jnode) = aux2*(e%cartd(1,inode)*e%cartd(2,jnode)) + elmat(6,inode,2,jnode)                                         
            elmat(6,inode,3,jnode) = 0.0_rp + elmat(6,inode,3,jnode)
            elmat(6,inode,4,jnode) = aux2*(e%cartd(1,inode)*e%cartd(3,jnode)) + elmat(6,inode,4,jnode) 
            elmat(6,inode,5,jnode) = aux2*(e%cartd(2,inode)*e%cartd(3,jnode)) + elmat(6,inode,5,jnode) 
            elmat(6,inode,6,jnode) = aux2*(e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(2,inode)*e%cartd(2,jnode)) + elmat(6,inode,6,jnode)                                  

         end do
      end do   

   end subroutine supm_elmbstEst13d    
   
   subroutine supm_elmbutEst1(e,beta,acden,timom,dtinv,dvolu,auxtens,gpadv,grvel,auxoss,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxtens,auxoss
      real(rp),    intent(in)    :: timom,dvolu,acden,dtinv,gpadv(e%pnode),beta,grvel(e%ndime,e%ndime)  
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux1,tmp,aux2,aux4       


      tmp  = acden*dtinv
      aux2= -timom*dvolu*(1.0_rp-beta)*auxoss       
      aux4= aux2*acden !aporte de Newton
      
      do jnode=1,e%pnode
         aux1=acden*gpadv(jnode)         
         do inode=1,e%pnode
         
            elmat(1,inode,1,jnode) = aux2*e%cartd(1,inode)*(aux1 + e%shape(jnode,e%igaus)*tmp) &  
                  + aux4*e%cartd(1,inode)*(e%shape(jnode,e%igaus)*grvel(1,1)) &
                  + elmat(1,inode,1,jnode)                                      
            
            elmat(1,inode,2,jnode) = 0.0_rp &
                  + aux4*e%cartd(1,inode)*(e%shape(jnode,e%igaus)*grvel(1,2)) &
                  + elmat(1,inode,2,jnode)
            
            elmat(2,inode,1,jnode) = 0.0_rp &
                  + aux4*e%cartd(2,inode)*(e%shape(jnode,e%igaus)*grvel(2,1)) &
                  + elmat(2,inode,1,jnode) 
   
            elmat(2,inode,2,jnode) = aux2*e%cartd(2,inode)*(aux1+e%shape(jnode,e%igaus)*tmp) &
                  + aux4*e%cartd(2,inode)*(e%shape(jnode,e%igaus)*grvel(2,2)) &
                  + elmat(2,inode,2,jnode)
               
            elmat(3,inode,1,jnode) = aux2*e%cartd(2,inode)*(aux1+e%shape(jnode,e%igaus)*tmp) &
                  + (aux4*e%shape(jnode,e%igaus))*(e%cartd(2,inode)*grvel(1,1) + e%cartd(1,inode)*grvel(2,1)) &
                  + elmat(3,inode,1,jnode)
               
            elmat(3,inode,2,jnode) = aux2*e%cartd(1,inode)*(aux1+e%shape(jnode,e%igaus)*tmp) &              
                  + (aux4*e%shape(jnode,e%igaus))*(e%cartd(2,inode)*grvel(1,2) + e%cartd(1,inode)*grvel(2,2)) &
                  + elmat(3,inode,2,jnode)                                         

         end do  
      end do

   end subroutine supm_elmbutEst1
   
   subroutine supm_elmbutEst13d(e,beta,acden,timom,dtinv,dvolu,auxtens,gpadv,grvel,auxoss,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxtens,auxoss
      real(rp),    intent(in)    :: timom,dvolu,acden,dtinv,gpadv(e%pnode),beta,grvel(e%ndime,e%ndime)  
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux1,tmp,aux2,aux4       


      tmp  = acden*dtinv
      aux2= -timom*dvolu*(1.0_rp-beta)*auxoss       
      aux4= aux2*acden !aporte de Newton
      
      do jnode=1,e%pnode
         aux1=acden*gpadv(jnode)         
         do inode=1,e%pnode
         
            elmat(1,inode,1,jnode) = aux2*e%cartd(1,inode)*(aux1 + e%shape(jnode,e%igaus)*tmp) &  
                  + aux4*e%cartd(1,inode)*(e%shape(jnode,e%igaus)*grvel(1,1)) &
                  + elmat(1,inode,1,jnode)            
            elmat(1,inode,2,jnode) = 0.0_rp &
                  + aux4*e%cartd(1,inode)*(e%shape(jnode,e%igaus)*grvel(1,2)) &
                  + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = 0.0_rp &
                  + aux4*e%cartd(1,inode)*(e%shape(jnode,e%igaus)*grvel(1,3)) &
                  + elmat(1,inode,3,jnode)                  
                  
            elmat(2,inode,1,jnode) = 0.0_rp &
                  + aux4*e%cartd(2,inode)*(e%shape(jnode,e%igaus)*grvel(2,1)) &
                  + elmat(2,inode,1,jnode)   
            elmat(2,inode,2,jnode) = aux2*e%cartd(2,inode)*(aux1 + e%shape(jnode,e%igaus)*tmp) &
                  + aux4*e%cartd(2,inode)*(e%shape(jnode,e%igaus)*grvel(2,2)) &
                  + elmat(2,inode,2,jnode)                  
            elmat(2,inode,3,jnode) = 0.0_rp &
                  + aux4*e%cartd(2,inode)*(e%shape(jnode,e%igaus)*grvel(2,3)) &
                  + elmat(2,inode,3,jnode)
                  
            elmat(3,inode,1,jnode) = 0.0_rp &
                  + aux4*e%cartd(3,inode)*(e%shape(jnode,e%igaus)*grvel(3,1)) &
                  + elmat(3,inode,1,jnode)   
            elmat(3,inode,2,jnode) = 0.0_rp &
                  + aux4*e%cartd(3,inode)*(e%shape(jnode,e%igaus)*grvel(3,2)) &
                  + elmat(3,inode,2,jnode)                  
            elmat(3,inode,3,jnode) = aux2*e%cartd(3,inode)*(aux1 + e%shape(jnode,e%igaus)*tmp) &
                  + aux4*e%cartd(3,inode)*(e%shape(jnode,e%igaus)*grvel(3,3)) &
                  + elmat(3,inode,3,jnode)

            elmat(4,inode,1,jnode) = 0.0_rp &
                  + (aux4*e%shape(jnode,e%igaus))*(e%cartd(3,inode)*grvel(2,1) + e%cartd(2,inode)*grvel(3,1)) &
                  + elmat(4,inode,1,jnode)               
            elmat(4,inode,2,jnode) = aux2*e%cartd(3,inode)*(aux1 + e%shape(jnode,e%igaus)*tmp) &              
                  + (aux4*e%shape(jnode,e%igaus))*(e%cartd(3,inode)*grvel(2,2) + e%cartd(2,inode)*grvel(3,2)) &
                  + elmat(4,inode,2,jnode)
            elmat(4,inode,3,jnode) = aux2*e%cartd(2,inode)*(aux1 + e%shape(jnode,e%igaus)*tmp) &              
                  + (aux4*e%shape(jnode,e%igaus))*(e%cartd(3,inode)*grvel(2,3) + e%cartd(2,inode)*grvel(3,3)) &
                  + elmat(4,inode,3,jnode)
                  
            elmat(5,inode,1,jnode) = aux2*e%cartd(3,inode)*(aux1 + e%shape(jnode,e%igaus)*tmp) &
                  + (aux4*e%shape(jnode,e%igaus))*(e%cartd(3,inode)*grvel(1,1) + e%cartd(1,inode)*grvel(3,1)) &
                  + elmat(5,inode,1,jnode)               
            elmat(5,inode,2,jnode) = 0.0_rp &              
                  + (aux4*e%shape(jnode,e%igaus))*(e%cartd(3,inode)*grvel(1,2) + e%cartd(1,inode)*grvel(3,2)) &
                  + elmat(5,inode,2,jnode)
            elmat(5,inode,3,jnode) = aux2*e%cartd(1,inode)*(aux1 + e%shape(jnode,e%igaus)*tmp) &              
                  + (aux4*e%shape(jnode,e%igaus))*(e%cartd(3,inode)*grvel(1,3) + e%cartd(1,inode)*grvel(3,3)) &
                  + elmat(5,inode,3,jnode)                   
               
            elmat(6,inode,1,jnode) = aux2*e%cartd(2,inode)*(aux1 + e%shape(jnode,e%igaus)*tmp) &
                  + (aux4*e%shape(jnode,e%igaus))*(e%cartd(2,inode)*grvel(1,1) + e%cartd(1,inode)*grvel(2,1)) &
                  + elmat(6,inode,1,jnode)               
            elmat(6,inode,2,jnode) = aux2*e%cartd(1,inode)*(aux1 + e%shape(jnode,e%igaus)*tmp) &              
                  + (aux4*e%shape(jnode,e%igaus))*(e%cartd(2,inode)*grvel(1,2) + e%cartd(1,inode)*grvel(2,2)) &
                  + elmat(6,inode,2,jnode)
            elmat(6,inode,3,jnode) = 0.0_rp &              
                  + (aux4*e%shape(jnode,e%igaus))*(e%cartd(2,inode)*grvel(1,3) + e%cartd(1,inode)*grvel(2,3)) &
                  + elmat(6,inode,3,jnode)                  

         end do  
      end do

   end subroutine supm_elmbutEst13d   
   
   subroutine supm_elmbutEst1Lapla(e,beta,acvis,timom,dvolu,auxtens,auxoss,elmat) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxtens,auxoss
      real(rp),    intent(in)    :: dvolu,acvis,timom,beta
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux4,auxvis       
      

      aux4 = timom*dvolu*(1.0_rp-beta)*auxoss
      
      do jnode=1,e%pnode      
         auxvis= (1.0_rp)*(beta*acvis)*(e%hessi(1,jnode) + e%hessi(2,jnode))
         do inode=1,e%pnode 
                                                   
               elmat(1,inode,1,jnode) = aux4*e%cartd(1,inode)*(auxvis) + elmat(1,inode,1,jnode)            
               elmat(1,inode,2,jnode) = 0.0_rp + elmat(1,inode,2,jnode)
               
               elmat(2,inode,1,jnode) = 0.0_rp + elmat(2,inode,1,jnode)            
               elmat(2,inode,2,jnode) = aux4*e%cartd(2,inode)*(auxvis) + elmat(2,inode,2,jnode)  
                     
               elmat(3,inode,1,jnode) = aux4*e%cartd(2,inode)*(auxvis) + elmat(3,inode,1,jnode)                  
               elmat(3,inode,2,jnode) = aux4*e%cartd(1,inode)*(auxvis) + elmat(3,inode,2,jnode)                                        

         end do  
      end do     
      
   end subroutine supm_elmbutEst1Lapla
   
   subroutine supm_elmbutEst1Laplad(e,beta,acvis,timom,dvolu,auxtens,auxoss,elmat) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxtens,auxoss
      real(rp),    intent(in)    :: dvolu,acvis,timom,beta
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux4,auxvis       
      

      aux4 = timom*dvolu*(1.0_rp-beta)*auxoss
      
      do jnode=1,e%pnode      
         auxvis= (1.0_rp)*(beta*acvis)*(e%hessi(1,jnode) + e%hessi(2,jnode) + e%hessi(3,jnode))
         do inode=1,e%pnode 
                                                   
               elmat(1,inode,1,jnode) = aux4*e%cartd(1,inode)*(auxvis) + elmat(1,inode,1,jnode)            
               elmat(1,inode,2,jnode) = 0.0_rp + elmat(1,inode,2,jnode)
               elmat(1,inode,3,jnode) = 0.0_rp + elmat(1,inode,3,jnode)            
               
               elmat(2,inode,1,jnode) = 0.0_rp + elmat(2,inode,1,jnode)            
               elmat(2,inode,2,jnode) = aux4*e%cartd(2,inode)*(auxvis) + elmat(2,inode,2,jnode)
               elmat(2,inode,3,jnode) = 0.0_rp + elmat(2,inode,3,jnode)
               
               elmat(3,inode,1,jnode) = 0.0_rp + elmat(3,inode,1,jnode)            
               elmat(3,inode,2,jnode) = 0.0_rp + elmat(3,inode,2,jnode)
               elmat(3,inode,3,jnode) = aux4*e%cartd(3,inode)*(auxvis) + elmat(3,inode,3,jnode)             

               elmat(4,inode,1,jnode) = 0.0_rp + elmat(4,inode,1,jnode)                  
               elmat(4,inode,2,jnode) = aux4*e%cartd(3,inode)*(auxvis) + elmat(4,inode,2,jnode)                                        
               elmat(4,inode,3,jnode) = aux4*e%cartd(2,inode)*(auxvis) + elmat(4,inode,3,jnode)
               
               elmat(5,inode,1,jnode) = aux4*e%cartd(3,inode)*(auxvis) + elmat(5,inode,1,jnode)                  
               elmat(5,inode,2,jnode) = 0.0_rp + elmat(5,inode,2,jnode)                                        
               elmat(5,inode,3,jnode) = aux4*e%cartd(1,inode)*(auxvis) + elmat(5,inode,3,jnode)             
               
               elmat(6,inode,1,jnode) = aux4*e%cartd(2,inode)*(auxvis) + elmat(6,inode,1,jnode)                  
               elmat(6,inode,2,jnode) = aux4*e%cartd(1,inode)*(auxvis) + elmat(6,inode,2,jnode)                                        
               elmat(6,inode,3,jnode) = 0.0_rp + elmat(6,inode,3,jnode)  
            
         end do  
      end do     
      
   end subroutine supm_elmbutEst1Laplad    
   
   subroutine supm_elmbptEst1(e,timom,dvolu,auxtens,beta,auxoss,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the third lhs term for ASGS in constitutive equation
    !    -tau1*(gra(p),div(t))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxoss
      real(rp),    intent(in)    :: timom,dvolu,beta
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,1,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux

      aux= -timom*dvolu*(1.0_rp-beta)*auxoss    
      do jnode=1,e%pnode  
         do inode=1,e%pnode    

            elmat(1,inode,1,jnode) = e%cartd(1,inode)*aux*e%cartd(1,jnode) + elmat(1,inode,1,jnode)
            elmat(2,inode,1,jnode) = e%cartd(2,inode)*aux*e%cartd(2,jnode) + elmat(2,inode,1,jnode)
            elmat(3,inode,1,jnode) = (e%cartd(2,inode)*e%cartd(1,jnode) + e%cartd(1,inode)*e%cartd(2,jnode))*aux &
               + elmat(3,inode,1,jnode)

      end do  
   end do

   end subroutine supm_elmbptEst1 
   
   subroutine supm_elmbptEst13d(e,timom,dvolu,auxtens,beta,auxoss,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the third lhs term for ASGS in constitutive equation
    !    -tau1*(gra(p),div(t))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxoss
      real(rp),    intent(in)    :: timom,dvolu,beta
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,1,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux

      aux= -timom*dvolu*(1.0_rp-beta)*auxoss    
      do jnode=1,e%pnode  
         do inode=1,e%pnode    

            elmat(1,inode,1,jnode) = e%cartd(1,inode)*aux*e%cartd(1,jnode) + elmat(1,inode,1,jnode)
            elmat(2,inode,1,jnode) = e%cartd(2,inode)*aux*e%cartd(2,jnode) + elmat(2,inode,1,jnode)
            elmat(3,inode,1,jnode) = e%cartd(3,inode)*aux*e%cartd(3,jnode) + elmat(3,inode,1,jnode)
            elmat(4,inode,1,jnode) = (e%cartd(3,inode)*e%cartd(2,jnode) + e%cartd(2,inode)*e%cartd(3,jnode))*aux &
               + elmat(4,inode,1,jnode)
            elmat(5,inode,1,jnode) = (e%cartd(3,inode)*e%cartd(1,jnode) + e%cartd(1,inode)*e%cartd(3,jnode))*aux &
               + elmat(5,inode,1,jnode)              
            elmat(6,inode,1,jnode) = (e%cartd(2,inode)*e%cartd(1,jnode) + e%cartd(1,inode)*e%cartd(2,jnode))*aux &
               + elmat(6,inode,1,jnode)

      end do  
   end do

   end subroutine supm_elmbptEst13d    
   
   subroutine supm_elmrhcEst1(e,beta,acden,timom,dvolu,elext,auxtens,gpvel,grvel,auxoss,elrhs)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxoss
      real(rp),    intent(in)    :: elext(e%ndime),gpvel(e%ndime),grvel(e%ndime,e%ndime)
      real(rp),    intent(in)    :: dvolu,timom,beta,acden
      real(rp),    intent(inout) :: elrhs(auxtens,e%mnode)
      integer(ip)                :: inode,aux2
      real(rp)                   :: aux,aux3


      aux  = -timom*dvolu*(1.0_rp-beta)*auxoss
      aux3 = aux*acden
      do inode=1,e%pnode               
      
         elrhs(1,inode) = e%cartd(1,inode)*elext(1)*aux &
               + aux3*e%cartd(1,inode)*(gpvel(1)*grvel(1,1) + gpvel(2)*grvel(1,2)) &
               + elrhs(1,inode) 
         elrhs(2,inode) = e%cartd(2,inode)*elext(2)*aux &
               + aux3*e%cartd(2,inode)*(gpvel(1)*grvel(2,1) + gpvel(2)*grvel(2,2)) &
               + elrhs(2,inode)
         elrhs(3,inode) = (e%cartd(1,inode)*elext(2) + e%cartd(2,inode)*elext(1))*aux & 
               + aux3*e%cartd(2,inode)*(gpvel(1)*grvel(1,1) + gpvel(2)*grvel(1,2)) &
               + aux3*e%cartd(1,inode)*(gpvel(1)*grvel(2,1) + gpvel(2)*grvel(2,2)) &
               + elrhs(3,inode)
  
      end do

   end subroutine supm_elmrhcEst1
   
   subroutine supm_elmrhcEst13d(e,beta,acden,timom,dvolu,elext,auxtens,gpvel,grvel,auxoss,elrhs)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxoss
      real(rp),    intent(in)    :: elext(e%ndime),gpvel(e%ndime),grvel(e%ndime,e%ndime)
      real(rp),    intent(in)    :: dvolu,timom,beta,acden
      real(rp),    intent(inout) :: elrhs(auxtens,e%mnode)
      integer(ip)                :: inode,aux2
      real(rp)                   :: aux,aux3
      real(rp)                   :: f1,f2,f3


      aux  = -timom*dvolu*(1.0_rp-beta)*auxoss
      aux3 = aux*acden
      
      f1 = (gpvel(1)*grvel(1,1) + gpvel(2)*grvel(1,2) + gpvel(3)*grvel(1,3))
      f2 = (gpvel(1)*grvel(2,1) + gpvel(2)*grvel(2,2) + gpvel(3)*grvel(2,3))
      f3 = (gpvel(1)*grvel(3,1) + gpvel(2)*grvel(3,2) + gpvel(3)*grvel(3,3))
      
      do inode=1,e%pnode               
      
         elrhs(1,inode) = e%cartd(1,inode)*elext(1)*aux &
               + aux3*e%cartd(1,inode)*f1 &
               + elrhs(1,inode) 
               
         elrhs(2,inode) = e%cartd(2,inode)*elext(2)*aux &
               + aux3*e%cartd(2,inode)*f2 &
               + elrhs(2,inode)
              
         elrhs(3,inode) = e%cartd(3,inode)*elext(3)*aux &
               + aux3*e%cartd(3,inode)*f3 &
               + elrhs(3,inode)              

         elrhs(4,inode) = (e%cartd(3,inode)*elext(2) + e%cartd(2,inode)*elext(3))*aux & 
               + aux3*e%cartd(3,inode)*f2 + aux3*e%cartd(2,inode)*f3 &
               + elrhs(4,inode)  
               
         elrhs(5,inode) = (e%cartd(3,inode)*elext(1) + e%cartd(1,inode)*elext(3))*aux & 
               + aux3*e%cartd(3,inode)*f1 + aux3*e%cartd(1,inode)*f3 &
               + elrhs(5,inode)                
               
         elrhs(6,inode) = (e%cartd(1,inode)*elext(2) + e%cartd(2,inode)*elext(1))*aux & 
               + aux3*e%cartd(1,inode)*f2 + aux3*e%cartd(2,inode)*f1 &
               + elrhs(6,inode)
  
      end do

   end subroutine supm_elmrhcEst13d   
   
   subroutine supm_elmbsvEst1(e,timom,dvolu,acden,gpadv,auxtens,auxoss,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in momentum equation
    !    (gra_sym(v),S) -tau3(gra_sym(v),1/2mu*S) -tau1(rho*a*grad(v),div(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxoss
      real(rp),    intent(in)    :: timom,dvolu,acden,gpadv(e%pnode) 
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux1

      do inode=1,e%pnode
         aux1 = -acden*gpadv(inode)*timom*dvolu*auxoss        
         do jnode=1,e%pnode
         
            elmat(1,inode,1,jnode) = e%cartd(1,jnode)*aux1 + elmat(1,inode,1,jnode)                                      
            elmat(1,inode,2,jnode) = 0.0_rp + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = e%cartd(2,jnode)*aux1 + elmat(1,inode,3,jnode)
               
            elmat(2,inode,1,jnode) = 0.0_rp + elmat(2,inode,1,jnode)
            elmat(2,inode,2,jnode) = e%cartd(2,jnode)*aux1 + elmat(2,inode,2,jnode)
            elmat(2,inode,3,jnode) = e%cartd(1,jnode)*aux1 + elmat(2,inode,3,jnode)                                    
      
         end do  
      end do
 
   end subroutine supm_elmbsvEst1
   
   subroutine supm_elmbsvEst13d(e,timom,dvolu,acden,gpadv,auxtens,auxoss,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in momentum equation
    !    (gra_sym(v),S) -tau3(gra_sym(v),1/2mu*S) -tau1(rho*a*grad(v),div(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxoss
      real(rp),    intent(in)    :: timom,dvolu,acden,gpadv(e%pnode) 
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux1

      do inode=1,e%pnode
         aux1 = -acden*gpadv(inode)*timom*dvolu*auxoss        
         do jnode=1,e%pnode
         
            elmat(1,inode,1,jnode) = e%cartd(1,jnode)*aux1 + elmat(1,inode,1,jnode)                                      
            elmat(1,inode,2,jnode) = 0.0_rp + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = 0.0_rp + elmat(1,inode,3,jnode)
            elmat(1,inode,4,jnode) = 0.0_rp + elmat(1,inode,4,jnode)         
            elmat(1,inode,5,jnode) = e%cartd(3,jnode)*aux1 + elmat(1,inode,5,jnode)         
            elmat(1,inode,6,jnode) = e%cartd(2,jnode)*aux1 + elmat(1,inode,6,jnode)
            
            elmat(2,inode,1,jnode) = 0.0_rp + elmat(2,inode,1,jnode)                                      
            elmat(2,inode,2,jnode) = e%cartd(2,jnode)*aux1 + elmat(2,inode,2,jnode)
            elmat(2,inode,3,jnode) = 0.0_rp + elmat(2,inode,3,jnode)
            elmat(2,inode,4,jnode) = e%cartd(3,jnode)*aux1 + elmat(2,inode,4,jnode)         
            elmat(2,inode,5,jnode) = 0.0_rp + elmat(2,inode,5,jnode)         
            elmat(2,inode,6,jnode) = e%cartd(1,jnode)*aux1 + elmat(2,inode,6,jnode)         
               
            elmat(3,inode,1,jnode) = 0.0_rp + elmat(3,inode,1,jnode)                                      
            elmat(3,inode,2,jnode) = 0.0_rp + elmat(3,inode,2,jnode)
            elmat(3,inode,3,jnode) = e%cartd(3,jnode)*aux1 + elmat(3,inode,3,jnode)
            elmat(3,inode,4,jnode) = e%cartd(2,jnode)*aux1 + elmat(3,inode,4,jnode)         
            elmat(3,inode,5,jnode) = e%cartd(1,jnode)*aux1 + elmat(3,inode,5,jnode)         
            elmat(3,inode,6,jnode) = 0.0_rp + elmat(3,inode,6,jnode)                                   
      
         end do  
      end do
 
   end subroutine supm_elmbsvEst13d   
   
   subroutine supm_elmbsvEst1Lapla(e,beta,acvis,timom,dvolu,auxtens,auxoss,elmat)   
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in constitutive equation
    !    (-(1/2eta)*tau + auxVE*a*grad(tau),R_constituitva)
    !   +(auxVE*(2*grad(a)*tau -(auxG/eta)*sigma*tau),R_constituitva)
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxoss
      real(rp),    intent(in)    :: acvis,dvolu,timom,beta    
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux3,auxvis      
   

      aux3 = (-1.0_rp)*(beta*acvis)*timom*dvolu*auxoss
      do inode=1,e%pnode
         auxvis= (e%hessi(1,inode) + e%hessi(2,inode) + e%hessi(3,inode))*aux3
         do jnode=1,e%pnode
         
            elmat(1,inode,1,jnode) = auxvis*e%cartd(1,jnode) + elmat(1,inode,1,jnode)               
            elmat(1,inode,2,jnode) = 0.0_rp + elmat(1,inode,2,jnode)               
            elmat(1,inode,3,jnode) = auxvis*e%cartd(2,jnode) + elmat(1,inode,3,jnode)
            
            elmat(2,inode,1,jnode) = 0.0_rp + elmat(2,inode,1,jnode)         
            elmat(2,inode,2,jnode) = auxvis*e%cartd(2,jnode) + elmat(2,inode,2,jnode)               
            elmat(2,inode,3,jnode) = auxvis*e%cartd(1,jnode) + elmat(2,inode,3,jnode)   

         end do
      end do   

   end subroutine supm_elmbsvEst1Lapla  
   
   subroutine supm_elmbsvEst1Laplad(e,beta,acvis,timom,dvolu,auxtens,auxoss,elmat)   
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in constitutive equation
    !    (-(1/2eta)*tau + auxVE*a*grad(tau),R_constituitva)
    !   +(auxVE*(2*grad(a)*tau -(auxG/eta)*sigma*tau),R_constituitva)
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxoss
      real(rp),    intent(in)    :: acvis,dvolu,timom,beta    
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux3,auxvis      
   

      aux3 = (-1.0_rp)*(beta*acvis)*timom*dvolu*auxoss
      do inode=1,e%pnode
         auxvis= (e%hessi(1,inode) + e%hessi(2,inode))*aux3
         do jnode=1,e%pnode                            
                            
            elmat(1,inode,1,jnode) = e%cartd(1,jnode)*auxvis + elmat(1,inode,1,jnode)                                      
            elmat(1,inode,2,jnode) = 0.0_rp + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = 0.0_rp + elmat(1,inode,3,jnode)
            elmat(1,inode,4,jnode) = 0.0_rp + elmat(1,inode,4,jnode)         
            elmat(1,inode,5,jnode) = e%cartd(3,jnode)*auxvis + elmat(1,inode,5,jnode)         
            elmat(1,inode,6,jnode) = e%cartd(2,jnode)*auxvis + elmat(1,inode,6,jnode)
            
            elmat(2,inode,1,jnode) = 0.0_rp + elmat(2,inode,1,jnode)                                      
            elmat(2,inode,2,jnode) = e%cartd(2,jnode)*auxvis + elmat(2,inode,2,jnode)
            elmat(2,inode,3,jnode) = 0.0_rp + elmat(2,inode,3,jnode)
            elmat(2,inode,4,jnode) = e%cartd(3,jnode)*auxvis + elmat(2,inode,4,jnode)         
            elmat(2,inode,5,jnode) = 0.0_rp + elmat(2,inode,5,jnode)         
            elmat(2,inode,6,jnode) = e%cartd(1,jnode)*auxvis + elmat(2,inode,6,jnode)         
               
            elmat(3,inode,1,jnode) = 0.0_rp + elmat(3,inode,1,jnode)                                      
            elmat(3,inode,2,jnode) = 0.0_rp + elmat(3,inode,2,jnode)
            elmat(3,inode,3,jnode) = e%cartd(3,jnode)*auxvis + elmat(3,inode,3,jnode)
            elmat(3,inode,4,jnode) = e%cartd(2,jnode)*auxvis + elmat(3,inode,4,jnode)         
            elmat(3,inode,5,jnode) = e%cartd(1,jnode)*auxvis + elmat(3,inode,5,jnode)         
            elmat(3,inode,6,jnode) = 0.0_rp + elmat(3,inode,6,jnode)                               

         end do
      end do   

   end subroutine supm_elmbsvEst1Laplad      
   
   subroutine supm_elmbuvEst1(e,dvolu,beta,acden,timom,tidiv,gpadv,grvel,dtinv,auxoss,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in momentum equation
    !    (gra_sym(v),S) -tau3(gra_sym(v),1/2mu*S) -tau1(rho*a*grad(v),div(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxoss
      real(rp),    intent(in)    :: dvolu,acden,gpadv(e%pnode),grvel(e%ndime,e%ndime),dtinv,timom,tidiv,beta
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux,aux1

      aux1 = tidiv*dvolu
      do inode=1,e%pnode       
         aux  = (dvolu*timom)*(acden*gpadv(inode))
         do jnode=1,e%pnode
         
            elmat(1,inode,1,jnode) = aux*acden*(dtinv*e%shape(jnode,e%igaus)*auxoss  &
                  + gpadv(jnode) + e%shape(jnode,e%igaus)*grvel(1,1)) + e%cartd(1,inode)*aux1*e%cartd(1,jnode) &
                  + elmat(1,inode,1,jnode)                                      
            elmat(1,inode,2,jnode) = aux*acden*(e%shape(jnode,e%igaus)*grvel(1,2)) + e%cartd(1,inode)*aux1*e%cartd(2,jnode) &
                  + elmat(1,inode,2,jnode)
               
            elmat(2,inode,1,jnode) = aux*acden*(e%shape(jnode,e%igaus)*grvel(2,1)) + e%cartd(2,inode)*aux1*e%cartd(1,jnode) &
                  + elmat(2,inode,1,jnode)
            elmat(2,inode,2,jnode) = aux*acden*(dtinv*e%shape(jnode,e%igaus)*auxoss  &
                  + gpadv(jnode) + e%shape(jnode,e%igaus)*grvel(2,2)) + e%cartd(2,inode)*aux1*e%cartd(2,jnode)&
                  + elmat(2,inode,2,jnode)                                  
      
         end do  
      end do
 
   end subroutine supm_elmbuvEst1
   
   subroutine supm_elmbuvEst13d(e,dvolu,beta,acden,timom,tidiv,gpadv,grvel,dtinv,auxoss,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in momentum equation
    !    (gra_sym(v),S) -tau3(gra_sym(v),1/2mu*S) -tau1(rho*a*grad(v),div(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxoss
      real(rp),    intent(in)    :: dvolu,acden,gpadv(e%pnode),grvel(e%ndime,e%ndime),dtinv,timom,tidiv,beta
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux,aux1

      aux1 = tidiv*dvolu
      do inode=1,e%pnode       
         aux  = (dvolu*timom)*(acden*gpadv(inode))
         do jnode=1,e%pnode
         
            elmat(1,inode,1,jnode) = aux*acden*(dtinv*e%shape(jnode,e%igaus)*auxoss  &
                  + gpadv(jnode) + e%shape(jnode,e%igaus)*grvel(1,1)) + e%cartd(1,inode)*aux1*e%cartd(1,jnode) &
                  + elmat(1,inode,1,jnode)                                      
            elmat(1,inode,2,jnode) = aux*acden*(e%shape(jnode,e%igaus)*grvel(1,2)) + e%cartd(1,inode)*aux1*e%cartd(2,jnode) &
                  + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = aux*acden*(e%shape(jnode,e%igaus)*grvel(1,3)) + e%cartd(1,inode)*aux1*e%cartd(3,jnode) &
                  + elmat(1,inode,3,jnode)               
               
            elmat(2,inode,1,jnode) = aux*acden*(e%shape(jnode,e%igaus)*grvel(2,1)) + e%cartd(2,inode)*aux1*e%cartd(1,jnode) &
                  + elmat(2,inode,1,jnode)
            elmat(2,inode,2,jnode) = aux*acden*(dtinv*e%shape(jnode,e%igaus)*auxoss  &
                  + gpadv(jnode) + e%shape(jnode,e%igaus)*grvel(2,2)) + e%cartd(2,inode)*aux1*e%cartd(2,jnode)&
                  + elmat(2,inode,2,jnode) 
            elmat(2,inode,3,jnode) = aux*acden*(e%shape(jnode,e%igaus)*grvel(2,3)) + e%cartd(2,inode)*aux1*e%cartd(3,jnode) &
                  + elmat(2,inode,3,jnode) 
                  
            elmat(3,inode,1,jnode) = aux*acden*(e%shape(jnode,e%igaus)*grvel(3,1)) + e%cartd(3,inode)*aux1*e%cartd(1,jnode) &
                  + elmat(3,inode,1,jnode)
            elmat(3,inode,2,jnode) = aux*acden*(e%shape(jnode,e%igaus)*grvel(3,2)) + e%cartd(3,inode)*aux1*e%cartd(2,jnode) &
                  + elmat(3,inode,2,jnode)
            elmat(3,inode,3,jnode) = aux*acden*(dtinv*e%shape(jnode,e%igaus)*auxoss  &
                  + gpadv(jnode) + e%shape(jnode,e%igaus)*grvel(3,3)) + e%cartd(3,inode)*aux1*e%cartd(3,jnode)&
                  + elmat(3,inode,3,jnode)                
               
      
         end do  
      end do
 
   end subroutine supm_elmbuvEst13d   
   
   subroutine supm_elmbuvEst1Lapla(e,beta,acvis,acden,timom,dvolu,auxtens,gpadv,grvel,dtinv,auxoss,elmat)   
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxtens,auxoss
      real(rp),    intent(in)    :: dvolu,gpadv(e%pnode)
      real(rp),    intent(in)    :: acvis,beta,timom,dtinv,acden,grvel(e%ndime,e%ndime)
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux3,aux4,aux5,aux6   
      
      aux3=(beta*acvis)*(timom*dvolu)
      
      do inode=1,e%pnode
         aux5= aux3*(e%hessi(1,inode) + e%hessi(2,inode))*auxoss
         aux6= (acden*timom)*gpadv(inode)*dvolu*auxoss
         do jnode=1,e%pnode         
            aux4 = -(beta*acvis)*(e%hessi(1,jnode) + e%hessi(2,jnode))            
                  
            elmat(1,inode,1,jnode) = aux5*(auxoss*acden*(e%shape(jnode,e%igaus)*dtinv + gpadv(jnode) + (e%shape(jnode,e%igaus)*grvel(1,1))) &
                  + aux4) + aux6*aux4 + elmat(1,inode,1,jnode)               
            elmat(1,inode,2,jnode) = aux5*acden*(e%shape(jnode,e%igaus)*grvel(1,2))*auxoss + elmat(1,inode,2,jnode)
            
            elmat(2,inode,1,jnode) = aux5*acden*(e%shape(jnode,e%igaus)*grvel(2,1))*auxoss + elmat(2,inode,1,jnode)         
            elmat(2,inode,2,jnode) = aux5*(auxoss*acden*(e%shape(jnode,e%igaus)*dtinv + gpadv(jnode) + (e%shape(jnode,e%igaus)*grvel(2,2))) &
                  + aux4) + aux6*aux4 + elmat(2,inode,2,jnode)                                                         

         end do  
      end do


   end subroutine supm_elmbuvEst1Lapla
   
   subroutine supm_elmbuvEst1Laplad(e,beta,acvis,acden,timom,dvolu,auxtens,gpadv,grvel,dtinv,auxoss,elmat)   
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxtens,auxoss
      real(rp),    intent(in)    :: dvolu,gpadv(e%pnode)
      real(rp),    intent(in)    :: acvis,beta,timom,dtinv,acden,grvel(e%ndime,e%ndime)
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux3,aux4,aux5,aux6   
      
      aux3=(beta*acvis)*(timom*dvolu)
      
      do inode=1,e%pnode
         aux5= aux3*(e%hessi(1,inode) + e%hessi(2,inode) + e%hessi(3,inode))*auxoss
         aux6= (acden*timom)*gpadv(inode)*dvolu*auxoss
         do jnode=1,e%pnode         
            aux4 = -(beta*acvis)*(e%hessi(1,jnode) + e%hessi(2,jnode) + e%hessi(3,jnode))            
                  
            elmat(1,inode,1,jnode) = aux5*(auxoss*acden*(e%shape(jnode,e%igaus)*dtinv + gpadv(jnode) + (e%shape(jnode,e%igaus)*grvel(1,1))) &
                  + aux4) + aux6*aux4 + elmat(1,inode,1,jnode)               
            elmat(1,inode,2,jnode) = aux5*acden*(e%shape(jnode,e%igaus)*grvel(1,2))*auxoss + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = aux5*acden*(e%shape(jnode,e%igaus)*grvel(1,3))*auxoss + elmat(1,inode,3,jnode)
            
            
            elmat(2,inode,1,jnode) = aux5*acden*(e%shape(jnode,e%igaus)*grvel(2,1))*auxoss + elmat(2,inode,1,jnode)         
            elmat(2,inode,2,jnode) = aux5*(auxoss*acden*(e%shape(jnode,e%igaus)*dtinv + gpadv(jnode) + (e%shape(jnode,e%igaus)*grvel(2,2))) &
                  + aux4) + aux6*aux4 + elmat(2,inode,2,jnode)
            elmat(2,inode,3,jnode) = aux5*acden*(e%shape(jnode,e%igaus)*grvel(2,3))*auxoss + elmat(2,inode,3,jnode)  
            
            elmat(3,inode,1,jnode) = aux5*acden*(e%shape(jnode,e%igaus)*grvel(3,1))*auxoss + elmat(3,inode,1,jnode)            
            elmat(3,inode,2,jnode) = aux5*acden*(e%shape(jnode,e%igaus)*grvel(3,2))*auxoss + elmat(3,inode,2,jnode)         
            elmat(3,inode,3,jnode) = aux5*(auxoss*acden*(e%shape(jnode,e%igaus)*dtinv + gpadv(jnode) + (e%shape(jnode,e%igaus)*grvel(3,3))) &
                  + aux4) + aux6*aux4 + elmat(3,inode,3,jnode)
         
         end do  
      end do

   end subroutine supm_elmbuvEst1Laplad     
   
   subroutine supm_elmbpvEst1(e,acden,timom,gpadv,dvolu,auxoss,elmat) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxoss
      real(rp),    intent(in)    :: dvolu,timom,acden,gpadv(e%pnode)
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,1,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux1 
      

   
      do inode=1,e%pnode      
         aux1 = (timom*dvolu)*(acden*gpadv(inode))*auxoss       
         do jnode=1,e%pnode                 
                 
            elmat(1,inode,1,jnode) = aux1*e%cartd(1,jnode) + elmat(1,inode,1,jnode)        
            elmat(2,inode,1,jnode) = aux1*e%cartd(2,jnode) + elmat(2,inode,1,jnode)               

         end do
      end do

   end subroutine supm_elmbpvEst1
   
   subroutine supm_elmbpvEst13d(e,acden,timom,gpadv,dvolu,auxoss,elmat) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxoss
      real(rp),    intent(in)    :: dvolu,timom,acden,gpadv(e%pnode)
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,1,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux1 
      

   
      do inode=1,e%pnode      
         aux1 = (timom*dvolu)*(acden*gpadv(inode))*auxoss       
         do jnode=1,e%pnode                 
                 
            elmat(1,inode,1,jnode) = aux1*e%cartd(1,jnode) + elmat(1,inode,1,jnode)        
            elmat(2,inode,1,jnode) = aux1*e%cartd(2,jnode) + elmat(2,inode,1,jnode)
            elmat(3,inode,1,jnode) = aux1*e%cartd(3,jnode) + elmat(3,inode,1,jnode)               

         end do
      end do

   end subroutine supm_elmbpvEst13d   
   
   subroutine supm_elmbpvEst1Lapla(e,beta,acvis,timom,dvolu,auxoss,elmat) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxoss
      real(rp),    intent(in)    :: dvolu,timom,acvis,beta
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,1,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux1,aux2 
      

      aux1= (beta*acvis)*(dvolu*timom)*auxoss
      
      do inode=1,e%pnode      
         aux2= aux1*(e%hessi(1,inode) + e%hessi(2,inode))      
         do jnode=1,e%pnode                 
                 
            elmat(1,inode,1,jnode) = aux2*e%cartd(1,jnode) + elmat(1,inode,1,jnode)      
            elmat(2,inode,1,jnode) = aux2*e%cartd(2,jnode) + elmat(2,inode,1,jnode)               

         end do
      end do

   end subroutine supm_elmbpvEst1Lapla
   
   subroutine supm_elmbpvEst1Laplad(e,beta,acvis,timom,dvolu,auxoss,elmat) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxoss
      real(rp),    intent(in)    :: dvolu,timom,acvis,beta
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,1,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux1,aux2 
      

      aux1= (beta*acvis)*(dvolu*timom)*auxoss
      
      do inode=1,e%pnode      
         aux2= aux1*(e%hessi(1,inode) + e%hessi(2,inode) + e%hessi(3,inode))      
         do jnode=1,e%pnode                 
                 
            elmat(1,inode,1,jnode) = aux2*e%cartd(1,jnode) + elmat(1,inode,1,jnode)      
            elmat(2,inode,1,jnode) = aux2*e%cartd(2,jnode) + elmat(2,inode,1,jnode)               
            elmat(3,inode,1,jnode) = aux2*e%cartd(3,jnode) + elmat(3,inode,1,jnode) 
         
         end do
      end do

   end subroutine supm_elmbpvEst1Laplad    
   
   subroutine supm_elmrhuEst1(e,timom,tidiv,acden,auxtens,dvolu,elextC,elext,gpvel,grvel,gpadv,auxoss,elrhs)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxoss
      real(rp),    intent(in)    :: elextC(1),elext(e%ndime),gpadv(e%pnode),acden
      real(rp),    intent(in)    :: dvolu,tidiv,timom,gpvel(e%ndime),grvel(e%ndime,e%ndime)
      real(rp),    intent(inout) :: elrhs(e%ndime,e%mnode)
      integer(ip)                :: inode,aux3
      real(rp)                   :: aux,aux1,aux2

      aux = tidiv*dvolu 
      do inode=1,e%pnode
      
         aux2= (timom*acden*gpadv(inode))*dvolu 

         elrhs(1,inode) = e%cartd(1,inode)*elextC(1)*aux &
               + aux2*(elext(1)*auxoss + acden*(gpvel(1)*grvel(1,1) + gpvel(2)*grvel(1,2))) &
               + elrhs(1,inode) 
         elrhs(2,inode) = e%cartd(2,inode)*elextC(1)*aux &
               + aux2*(elext(2)*auxoss + acden*(gpvel(1)*grvel(2,1) + gpvel(2)*grvel(2,2))) &               
               + elrhs(2,inode)
  
      end do

   end subroutine supm_elmrhuEst1
   
   subroutine supm_elmrhuEst13d(e,timom,tidiv,acden,auxtens,dvolu,elextC,elext,gpvel,grvel,gpadv,auxoss,elrhs)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxoss
      real(rp),    intent(in)    :: elextC(1),elext(e%ndime),gpadv(e%pnode),acden
      real(rp),    intent(in)    :: dvolu,tidiv,timom,gpvel(e%ndime),grvel(e%ndime,e%ndime)
      real(rp),    intent(inout) :: elrhs(e%ndime,e%mnode)
      integer(ip)                :: inode,aux3
      real(rp)                   :: aux,aux1,aux2

      aux = tidiv*dvolu*auxoss 
      do inode=1,e%pnode
      
         aux2= (timom*acden*gpadv(inode))*dvolu 

         elrhs(1,inode) = e%cartd(1,inode)*elextC(1)*aux &
               + aux2*(elext(1)*auxoss + acden*(gpvel(1)*grvel(1,1) + gpvel(2)*grvel(1,2) + gpvel(3)*grvel(1,3))) &
               + elrhs(1,inode) 
         elrhs(2,inode) = e%cartd(2,inode)*elextC(1)*aux &
               + aux2*(elext(2)*auxoss + acden*(gpvel(1)*grvel(2,1) + gpvel(2)*grvel(2,2) + gpvel(3)*grvel(2,3))) &               
               + elrhs(2,inode)
         elrhs(3,inode) = e%cartd(3,inode)*elextC(1)*aux &
               + aux2*(elext(3)*auxoss + acden*(gpvel(1)*grvel(3,1) + gpvel(2)*grvel(3,2) + gpvel(3)*grvel(3,3))) &               
               + elrhs(3,inode)
  
      end do

   end subroutine supm_elmrhuEst13d   
   
   subroutine supm_elmrhuEst1Lapla(e,beta,timom,acden,acvis,dvolu,elext,grvel,gpvel,auxoss,elrhs)   
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    tau1*(beta*acvis)*lapla(v)*(a.grad(a))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxoss
      real(rp),    intent(in)    :: dvolu,acvis,beta,timom,acden,gpvel(e%ndime),grvel(e%ndime,e%ndime),elext(e%ndime)
      real(rp),    intent(inout) :: elrhs(e%ndime,e%mnode)
      integer(ip)                :: inode
      real(rp)                   :: aux3,auxvis
                
      aux3=(beta*acvis)*(timom*dvolu)*auxoss
      do inode=1,e%pnode
      
         auxvis=aux3*(e%hessi(1,inode) + e%hessi(2,inode))
         
         elrhs(1,inode) = auxvis*(elext(1) + acden*(gpvel(1)*grvel(1,1) + gpvel(2)*grvel(1,2))) &
               + elrhs(1,inode)               
         elrhs(2,inode) = auxvis*(elext(2) + acden*(gpvel(1)*grvel(2,1) + gpvel(2)*grvel(2,2)))&
               + elrhs(2,inode)
  
      end do

   end subroutine supm_elmrhuEst1Lapla     

   subroutine supm_elmrhuEst1Laplad(e,beta,timom,acden,acvis,dvolu,elext,grvel,gpvel,auxoss,elrhs)   
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    tau1*(beta*acvis)*lapla(v)*(a.grad(a))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxoss
      real(rp),    intent(in)    :: dvolu,acvis,beta,timom,acden,gpvel(e%ndime),grvel(e%ndime,e%ndime),elext(e%ndime)
      real(rp),    intent(inout) :: elrhs(e%ndime,e%mnode)
      integer(ip)                :: inode
      real(rp)                   :: aux3,auxvis
                
      aux3=(beta*acvis)*(timom*dvolu)*auxoss
      do inode=1,e%pnode
      
         auxvis=aux3*(e%hessi(1,inode) + e%hessi(2,inode) + e%hessi(3,inode))
         
         elrhs(1,inode) = auxvis*(elext(1) + acden*(gpvel(1)*grvel(1,1) + gpvel(2)*grvel(1,2) + gpvel(3)*grvel(1,3))) &
               + elrhs(1,inode)               
         elrhs(2,inode) = auxvis*(elext(2) + acden*(gpvel(1)*grvel(2,1) + gpvel(2)*grvel(2,2) + gpvel(3)*grvel(2,3)))&
               + elrhs(2,inode)
         elrhs(3,inode) = auxvis*(elext(3) + acden*(gpvel(1)*grvel(3,1) + gpvel(2)*grvel(3,2) + gpvel(3)*grvel(3,3)))&
               + elrhs(3,inode)
               
      end do

   end subroutine supm_elmrhuEst1Laplad    
   
   subroutine supm_elmbsqEst1(e,timom,dvolu,auxtens,auxoss,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the lhs term for ASGS in momentum equation
    !    tau1*(gra(q),div(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxoss
      real(rp),    intent(in)    :: timom,dvolu
      real(rp),    intent(inout) :: elmat(1,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux


      aux=-timom*dvolu*auxoss    
      do jnode=1,e%pnode      
         do inode=1,e%pnode   

            elmat(1,inode,1,jnode) = e%cartd(1,inode)*(aux)*e%cartd(1,jnode) + elmat(1,inode,1,jnode)
            elmat(1,inode,2,jnode) = e%cartd(2,inode)*(aux)*e%cartd(2,jnode) + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = (e%cartd(1,inode)*e%cartd(2,jnode) + e%cartd(2,inode)*e%cartd(1,jnode))*aux &
                  + elmat(1,inode,3,jnode)                      

         end do  
      end do

   end subroutine supm_elmbsqEst1
   
   subroutine supm_elmbsqEst13d(e,timom,dvolu,auxtens,auxoss,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the lhs term for ASGS in momentum equation
    !    tau1*(gra(q),div(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxoss
      real(rp),    intent(in)    :: timom,dvolu
      real(rp),    intent(inout) :: elmat(1,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux


      aux=-timom*dvolu*auxoss    
      do jnode=1,e%pnode      
         do inode=1,e%pnode   

            elmat(1,inode,1,jnode) = e%cartd(1,inode)*(aux)*e%cartd(1,jnode) + elmat(1,inode,1,jnode)
            elmat(1,inode,2,jnode) = e%cartd(2,inode)*(aux)*e%cartd(2,jnode) + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = e%cartd(3,inode)*(aux)*e%cartd(3,jnode) + elmat(1,inode,3,jnode)
            elmat(1,inode,4,jnode) = (e%cartd(2,inode)*e%cartd(3,jnode) + e%cartd(3,inode)*e%cartd(2,jnode))*aux &
                  + elmat(1,inode,4,jnode) 
            elmat(1,inode,5,jnode) = (e%cartd(1,inode)*e%cartd(3,jnode) + e%cartd(3,inode)*e%cartd(1,jnode))*aux &
                  + elmat(1,inode,5,jnode)                  
            elmat(1,inode,6,jnode) = (e%cartd(1,inode)*e%cartd(2,jnode) + e%cartd(2,inode)*e%cartd(1,jnode))*aux &
                  + elmat(1,inode,6,jnode)                      

         end do  
      end do

   end subroutine supm_elmbsqEst13d    
   
   subroutine supm_elmbuqEst1(e,timom,dvolu,acden,dtinv,grvel,gpadv,auxoss,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxoss
      real(rp),    intent(in)    :: dvolu,timom,acden,grvel(e%ndime,e%ndime),gpadv(e%pnode),dtinv
      real(rp),    intent(inout) :: elmat(1,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux2 
      
      aux2 = (timom*dvolu)*auxoss      
      do inode=1,e%pnode
         do jnode=1,e%pnode                 
                 
            elmat(1,inode,1,jnode) = (aux2*acden)*(e%cartd(1,inode)*(e%shape(jnode,e%igaus)*dtinv + gpadv(jnode) &
                  + (e%shape(jnode,e%igaus))*(grvel(1,1))) + (e%cartd(2,inode))*(e%shape(jnode,e%igaus)*grvel(2,1))) &
                  + elmat(1,inode,1,jnode)                
            
            elmat(1,inode,2,jnode) = (aux2*acden)*(e%cartd(2,inode)*(e%shape(jnode,e%igaus)*dtinv + gpadv(jnode) &
                  + (e%shape(jnode,e%igaus))*(grvel(2,2))) + (e%cartd(1,inode))*(e%shape(jnode,e%igaus)*grvel(1,2))) &       
                  + elmat(1,inode,2,jnode)

         end do
      end do

   end subroutine supm_elmbuqEst1
   
   subroutine supm_elmbuqEst13d(e,timom,dvolu,acden,dtinv,grvel,gpadv,auxoss,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxoss
      real(rp),    intent(in)    :: dvolu,timom,acden,grvel(e%ndime,e%ndime),gpadv(e%pnode),dtinv
      real(rp),    intent(inout) :: elmat(1,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux2 
      
      aux2 = (timom*dvolu)*auxoss      
      do inode=1,e%pnode
         do jnode=1,e%pnode                 
                 
            elmat(1,inode,1,jnode) = (aux2*acden)*(e%cartd(1,inode)*(e%shape(jnode,e%igaus)*dtinv + gpadv(jnode) &
                  + (e%shape(jnode,e%igaus))*(grvel(1,1))) + (e%cartd(2,inode))*(e%shape(jnode,e%igaus)*grvel(2,1)) &
                  + (e%cartd(3,inode))*(e%shape(jnode,e%igaus)*grvel(3,1))) &
                  + elmat(1,inode,1,jnode)                
            
            elmat(1,inode,2,jnode) = (aux2*acden)*(e%cartd(2,inode)*(e%shape(jnode,e%igaus)*dtinv + gpadv(jnode) &
                  + (e%shape(jnode,e%igaus))*(grvel(2,2))) + (e%cartd(1,inode))*(e%shape(jnode,e%igaus)*grvel(1,2)) &
                  + (e%cartd(3,inode))*(e%shape(jnode,e%igaus)*grvel(3,2))) &       
                  + elmat(1,inode,2,jnode)

            elmat(1,inode,3,jnode) = (aux2*acden)*(e%cartd(3,inode)*(e%shape(jnode,e%igaus)*dtinv + gpadv(jnode) &
                  + (e%shape(jnode,e%igaus))*(grvel(3,3))) + (e%cartd(1,inode))*(e%shape(jnode,e%igaus)*grvel(1,3)) &
                  + (e%cartd(2,inode))*(e%shape(jnode,e%igaus)*grvel(2,3))) &       
                  + elmat(1,inode,3,jnode)               

         end do
      end do

   end subroutine supm_elmbuqEst13d   
   
   subroutine supm_elmbuqEst1Lapla(e,beta,acvis,timom,dvolu,auxoss,elmat) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxoss
      real(rp),    intent(in)    :: dvolu,timom,acvis,beta
      real(rp),    intent(inout) :: elmat(1,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux1,aux2 
      
      aux1= -(beta*acvis)*(dvolu*timom)*auxoss      
      do jnode=1,e%pnode      
         aux2= aux1*(e%hessi(1,jnode) + e%hessi(2,jnode))      
         do inode=1,e%pnode                 
                 
            elmat(1,inode,1,jnode) = aux2*e%cartd(1,inode) + elmat(1,inode,1,jnode)     
            elmat(1,inode,2,jnode) = aux2*e%cartd(2,inode) + elmat(1,inode,2,jnode)

         end do
      end do

   end subroutine supm_elmbuqEst1Lapla 
   
   subroutine supm_elmbuqEst1Laplad(e,beta,acvis,timom,dvolu,auxoss,elmat) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxoss
      real(rp),    intent(in)    :: dvolu,timom,acvis,beta
      real(rp),    intent(inout) :: elmat(1,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux1,aux2 
      
      aux1= -(beta*acvis)*(dvolu*timom)*auxoss      
      do jnode=1,e%pnode      
         aux2= aux1*(e%hessi(1,jnode) + e%hessi(2,jnode) + e%hessi(3,jnode))      
         do inode=1,e%pnode                 
                 
            elmat(1,inode,1,jnode) = aux2*e%cartd(1,inode) + elmat(1,inode,1,jnode)     
            elmat(1,inode,2,jnode) = aux2*e%cartd(2,inode) + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = aux2*e%cartd(3,inode) + elmat(1,inode,3,jnode)
         
         end do
      end do

   end subroutine supm_elmbuqEst1Laplad    
   
   subroutine supm_elmbpqEst1(e,timom,dvolu,auxoss,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the third lhs term for ASGS in constitutive equation
    !    -tau1*(gra(p),div(t))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxoss
      real(rp),    intent(in)    :: dvolu,timom
      real(rp),    intent(inout) :: elmat(1,e%mnode,1,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux

      aux  = timom*dvolu    
      
      do jnode=1,e%pnode  
         do inode=1,e%pnode    

            elmat(1,inode,1,jnode) = aux*(e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(2,inode)*e%cartd(2,jnode)) + elmat(1,inode,1,jnode)
         
         end do  
      end do

   end subroutine supm_elmbpqEst1
   
   subroutine supm_elmbpqEst13d(e,timom,dvolu,auxoss,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the third lhs term for ASGS in constitutive equation
    !    -tau1*(gra(p),div(t))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxoss
      real(rp),    intent(in)    :: dvolu,timom
      real(rp),    intent(inout) :: elmat(1,e%mnode,1,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux

      aux  = timom*dvolu    
      
      do jnode=1,e%pnode  
         do inode=1,e%pnode    

            elmat(1,inode,1,jnode) = aux*(e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(2,inode)*e%cartd(2,jnode) + e%cartd(3,inode)*e%cartd(3,jnode)) &
                  + elmat(1,inode,1,jnode)
         
         end do  
      end do

   end subroutine supm_elmbpqEst13d   
   
   subroutine supm_elmrhpEst1(e,acden,timom,dvolu,elext,gpvel,grvel,auxoss,elrhs)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxoss
      real(rp),    intent(in)    :: acden,timom,elext(e%ndime)
      real(rp),    intent(in)    :: dvolu,gpvel(e%ndime),grvel(e%ndime,e%ndime)
      real(rp),    intent(inout) :: elrhs(1,e%mnode)
      integer(ip)                :: inode,aux1
      real(rp)                   :: aux2

      aux2 = timom*dvolu*auxoss
    
      do inode=1,e%pnode

         elrhs(1,inode) = aux2*(e%cartd(1,inode)*(elext(1) + acden*(gpvel(1)*grvel(1,1) + gpvel(2)*grvel(1,2))) &
               + e%cartd(2,inode)*(elext(2) + acden*(gpvel(1)*grvel(2,1) + gpvel(2)*grvel(2,2)))) &
               + elrhs(1,inode) 
  
      end do

   end subroutine supm_elmrhpEst1 
   
   subroutine supm_elmrhpForce(e,auxoss,timom,dvolu,elext,elrhs)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxoss
      real(rp),    intent(in)    :: timom,elext(e%ndime)
      real(rp),    intent(in)    :: dvolu
      real(rp),    intent(inout) :: elrhs(1,e%mnode)
      integer(ip)                :: inode,idime
      real(rp)                   :: aux2

      aux2 = timom*dvolu*(1_ip-auxoss)
    
      do inode=1,e%pnode
         do idime=1,e%ndime

            elrhs(1,inode) = aux2*(e%cartd(idime,inode)*elext(idime)) &
                  + elrhs(1,inode) 
         end do
      end do

   end subroutine supm_elmrhpForce    
   
   subroutine supm_elmrhpEst13d(e,acden,timom,dvolu,elext,gpvel,grvel,auxoss,elrhs)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxoss
      real(rp),    intent(in)    :: acden,timom,elext(e%ndime)
      real(rp),    intent(in)    :: dvolu,gpvel(e%ndime),grvel(e%ndime,e%ndime)
      real(rp),    intent(inout) :: elrhs(1,e%mnode)
      integer(ip)                :: inode,aux1
      real(rp)                   :: aux2

      aux2 = timom*dvolu*auxoss
    
      do inode=1,e%pnode

         elrhs(1,inode) = aux2*(e%cartd(1,inode)*(elext(1) + acden*(gpvel(1)*grvel(1,1) + gpvel(2)*grvel(1,2) + gpvel(3)*grvel(1,3))) &
               + e%cartd(2,inode)*(elext(2) + acden*(gpvel(1)*grvel(2,1) + gpvel(2)*grvel(2,2) + gpvel(3)*grvel(2,3))) &
               + e%cartd(3,inode)*(elext(3) + acden*(gpvel(1)*grvel(3,1) + gpvel(2)*grvel(3,2) + gpvel(3)*grvel(3,3)))) &
               + elrhs(1,inode) 
  
      end do

   end subroutine supm_elmrhpEst13d    
   
   !**********************************************************************************************************************************
   !Estabilization terms of Constituive Equation 
   
   subroutine supm_elmbstEst2(e,auxVE,auxG,auxPTT,acvis,tisig,dtinv,gpadv,gpsig,dvolu,auxtens,grvel,elmat) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in constitutive equation
    !    (-(1/2eta)*tau + auxVE*a*grad(tau),R_constituitva)
    !   +(auxVE*(2*grad(a)*tau -(auxG/eta)*sigma*tau),R_constituitva)
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxPTT
      real(rp),    intent(in)    :: acvis,auxVE,auxG,dvolu,gpsig(auxtens),gpadv(e%pnode),dtinv
      real(rp),    intent(in)    :: grvel(e%ndime,e%ndime),tisig     
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode,auxstab,aux1,auxstab2,aux4
      real(rp)                   :: aux2,aux3
      real(rp)                   :: Res11s11,Res11s12,Res11s22,Res22s11,Res22s12,Res22s22, &
                                    Res12s11,Res12s12,Res12s22,traza
                                                                         
      
      traza= (gpsig(1) + gpsig(2))
 
      do jnode=1,e%pnode      
      
         Res11s11 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode) - 2.0_rp*grvel(1,1)*e%shape(jnode,e%igaus)) &
               + auxVE*(auxPTT*(auxG/acvis))*(2.0_rp*gpsig(1))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus) &
               + auxVE*(1_ip - auxPTT)*(auxG/acvis)*(traza + gpsig(1))*e%shape(jnode,e%igaus)               
         Res11s12 = (auxVE)*(-2.0_rp)*grvel(1,2)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*(2.0_rp*gpsig(3))*e%shape(jnode,e%igaus)
         Res11s22 = auxVE*(1_ip - auxPTT)*(auxG/acvis)*(gpsig(1))*e%shape(jnode,e%igaus)
         
         Res12s11 = -(auxVE)*grvel(2,1)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(3)*e%shape(jnode,e%igaus)
         Res12s12 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode)) &
               + auxVE*(auxG/acvis)*(gpsig(1) + gpsig(2))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus) 
         Res12s22 = -(auxVE)*grvel(1,2)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(3)*e%shape(jnode,e%igaus) 
         
         Res22s11 = auxVE*(1_ip - auxPTT)*(auxG/acvis)*(gpsig(2))*e%shape(jnode,e%igaus)
         Res22s12 = (auxVE)*(-2.0_rp)*grvel(2,1)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*(2.0_rp*gpsig(3))*e%shape(jnode,e%igaus) 
         Res22s22 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode) - 2.0_rp*grvel(2,2)*e%shape(jnode,e%igaus)) &
               + auxVE*(auxPTT*(auxG/acvis))*(2.0_rp*gpsig(2))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus) &
               + auxVE*(1_ip - auxPTT)*(auxG/acvis)*(traza + gpsig(2))*e%shape(jnode,e%igaus)
      
         do inode=1,e%pnode
            
            aux2= (e%shape(inode,e%igaus)*(-tisig/(2.0_rp*acvis)) + (tisig*auxVE)*gpadv(inode))*dvolu          

            aux3= ((tisig*auxVE)*e%shape(inode,e%igaus))*dvolu         
               
            elmat(1,inode,1,jnode) = aux2*Res11s11 &
                  + aux3*(2.0_rp*grvel(1,1))*Res11s11 - aux3*(auxPTT*(auxG/acvis)*gpsig(1))*Res11s11 &
                  + aux3*(2.0_rp*grvel(1,2))*Res12s11 - aux3*(auxPTT*(auxG/acvis)*gpsig(3))*Res12s11 & 
                  - (1_ip - auxPTT)*aux3*(auxG/acvis)*traza*Res11s11 & 
                  + elmat(1,inode,1,jnode)
                  
            elmat(1,inode,2,jnode) = aux2*Res11s22 &
                  + aux3*(2.0_rp*grvel(1,2))*Res12s22 - aux3*(auxPTT*(auxG/acvis)*gpsig(3))*Res12s22 &     
                  - (1_ip - auxPTT)*aux3*(auxG/acvis)*traza*Res11s22 &                 
                  + elmat(1,inode,2,jnode)
                  
            elmat(1,inode,3,jnode) = aux2*Res11s12 &
                  + aux3*(2.0_rp*grvel(1,1))*Res11s12 - aux3*(auxPTT*(auxG/acvis)*gpsig(1))*Res11s12 &
                  + aux3*(2.0_rp*grvel(1,2))*Res12s12 - aux3*(auxPTT*(auxG/acvis)*gpsig(3))*Res12s12 &
                  - (1_ip - auxPTT)*aux3*(auxG/acvis)*traza*Res11s12 &                  
                  + elmat(1,inode,3,jnode)
            
            
            
            elmat(2,inode,1,jnode) = aux2*Res22s11 &
                  + aux3*(2.0_rp*grvel(2,1))*Res12s11 - aux3*(auxPTT*(auxG/acvis)*gpsig(3))*Res12s11 &  
                  - (1_ip - auxPTT)*aux3*(auxG/acvis)*traza*Res22s11 &                   
                  + elmat(2,inode,1,jnode)
            
            elmat(2,inode,2,jnode) = aux2*Res22s22 &
                  + aux3*(2.0_rp*grvel(2,2))*Res22s22 - aux3*(auxPTT*(auxG/acvis)*gpsig(2))*Res22s22 &
                  + aux3*(2.0_rp*grvel(2,1))*Res12s22 - aux3*(auxPTT*(auxG/acvis)*gpsig(3))*Res12s22 &  
                  - (1_ip - auxPTT)*aux3*(auxG/acvis)*traza*Res22s22 &               
                  + elmat(2,inode,2,jnode)
                  
            elmat(2,inode,3,jnode) = aux2*Res22s12 &
                  + aux3*(2.0_rp*grvel(2,2))*Res22s12 - aux3*(auxPTT*(auxG/acvis)*gpsig(2))*Res22s12 &
                  + aux3*(2.0_rp*grvel(2,1))*Res12s12 - aux3*(auxPTT*(auxG/acvis)*gpsig(3))*Res12s12 &   
                  - (1_ip - auxPTT)*aux3*(auxG/acvis)*traza*Res22s12 &              
                  + elmat(2,inode,3,jnode)
            
           
           
           elmat(3,inode,1,jnode) = aux2*(2.0_rp*Res12s11) & 
                  + aux3*(2.0_rp*grvel(2,1))*Res11s11 - aux3*(auxPTT*(auxG/acvis)*gpsig(3))*Res11s11 &
                  - aux3*(auxPTT*(auxG/acvis))*(gpsig(1) + gpsig(2))*Res12s11 &
                  - (1_ip - auxPTT)*2.0_rp*aux3*(auxG/acvis)*traza*Res12s11 &                 
                  + elmat(3,inode,1,jnode)
                  
                  
            elmat(3,inode,2,jnode) = aux2*(2.0_rp*Res12s22) &
                  - aux3*(auxPTT*(auxG/acvis))*(gpsig(1) + gpsig(2))*Res12s22 &
                  + aux3*(2.0_rp*grvel(1,2))*Res22s22 - aux3*(auxPTT*(auxG/acvis)*gpsig(3))*Res22s22 & 
                  - (1_ip - auxPTT)*2.0_rp*aux3*(auxG/acvis)*traza*Res12s22 &               
                  + elmat(3,inode,2,jnode)           
            
                  
            elmat(3,inode,3,jnode) = aux2*(2.0_rp*Res12s12) &
                  + aux3*(2.0_rp*grvel(2,1))*Res11s12 - aux3*(auxPTT*(auxG/acvis)*gpsig(3))*Res11s12 &
                  + aux3*(2.0_rp*grvel(1,2))*Res22s12 - aux3*(auxPTT*(auxG/acvis)*gpsig(3))*Res22s12 &
                  - aux3*(auxPTT*(auxG/acvis))*(gpsig(1) + gpsig(2))*Res12s12 &
                  - (1_ip - auxPTT)*2.0_rp*aux3*(auxG/acvis)*traza*Res12s12 &                
                  + elmat(3,inode,3,jnode)                                    

         end do
      end do   

   end subroutine supm_elmbstEst2
   
   subroutine supm_elmbstEst23d(e,auxVE,auxG,auxPTT,acvis,tisig,dtinv,gpadv,gpsig,dvolu,auxtens,grvel,elmat) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in constitutive equation
    !    (-(1/2eta)*tau + auxVE*a*grad(tau),R_constituitva)
    !   +(auxVE*(2*grad(a)*tau -(auxG/eta)*sigma*tau),R_constituitva)
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxPTT
      real(rp),    intent(in)    :: acvis,auxVE,auxG,dvolu,gpsig(auxtens),gpadv(e%pnode),dtinv
      real(rp),    intent(in)    :: grvel(e%ndime,e%ndime),tisig     
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode,auxstab,aux1,auxstab2,aux4
      real(rp)                   :: aux2,aux3
      real(rp)                   :: Res11s11,Res11s12,Res11s13,Res11s22,Res11s23,Res11S33, &
                                    Res22s11,Res22s12,Res22s13,Res22s22,Res22s23,Res22S33, & 
                                    Res33s11,Res33s12,Res33s13,Res33s22,Res33s23,Res33S33, & 
                                    Res12s11,Res12s12,Res12s13,Res12s22,Res12s23,Res12S33, & 
                                    Res13s11,Res13s12,Res13s13,Res13s22,Res13s23,Res13S33, & 
                                    Res23s11,Res23s12,Res23s13,Res23s22,Res23s23,Res23S33, &
                                    Res21s11,Res21s12,Res21s13,Res21s22,Res21s23,Res21S33, &
                                    Res31s11,Res31s12,Res31s13,Res31s22,Res31s23,Res31S33, &
                                    Res32s11,Res32s12,Res32s13,Res32s22,Res32s23,Res32S33
      
      do jnode=1,e%pnode  
         
         Res11s11 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode) - 2.0_rp*grvel(1,1)*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(2.0_rp*gpsig(1))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)
         Res11s12 = (auxVE)*(-2.0_rp)*grvel(1,2)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*(2.0_rp*gpsig(6))*e%shape(jnode,e%igaus)
         Res11s13 = (auxVE)*(-2.0_rp)*grvel(1,3)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*(2.0_rp*gpsig(5))*e%shape(jnode,e%igaus)
         Res11s22 = 0.0_rp
         Res11s23 = 0.0_rp
         Res11s33 = 0.0_rp
         
         Res22s11 = 0.0_rp
         Res22s12 = (auxVE)*(-2.0_rp)*grvel(2,1)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*(2.0_rp*gpsig(6))*e%shape(jnode,e%igaus)
         Res22s13 = 0.0_rp         
         Res22s22 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode) - 2.0_rp*grvel(2,2)*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(2.0_rp*gpsig(2))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)   
         Res22s23 = (auxVE)*(-2.0_rp)*grvel(2,3)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*(2.0_rp*gpsig(4))*e%shape(jnode,e%igaus)
         Res22s33 = 0.0_rp
         
         Res33s11 = 0.0_rp
         Res33s12 = 0.0_rp
         Res33s13 = (auxVE)*(-2.0_rp)*grvel(3,1)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*(2.0_rp*gpsig(5))*e%shape(jnode,e%igaus)
         Res33s22 = 0.0_rp
         Res33s23 = (auxVE)*(-2.0_rp)*grvel(3,2)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*(2.0_rp*gpsig(4))*e%shape(jnode,e%igaus)
         Res33s33 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode) - 2.0_rp*grvel(3,3)*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(2.0_rp*gpsig(3))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)
            
         Res12s11 = -(auxVE)*grvel(2,1)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(6)*e%shape(jnode,e%igaus)
         Res12s12 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode)) &
               - auxVE*((grvel(2,2) + grvel(1,1))*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(gpsig(1) + auxPTT*gpsig(2))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)
         Res12s13 = -(auxVE)*grvel(2,3)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(4)*e%shape(jnode,e%igaus)
         Res12s22 = -(auxVE)*grvel(1,2)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(6)*e%shape(jnode,e%igaus)          
         Res12s23 = -(auxVE)*grvel(1,3)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(5)*e%shape(jnode,e%igaus)
         Res12s33 = 0.0_rp
         
         Res21s11 = -(auxVE)*grvel(2,1)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(6)*e%shape(jnode,e%igaus)
         Res21s12 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode)) &
               - auxVE*((grvel(2,2) + grvel(1,1))*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(auxPTT*gpsig(1) + gpsig(2))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)
         Res21s13 = -(auxVE)*grvel(2,3)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(4)*e%shape(jnode,e%igaus)
         Res21s22 = -(auxVE)*grvel(1,2)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(6)*e%shape(jnode,e%igaus)          
         Res21s23 = -(auxVE)*grvel(1,3)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(5)*e%shape(jnode,e%igaus)
         Res21s33 = 0.0_rp         
         
         Res13s11 = -(auxVE)*grvel(3,1)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(5)*e%shape(jnode,e%igaus)
         Res13s12 = -(auxVE)*grvel(3,2)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(4)*e%shape(jnode,e%igaus)
         Res13s13 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode)) &
               - auxVE*((grvel(3,3) + grvel(1,1))*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(gpsig(1) + auxPTT*gpsig(3))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)
         Res13s22 = 0.0_rp        
         Res13s23 = -(auxVE)*grvel(1,2)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(6)*e%shape(jnode,e%igaus)
         Res13s33 = -(auxVE)*grvel(1,3)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(5)*e%shape(jnode,e%igaus)   
         
         Res31s11 = -(auxVE)*grvel(3,1)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(5)*e%shape(jnode,e%igaus)
         Res31s12 = -(auxVE)*grvel(3,2)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(4)*e%shape(jnode,e%igaus)
         Res31s13 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode)) &
               - auxVE*((grvel(3,3) + grvel(1,1))*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(auxPTT*gpsig(1) + gpsig(3))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)
         Res31s22 = 0.0_rp        
         Res31s23 = -(auxVE)*grvel(1,2)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(6)*e%shape(jnode,e%igaus)
         Res31s33 = -(auxVE)*grvel(1,3)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(5)*e%shape(jnode,e%igaus)           

         Res23s11 = 0.0_rp
         Res23s12 = -(auxVE)*grvel(3,1)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(5)*e%shape(jnode,e%igaus)
         Res23s13 = -(auxVE)*grvel(2,1)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(6)*e%shape(jnode,e%igaus)
         Res23s22 = -(auxVE)*grvel(3,2)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(4)*e%shape(jnode,e%igaus)         
         Res23s23 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode)) &
               - auxVE*((grvel(3,3) + grvel(2,2))*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(gpsig(2) + auxPTT*gpsig(3))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)       
         Res23s33 = -(auxVE)*grvel(2,3)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(4)*e%shape(jnode,e%igaus)  
         
         Res32s11 = 0.0_rp
         Res32s12 = -(auxVE)*grvel(3,1)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(5)*e%shape(jnode,e%igaus)
         Res32s13 = -(auxVE)*grvel(2,1)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(6)*e%shape(jnode,e%igaus)
         Res32s22 = -(auxVE)*grvel(3,2)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*gpsig(4)*e%shape(jnode,e%igaus)         
         Res32s23 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode)) &
               - auxVE*((grvel(3,3) + grvel(2,2))*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(auxPTT*gpsig(2) + gpsig(3))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)       
         Res32s33 = -(auxVE)*grvel(2,3)*e%shape(jnode,e%igaus) + auxVE*((auxG/acvis))*gpsig(4)*e%shape(jnode,e%igaus)             

         do inode=1,e%pnode
         
            aux2= (e%shape(inode,e%igaus)*(-tisig/(2.0_rp*acvis)) + (tisig*auxVE)*gpadv(inode))*dvolu          

            aux3= ((tisig*auxVE)*e%shape(inode,e%igaus))*dvolu         
               
            elmat(1,inode,1,jnode) = aux2*Res11s11 &
                  + aux3*(2.0_rp*grvel(1,1))*Res11s11 - aux3*((auxG/acvis)*gpsig(1))*Res11s11 &
                  + aux3*(2.0_rp*grvel(1,2))*Res12s11 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res12s11 &
                  + aux3*(2.0_rp*grvel(1,3))*Res13s11 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res13s11 &
                  + elmat(1,inode,1,jnode)               
            elmat(1,inode,2,jnode) = aux2*Res11s22 &
                  + aux3*(2.0_rp*grvel(1,1))*Res11s22 - aux3*((auxG/acvis)*gpsig(1))*Res11s22 &
                  + aux3*(2.0_rp*grvel(1,2))*Res12s22 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res12s22 &
                  + aux3*(2.0_rp*grvel(1,3))*Res13s22 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res13s22 &                    
                  + elmat(1,inode,2,jnode)               
            elmat(1,inode,3,jnode) = aux2*Res11s33 &
                  + aux3*(2.0_rp*grvel(1,1))*Res11s33 - aux3*((auxG/acvis)*gpsig(1))*Res11s33 &
                  + aux3*(2.0_rp*grvel(1,2))*Res12s33 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res12s33 &
                  + aux3*(2.0_rp*grvel(1,3))*Res13s33 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res13s33 &                    
                  + elmat(1,inode,3,jnode)
            elmat(1,inode,4,jnode) = aux2*Res11s23 &
                  + aux3*(2.0_rp*grvel(1,1))*Res11s23 - aux3*((auxG/acvis)*gpsig(1))*Res11s23 &
                  + aux3*(2.0_rp*grvel(1,2))*Res12s23 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res12s23 &
                  + aux3*(2.0_rp*grvel(1,3))*Res13s23 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res13s23 &                    
                  + elmat(1,inode,4,jnode)
            elmat(1,inode,5,jnode) = aux2*Res11s13 &
                  + aux3*(2.0_rp*grvel(1,1))*Res11s13 - aux3*((auxG/acvis)*gpsig(1))*Res11s13 &
                  + aux3*(2.0_rp*grvel(1,2))*Res12s13 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res12s13 &
                  + aux3*(2.0_rp*grvel(1,3))*Res13s13 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res13s13 &                    
                  + elmat(1,inode,5,jnode)               
            elmat(1,inode,6,jnode) = aux2*Res11s12 &
                  + aux3*(2.0_rp*grvel(1,1))*Res11s12 - aux3*((auxG/acvis)*gpsig(1))*Res11s12 &
                  + aux3*(2.0_rp*grvel(1,2))*Res12s12 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res12s12 &
                  + aux3*(2.0_rp*grvel(1,3))*Res13s12 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res13s12 &                    
                  + elmat(1,inode,6,jnode)
            
            elmat(2,inode,1,jnode) = aux2*Res22s11 &
                  + aux3*(2.0_rp*grvel(2,2))*Res22s11 - aux3*((auxG/acvis)*gpsig(2))*Res22s11 &           
                  + aux3*(2.0_rp*grvel(2,1))*Res12s11 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res12s11 & 
                  + aux3*(2.0_rp*grvel(2,3))*Res23s11 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res23s11 &                
                  + elmat(2,inode,1,jnode)         
            elmat(2,inode,2,jnode) = aux2*Res22s22 &
                  + aux3*(2.0_rp*grvel(2,2))*Res22s22 - aux3*((auxG/acvis)*gpsig(2))*Res22s22 &           
                  + aux3*(2.0_rp*grvel(2,1))*Res12s22 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res12s22 & 
                  + aux3*(2.0_rp*grvel(2,3))*Res23s22 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res23s22 &                    
                  + elmat(2,inode,2,jnode)
            elmat(2,inode,3,jnode) = aux2*Res22s33 &
                  + aux3*(2.0_rp*grvel(2,2))*Res22s33 - aux3*((auxG/acvis)*gpsig(2))*Res22s33 &           
                  + aux3*(2.0_rp*grvel(2,1))*Res12s33 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res12s33 & 
                  + aux3*(2.0_rp*grvel(2,3))*Res23s33 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res23s33 &                    
                  + elmat(2,inode,3,jnode)               
            elmat(2,inode,4,jnode) = aux2*Res22s23 &
                  + aux3*(2.0_rp*grvel(2,2))*Res22s23 - aux3*((auxG/acvis)*gpsig(2))*Res22s23 &           
                  + aux3*(2.0_rp*grvel(2,1))*Res12s23 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res12s23 & 
                  + aux3*(2.0_rp*grvel(2,3))*Res23s23 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res23s23 &                    
                  + elmat(2,inode,4,jnode)
            elmat(2,inode,5,jnode) = aux2*Res22s13 &
                  + aux3*(2.0_rp*grvel(2,2))*Res22s13 - aux3*((auxG/acvis)*gpsig(2))*Res22s13 &           
                  + aux3*(2.0_rp*grvel(2,1))*Res12s13 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res12s13 & 
                  + aux3*(2.0_rp*grvel(2,3))*Res23s13 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res23s13 &                    
                  + elmat(2,inode,5,jnode)               
            elmat(2,inode,6,jnode) = aux2*Res22s12 &
                  + aux3*(2.0_rp*grvel(2,2))*Res22s12 - aux3*((auxG/acvis)*gpsig(2))*Res22s12 &           
                  + aux3*(2.0_rp*grvel(2,1))*Res12s12 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res12s12 & 
                  + aux3*(2.0_rp*grvel(2,3))*Res23s12 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res23s12 &                    
                  + elmat(2,inode,6,jnode)
                  
            elmat(3,inode,1,jnode) = aux2*Res33s11 &
                  + aux3*(2.0_rp*grvel(3,3))*Res33s11 - aux3*((auxG/acvis)*gpsig(3))*Res33s11 &           
                  + aux3*(2.0_rp*grvel(3,1))*Res13s11 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res13s11 & 
                  + aux3*(2.0_rp*grvel(3,2))*Res23s11 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res23s11 &                
                  + elmat(3,inode,1,jnode)         
            elmat(3,inode,2,jnode) = aux2*Res33s22 &
                  + aux3*(2.0_rp*grvel(3,3))*Res33s22 - aux3*((auxG/acvis)*gpsig(3))*Res33s22 &           
                  + aux3*(2.0_rp*grvel(3,1))*Res13s22 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res13s22 & 
                  + aux3*(2.0_rp*grvel(3,2))*Res23s22 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res23s22 &                
                  + elmat(3,inode,2,jnode)
            elmat(3,inode,3,jnode) = aux2*Res33s33 &
                  + aux3*(2.0_rp*grvel(3,3))*Res33s33 - aux3*((auxG/acvis)*gpsig(3))*Res33s33 &           
                  + aux3*(2.0_rp*grvel(3,1))*Res13s33 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res13s33 & 
                  + aux3*(2.0_rp*grvel(3,2))*Res23s33 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res23s33 &                
                  + elmat(3,inode,3,jnode)                
            elmat(3,inode,4,jnode) = aux2*Res33s23 &
                  + aux3*(2.0_rp*grvel(3,3))*Res33s23 - aux3*((auxG/acvis)*gpsig(3))*Res33s23 &           
                  + aux3*(2.0_rp*grvel(3,1))*Res13s23 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res13s23 & 
                  + aux3*(2.0_rp*grvel(3,2))*Res23s23 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res23s23 &                
                  + elmat(3,inode,4,jnode) 
            elmat(3,inode,5,jnode) = aux2*Res33s13 &
                  + aux3*(2.0_rp*grvel(3,3))*Res33s13 - aux3*((auxG/acvis)*gpsig(3))*Res33s13 &           
                  + aux3*(2.0_rp*grvel(3,1))*Res13s13 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res13s13 & 
                  + aux3*(2.0_rp*grvel(3,2))*Res23s13 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res23s13 &                
                  + elmat(3,inode,5,jnode) 
            elmat(3,inode,6,jnode) = aux2*Res33s12 &
                  + aux3*(2.0_rp*grvel(3,3))*Res33s12 - aux3*((auxG/acvis)*gpsig(3))*Res33s12 &           
                  + aux3*(2.0_rp*grvel(3,1))*Res13s12 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res13s12 & 
                  + aux3*(2.0_rp*grvel(3,2))*Res23s12 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res23s12 &                
                  + elmat(3,inode,6,jnode)              
                  
            elmat(4,inode,1,jnode) = aux2*(Res23s11 + Res32s11) &
                  + aux3*(2.0_rp*(grvel(3,3) + grvel(2,2)))*Res23s11 - aux3*((auxG/acvis)*(gpsig(2)*Res32s11 + gpsig(3)*Res23s11)) &
                  + aux3*(2.0_rp*grvel(3,1))*Res12s11 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res12s11 &           
                  + aux3*(2.0_rp*grvel(2,1))*Res13s11 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res13s11 & 
                  + aux3*(2.0_rp*grvel(3,2))*Res22s11 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res22s11 &           
                  + aux3*(2.0_rp*grvel(2,3))*Res33s11 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res33s11 &              
                  + elmat(4,inode,1,jnode)                
            elmat(4,inode,2,jnode) = aux2*(Res23s22 + Res32s22) &
                  + aux3*(2.0_rp*(grvel(3,3) + grvel(2,2)))*Res23s22 - aux3*((auxG/acvis)*(gpsig(2)*Res32s22 + gpsig(3)*Res23s22)) &
                  + aux3*(2.0_rp*grvel(3,1))*Res12s22 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res12s22 &           
                  + aux3*(2.0_rp*grvel(2,1))*Res13s22 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res13s22 & 
                  + aux3*(2.0_rp*grvel(3,2))*Res22s22 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res22s22 &           
                  + aux3*(2.0_rp*grvel(2,3))*Res33s22 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res33s22 &              
                  + elmat(4,inode,2,jnode)
            elmat(4,inode,3,jnode) = aux2*(Res23s33 + Res32s33) &
                  + aux3*(2.0_rp*(grvel(3,3) + grvel(2,2)))*Res23s33 - aux3*((auxG/acvis)*(gpsig(2)*Res32s33 + gpsig(3)*Res23s33)) &
                  + aux3*(2.0_rp*grvel(3,1))*Res12s33 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res12s33 &           
                  + aux3*(2.0_rp*grvel(2,1))*Res13s33 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res13s33 & 
                  + aux3*(2.0_rp*grvel(3,2))*Res22s33 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res22s33 &           
                  + aux3*(2.0_rp*grvel(2,3))*Res33s33 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res33s33 &              
                  + elmat(4,inode,3,jnode)               
            elmat(4,inode,4,jnode) = aux2*(Res23s23 + Res32s23) &
                  + aux3*(2.0_rp*(grvel(3,3) + grvel(2,2)))*Res23s23 - aux3*((auxG/acvis)*(gpsig(2)*Res32s23 + gpsig(3)*Res23s23)) &
                  + aux3*(2.0_rp*grvel(3,1))*Res12s23 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res12s23 &           
                  + aux3*(2.0_rp*grvel(2,1))*Res13s23 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res13s23 & 
                  + aux3*(2.0_rp*grvel(3,2))*Res22s23 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res22s23 &           
                  + aux3*(2.0_rp*grvel(2,3))*Res33s23 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res33s23 &              
                  + elmat(4,inode,4,jnode)               
            elmat(4,inode,5,jnode) = aux2*(Res23s13 + Res32s13) &
                  + aux3*(2.0_rp*(grvel(3,3) + grvel(2,2)))*Res23s13 - aux3*((auxG/acvis)*(gpsig(2)*Res32s13 + gpsig(3)*Res23s13)) &
                  + aux3*(2.0_rp*grvel(3,1))*Res12s13 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res12s13 &           
                  + aux3*(2.0_rp*grvel(2,1))*Res13s13 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res13s13 & 
                  + aux3*(2.0_rp*grvel(3,2))*Res22s13 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res22s13 &           
                  + aux3*(2.0_rp*grvel(2,3))*Res33s13 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res33s13 &              
                  + elmat(4,inode,5,jnode)
            elmat(4,inode,6,jnode) = aux2*(Res23s12 + Res32s12) &
                  + aux3*(2.0_rp*(grvel(3,3) + grvel(2,2)))*Res23s12 - aux3*((auxG/acvis)*(gpsig(2)*Res32s12 + gpsig(3)*Res23s12)) &
                  + aux3*(2.0_rp*grvel(3,1))*Res12s12 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res12s12 &           
                  + aux3*(2.0_rp*grvel(2,1))*Res13s12 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res13s12 & 
                  + aux3*(2.0_rp*grvel(3,2))*Res22s12 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res22s12 &           
                  + aux3*(2.0_rp*grvel(2,3))*Res33s12 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res33s12 &              
                  + elmat(4,inode,6,jnode)               
                  
            elmat(5,inode,1,jnode) = aux2*(Res13s11 + Res31s11) &
                  + aux3*(2.0_rp*(grvel(3,3) + grvel(1,1)))*Res13s11 - aux3*((auxG/acvis)*(gpsig(1)*Res31s11 + gpsig(3)*Res13s11)) &
                  + aux3*(2.0_rp*grvel(3,2))*Res12s11 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res12s11 &           
                  + aux3*(2.0_rp*grvel(1,2))*Res23s11 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res23s11 & 
                  + aux3*(2.0_rp*grvel(3,1))*Res11s11 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res11s11 &           
                  + aux3*(2.0_rp*grvel(1,3))*Res33s11 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res33s11 &              
                  + elmat(5,inode,1,jnode)
            elmat(5,inode,2,jnode) = aux2*(Res13s22 + Res31s22) &
                  + aux3*(2.0_rp*(grvel(3,3) + grvel(1,1)))*Res13s22 - aux3*((auxG/acvis)*(gpsig(1)*Res31s22 + gpsig(3)*Res13s22)) &
                  + aux3*(2.0_rp*grvel(3,2))*Res12s22 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res12s22 &           
                  + aux3*(2.0_rp*grvel(1,2))*Res23s22 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res23s22 & 
                  + aux3*(2.0_rp*grvel(3,1))*Res11s22 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res11s22 &           
                  + aux3*(2.0_rp*grvel(1,3))*Res33s22 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res33s22 &              
                  + elmat(5,inode,2,jnode)
            elmat(5,inode,3,jnode) = aux2*(Res13s33 + Res31s33) &
                  + aux3*(2.0_rp*(grvel(3,3) + grvel(1,1)))*Res13s33 - aux3*((auxG/acvis)*(gpsig(1)*Res31s33 + gpsig(3)*Res13s33)) &
                  + aux3*(2.0_rp*grvel(3,2))*Res12s33 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res12s33 &           
                  + aux3*(2.0_rp*grvel(1,2))*Res23s33 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res23s33 & 
                  + aux3*(2.0_rp*grvel(3,1))*Res11s33 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res11s33 &           
                  + aux3*(2.0_rp*grvel(1,3))*Res33s33 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res33s33 &              
                  + elmat(5,inode,3,jnode)
            elmat(5,inode,4,jnode) = aux2*(Res13s23 + Res31s23) &
                  + aux3*(2.0_rp*(grvel(3,3) + grvel(1,1)))*Res13s23 - aux3*((auxG/acvis)*(gpsig(1)*Res31s23 + gpsig(3)*Res13s23)) &
                  + aux3*(2.0_rp*grvel(3,2))*Res12s23 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res12s23 &           
                  + aux3*(2.0_rp*grvel(1,2))*Res23s23 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res23s23 & 
                  + aux3*(2.0_rp*grvel(3,1))*Res11s23 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res11s23 &           
                  + aux3*(2.0_rp*grvel(1,3))*Res33s23 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res33s23 &              
                  + elmat(5,inode,4,jnode)
            elmat(5,inode,5,jnode) = aux2*(Res13s13 + Res31s13)&
                  + aux3*(2.0_rp*(grvel(3,3) + grvel(1,1)))*Res13s13 - aux3*((auxG/acvis)*(gpsig(1)*Res31s13 + gpsig(3)*Res13s13)) &
                  + aux3*(2.0_rp*grvel(3,2))*Res12s13 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res12s13 &           
                  + aux3*(2.0_rp*grvel(1,2))*Res23s13 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res23s13 & 
                  + aux3*(2.0_rp*grvel(3,1))*Res11s13 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res11s13 &           
                  + aux3*(2.0_rp*grvel(1,3))*Res33s13 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res33s13 &              
                  + elmat(5,inode,5,jnode)               
            elmat(5,inode,6,jnode) = aux2*(Res13s12 + Res31s12) &
                  + aux3*(2.0_rp*(grvel(3,3) + grvel(1,1)))*Res13s12 - aux3*((auxG/acvis)*(gpsig(1)*Res31s12 + gpsig(3)*Res13s12)) &
                  + aux3*(2.0_rp*grvel(3,2))*Res12s12 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res12s12 &           
                  + aux3*(2.0_rp*grvel(1,2))*Res23s12 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res23s12 & 
                  + aux3*(2.0_rp*grvel(3,1))*Res11s12 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res11s12 &           
                  + aux3*(2.0_rp*grvel(1,3))*Res33s12 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res33s12 &              
                  + elmat(5,inode,6,jnode)
                  
            elmat(6,inode,1,jnode) = aux2*(Res12s11 + Res21s11) &
                  + aux3*(2.0_rp*(grvel(2,2) + grvel(1,1)))*Res12s11 - aux3*((auxG/acvis)*(gpsig(1)*Res21s11 + gpsig(2)*Res12s11)) &
                  + aux3*(2.0_rp*grvel(2,3))*Res13s11 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res13s11 &           
                  + aux3*(2.0_rp*grvel(1,3))*Res23s11 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res23s11 & 
                  + aux3*(2.0_rp*grvel(2,1))*Res11s11 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res11s11 &           
                  + aux3*(2.0_rp*grvel(1,2))*Res22s11 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res22s11 &              
                  + elmat(6,inode,1,jnode)                
            elmat(6,inode,2,jnode) = aux2*(Res12s22 + Res21s22) &
                  + aux3*(2.0_rp*(grvel(2,2) + grvel(1,1)))*Res12s22 - aux3*((auxG/acvis)*(gpsig(1)*Res21s22 + gpsig(2)*Res12s22)) &
                  + aux3*(2.0_rp*grvel(2,3))*Res13s22 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res13s22 &           
                  + aux3*(2.0_rp*grvel(1,3))*Res23s22 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res23s22 & 
                  + aux3*(2.0_rp*grvel(2,1))*Res11s22 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res11s22 &           
                  + aux3*(2.0_rp*grvel(1,2))*Res22s22 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res22s22 &              
                  + elmat(6,inode,2,jnode)
            elmat(6,inode,3,jnode) = aux2*(Res12s33 + Res21s33) &
                  + aux3*(2.0_rp*(grvel(2,2) + grvel(1,1)))*Res12s33 - aux3*((auxG/acvis)*(gpsig(1)*Res21s33 + gpsig(2)*Res12s33)) &
                  + aux3*(2.0_rp*grvel(2,3))*Res13s33 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res13s33 &           
                  + aux3*(2.0_rp*grvel(1,3))*Res23s33 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res23s33 & 
                  + aux3*(2.0_rp*grvel(2,1))*Res11s33 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res11s33 &           
                  + aux3*(2.0_rp*grvel(1,2))*Res22s33 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res22s33 &              
                  + elmat(6,inode,3,jnode)               
            elmat(6,inode,4,jnode) = aux2*(Res12s23 + Res21s23) &
                  + aux3*(2.0_rp*(grvel(2,2) + grvel(1,1)))*Res12s23 - aux3*((auxG/acvis)*(gpsig(1)*Res21s23 + gpsig(2)*Res12s23)) &
                  + aux3*(2.0_rp*grvel(2,3))*Res13s23 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res13s23 &           
                  + aux3*(2.0_rp*grvel(1,3))*Res23s23 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res23s23 & 
                  + aux3*(2.0_rp*grvel(2,1))*Res11s23 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res11s23 &           
                  + aux3*(2.0_rp*grvel(1,2))*Res22s23 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res22s23 &              
                  + elmat(6,inode,4,jnode)                                  
            elmat(6,inode,5,jnode) = aux2*(Res12s13 + Res21s13) &
                  + aux3*(2.0_rp*(grvel(2,2) + grvel(1,1)))*Res12s13 - aux3*((auxG/acvis)*(gpsig(1)*Res21s13 + gpsig(2)*Res12s13)) &
                  + aux3*(2.0_rp*grvel(2,3))*Res13s13 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res13s13 &           
                  + aux3*(2.0_rp*grvel(1,3))*Res23s13 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res23s13 & 
                  + aux3*(2.0_rp*grvel(2,1))*Res11s13 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res11s13 &           
                  + aux3*(2.0_rp*grvel(1,2))*Res22s13 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res22s13 &              
                  + elmat(6,inode,5,jnode)
            elmat(6,inode,6,jnode) = aux2*(Res12s12 + Res21s12) &
                  + aux3*(2.0_rp*(grvel(2,2) + grvel(1,1)))*Res12s12 - aux3*((auxG/acvis)*(gpsig(1)*Res21s12 + gpsig(2)*Res12s12)) &
                  + aux3*(2.0_rp*grvel(2,3))*Res13s12 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res13s12 &           
                  + aux3*(2.0_rp*grvel(1,3))*Res23s12 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res23s12 & 
                  + aux3*(2.0_rp*grvel(2,1))*Res11s12 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res11s12 &           
                  + aux3*(2.0_rp*grvel(1,2))*Res22s12 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res22s12 &              
                  + elmat(6,inode,6,jnode)
               
         end do
      end do   

   end subroutine supm_elmbstEst23d   
   
   subroutine supm_elmbutEst2(e,beta,auxVE,auxG,auxPTT,acvis,tisig,gpsig,dvolu,auxtens,grvel,grsig,gpadv,elmat) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxtens,auxPTT
      real(rp),    intent(in)    :: auxVE,dvolu,gpsig(auxtens),grsig(auxtens,e%ndime),tisig
      real(rp),    intent(in)    :: acvis,auxG,grvel(e%ndime,e%ndime),beta,gpadv(e%pnode)
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux2,aux3  
      real(rp)                   :: Res11u,Res11v,Res12u,Res12v,Res22u,Res22v,traza     
      
      traza = gpsig(1) + gpsig(2)

      do jnode=1,e%pnode          

         Res11u = -(1.0_rp - beta)*e%cartd(1,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(1,1) - 2.0_rp*(gpsig(1)*e%cartd(1,jnode) + gpsig(3)*e%cartd(2,jnode)))
         Res11v = auxVE*(e%shape(jnode,e%igaus)*grsig(1,2))
         
         Res12u = -((1.0_rp - beta)/2.0_rp)*e%cartd(2,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(3,1) - (gpsig(2)*e%cartd(2,jnode)))
         Res12v = -((1.0_rp - beta)/2.0_rp)*e%cartd(1,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(3,2) - (gpsig(1)*e%cartd(1,jnode)))
         
         Res22u = auxVE*(e%shape(jnode,e%igaus)*grsig(2,1))
         Res22v = -(1.0_rp - beta)*e%cartd(2,jnode) & 
               + auxVE*(e%shape(jnode,e%igaus)*grsig(2,2) - 2.0_rp*(gpsig(3)*e%cartd(1,jnode) + gpsig(2)*e%cartd(2,jnode)))        
                
           
         do inode=1,e%pnode         
         
            aux2= (e%shape(inode,e%igaus)*(-(tisig/(2.0_rp*acvis))) + (tisig*auxVE)*gpadv(inode))*dvolu  
            aux3= ((tisig*auxVE)*e%shape(inode,e%igaus))*dvolu                                      
                  
            elmat(1,inode,1,jnode) = aux2*Res11u &
                  + aux3*(2.0_rp*grvel(1,1))*Res11u - aux3*(auxPTT*(auxG/acvis)*gpsig(1))*Res11u &  
                  + aux3*(2.0_rp*grvel(1,2))*Res12u - aux3*(auxPTT*(auxG/acvis)*gpsig(3))*Res12u & 
                  - aux3*(1_ip - auxPTT)*(auxG/acvis)*traza*Res11u & 
                  + elmat(1,inode,1,jnode) 
                  
            elmat(1,inode,2,jnode) = aux2*Res11v & 
                  + aux3*(2.0_rp*grvel(1,1))*Res11v - aux3*(auxPTT*(auxG/acvis)*gpsig(1))*Res11v &  
                  + aux3*(2.0_rp*grvel(1,2))*Res12v - aux3*(auxPTT*(auxG/acvis)*gpsig(3))*Res12v & 
                  - aux3*(1_ip - auxPTT)*(auxG/acvis)*traza*Res11v &            
                  + elmat(1,inode,2,jnode)
            
            elmat(2,inode,1,jnode) = aux2*Res22u &
                  + aux3*(2.0_rp*grvel(2,2))*Res22u - aux3*(auxPTT*(auxG/acvis)*gpsig(2))*Res22u &
                  + aux3*(2.0_rp*grvel(2,1))*Res12u - aux3*(auxPTT*(auxG/acvis)*gpsig(3))*Res12u & 
                  - aux3*(1_ip - auxPTT)*(auxG/acvis)*traza*Res22u &
                  + elmat(2,inode,1,jnode)
            
            elmat(2,inode,2,jnode) = aux2*Res22v &
                  + aux3*(2.0_rp*grvel(2,2))*Res22v - aux3*(auxPTT*(auxG/acvis)*gpsig(2))*Res22v & 
                  + aux3*(2.0_rp*grvel(2,1))*Res12v - aux3*(auxPTT*(auxG/acvis)*gpsig(3))*Res12v &    
                  - aux3*(1_ip - auxPTT)*(auxG/acvis)*traza*Res22v &
                  + elmat(2,inode,2,jnode)  
                  
            elmat(3,inode,1,jnode) = aux2*(2.0_rp*Res12u) &
                  + aux3*(2.0_rp*grvel(2,1))*Res11u - aux3*(auxPTT*(auxG/acvis)*gpsig(3))*Res11u &
                  + aux3*(2.0_rp*grvel(1,2))*Res22u - aux3*(auxPTT*(auxG/acvis)*gpsig(3))*Res22u &
                  - aux3*(auxPTT*(auxG/acvis)*gpsig(1))*(2.0_rp*Res12u) &
                  - aux3*(1_ip - auxPTT)*2.0_rp*(auxG/acvis)*traza*Res12u &
                  + elmat(3,inode,1,jnode) 
                  
            elmat(3,inode,2,jnode) = aux2*(2.0_rp*Res12v) &
                  + aux3*(2.0_rp*grvel(2,1))*Res11v - aux3*(auxPTT*(auxG/acvis)*gpsig(3))*Res11v &
                  + aux3*(2.0_rp*grvel(1,2))*Res22v - aux3*(auxPTT*(auxG/acvis)*gpsig(3))*Res22v &
                  - aux3*(auxPTT*(auxG/acvis)*gpsig(1))*(2.0_rp*Res12v) &
                  - aux3*(1_ip - auxPTT)*2.0_rp*(auxG/acvis)*traza*Res12v &
                  + elmat(3,inode,2,jnode)                                          

         end do  
      end do

   end subroutine supm_elmbutEst2 
   
   subroutine supm_elmbutEst23d(e,beta,auxVE,auxG,auxPTT,acvis,tisig,gpsig,dvolu,auxtens,grvel,grsig,gpadv,elmat) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxtens,auxPTT
      real(rp),    intent(in)    :: auxVE,dvolu,gpsig(auxtens),grsig(auxtens,e%ndime),tisig
      real(rp),    intent(in)    :: acvis,auxG,grvel(e%ndime,e%ndime),beta,gpadv(e%pnode)
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux2,aux3  
      real(rp)                   :: Res11u,Res11v,Res11w,Res12u,Res12v,Res12w,Res22u,Res22v,Res22w, &
                                    Res13u,Res13v,Res13w,Res23u,Res23v,Res23w,Res33u,Res33v,Res33w

      do jnode=1,e%pnode          

         Res11u = -(1.0_rp - beta)*e%cartd(1,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(1,1) - 2.0_rp*(gpsig(1)*e%cartd(1,jnode) + gpsig(6)*e%cartd(2,jnode) &
               + gpsig(5)*e%cartd(3,jnode)))
         Res11v = auxVE*(e%shape(jnode,e%igaus)*grsig(1,2))
         Res11w = auxVE*(e%shape(jnode,e%igaus)*grsig(1,3))
         
         Res22u = auxVE*(e%shape(jnode,e%igaus)*grsig(2,1))
         Res22v = -(1.0_rp - beta)*e%cartd(2,jnode) & 
               + auxVE*(e%shape(jnode,e%igaus)*grsig(2,2) - 2.0_rp*(gpsig(6)*e%cartd(1,jnode) + gpsig(2)*e%cartd(2,jnode) &
               + gpsig(4)*e%cartd(3,jnode)))             
         Res22w = auxVE*(e%shape(jnode,e%igaus)*grsig(2,3))
         
         Res33u = auxVE*(e%shape(jnode,e%igaus)*grsig(3,1))
         Res33v = auxVE*(e%shape(jnode,e%igaus)*grsig(3,2))
         Res33w = -(1.0_rp - beta)*e%cartd(3,jnode) & 
               + auxVE*(e%shape(jnode,e%igaus)*grsig(3,3) - 2.0_rp*(gpsig(5)*e%cartd(1,jnode) + gpsig(4)*e%cartd(2,jnode) &
               + gpsig(3)*e%cartd(3,jnode)))     
         
         Res12u = -((1.0_rp - beta)/2.0_rp)*e%cartd(2,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(6,1) - (gpsig(6)*e%cartd(1,jnode) + gpsig(2)*e%cartd(2,jnode) &
               + gpsig(4)*e%cartd(3,jnode)))
         Res12v = -((1.0_rp - beta)/2.0_rp)*e%cartd(1,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(6,2) - (gpsig(1)*e%cartd(1,jnode) + gpsig(6)*e%cartd(2,jnode) &
               + gpsig(5)*e%cartd(3,jnode)))
         Res12w = auxVE*(e%shape(jnode,e%igaus)*grsig(6,3))
         
         Res13u = -((1.0_rp - beta)/2.0_rp)*e%cartd(3,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(5,1) - (gpsig(5)*e%cartd(1,jnode) + gpsig(4)*e%cartd(2,jnode) &
               + gpsig(3)*e%cartd(3,jnode)))
         Res13v = auxVE*(e%shape(jnode,e%igaus)*grsig(5,2))
         Res13w = -((1.0_rp - beta)/2.0_rp)*e%cartd(1,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(5,3) - (gpsig(1)*e%cartd(1,jnode) + gpsig(6)*e%cartd(2,jnode) &
               + gpsig(5)*e%cartd(3,jnode)))
               
         Res23u = auxVE*(e%shape(jnode,e%igaus)*grsig(4,1))
         Res23v = -((1.0_rp - beta)/2.0_rp)*e%cartd(3,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(4,2) - (gpsig(5)*e%cartd(1,jnode) + gpsig(4)*e%cartd(2,jnode) &
               + gpsig(3)*e%cartd(3,jnode)))
         Res23w = -((1.0_rp - beta)/2.0_rp)*e%cartd(2,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(4,3) - (gpsig(6)*e%cartd(1,jnode) + gpsig(2)*e%cartd(2,jnode) &
               + gpsig(4)*e%cartd(3,jnode)))
               
         do inode=1,e%pnode         
         
            aux2= (e%shape(inode,e%igaus)*(-(tisig/(2.0_rp*acvis))) + (tisig*auxVE)*gpadv(inode))*dvolu  
            aux3= ((tisig*auxVE)*e%shape(inode,e%igaus))*dvolu                                      
                  
            elmat(1,inode,1,jnode) = aux2*Res11u &
                  + aux3*(2.0_rp*grvel(1,1))*Res11u - aux3*((auxG/acvis)*gpsig(1))*Res11u &
                  + aux3*(2.0_rp*grvel(1,2))*Res12u - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res12u &
                  + aux3*(2.0_rp*grvel(1,3))*Res13u - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res13u &
                  + elmat(1,inode,1,jnode)  
            elmat(1,inode,2,jnode) = aux2*Res11v &
                  + aux3*(2.0_rp*grvel(1,1))*Res11v - aux3*((auxG/acvis)*gpsig(1))*Res11v &
                  + aux3*(2.0_rp*grvel(1,2))*Res12v - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res12v &
                  + aux3*(2.0_rp*grvel(1,3))*Res13v - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res13v &
                  + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = aux2*Res11w &
                  + aux3*(2.0_rp*grvel(1,1))*Res11w - aux3*((auxG/acvis)*gpsig(1))*Res11w &
                  + aux3*(2.0_rp*grvel(1,2))*Res12w - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res12w &
                  + aux3*(2.0_rp*grvel(1,3))*Res13w - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res13w &
                  + elmat(1,inode,3,jnode)
               
            elmat(2,inode,1,jnode) = aux2*Res22u &
                  + aux3*(2.0_rp*grvel(2,2))*Res22u - aux3*((auxG/acvis)*gpsig(2))*Res22u &           
                  + aux3*(2.0_rp*grvel(2,1))*Res12u - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res12u & 
                  + aux3*(2.0_rp*grvel(2,3))*Res23u - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res23u &                
                  + elmat(2,inode,1,jnode)         
            elmat(2,inode,2,jnode) = aux2*Res22v &
                  + aux3*(2.0_rp*grvel(2,2))*Res22v - aux3*((auxG/acvis)*gpsig(2))*Res22v &           
                  + aux3*(2.0_rp*grvel(2,1))*Res12v - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res12v & 
                  + aux3*(2.0_rp*grvel(2,3))*Res23v - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res23v &                    
                  + elmat(2,inode,2,jnode)
            elmat(2,inode,3,jnode) = aux2*Res22w &
                  + aux3*(2.0_rp*grvel(2,2))*Res22w - aux3*((auxG/acvis)*gpsig(2))*Res22w &           
                  + aux3*(2.0_rp*grvel(2,1))*Res12w - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res12w & 
                  + aux3*(2.0_rp*grvel(2,3))*Res23w - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res23w &                    
                  + elmat(2,inode,3,jnode)
                  
            elmat(3,inode,1,jnode) = aux2*Res33u &
                  + aux3*(2.0_rp*grvel(3,3))*Res33u - aux3*((auxG/acvis)*gpsig(3))*Res33u &           
                  + aux3*(2.0_rp*grvel(3,1))*Res13u - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res13u & 
                  + aux3*(2.0_rp*grvel(3,2))*Res23u - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res23u &                
                  + elmat(3,inode,1,jnode)         
            elmat(3,inode,2,jnode) = aux2*Res33v &
                  + aux3*(2.0_rp*grvel(3,3))*Res33v - aux3*((auxG/acvis)*gpsig(3))*Res33v &           
                  + aux3*(2.0_rp*grvel(3,1))*Res13v - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res13v & 
                  + aux3*(2.0_rp*grvel(3,2))*Res23v - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res23v &                
                  + elmat(3,inode,2,jnode)
            elmat(3,inode,3,jnode) = aux2*Res33w &
                  + aux3*(2.0_rp*grvel(3,3))*Res33w - aux3*((auxG/acvis)*gpsig(3))*Res33w &           
                  + aux3*(2.0_rp*grvel(3,1))*Res13w - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res13w & 
                  + aux3*(2.0_rp*grvel(3,2))*Res23w - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res23w &                
                  + elmat(3,inode,3,jnode)
                  
            elmat(4,inode,1,jnode) = (2.0_rp*aux2)*Res23u &
                  + aux3*(2.0_rp*(grvel(3,3) + grvel(2,2)))*Res23u - aux3*((auxG/acvis)*(gpsig(2) + gpsig(3)))*Res23u &
                  + aux3*(2.0_rp*grvel(3,1))*Res12u - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res12u &           
                  + aux3*(2.0_rp*grvel(2,1))*Res13u - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res13u & 
                  + aux3*(2.0_rp*grvel(3,2))*Res22u - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res22u &           
                  + aux3*(2.0_rp*grvel(2,3))*Res33u - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res33u &              
                  + elmat(4,inode,1,jnode)                
            elmat(4,inode,2,jnode) = (2.0_rp*aux2)*Res23v &
                  + aux3*(2.0_rp*(grvel(3,3) + grvel(2,2)))*Res23v - aux3*((auxG/acvis)*(gpsig(2) + gpsig(3)))*Res23v &
                  + aux3*(2.0_rp*grvel(3,1))*Res12v - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res12v &           
                  + aux3*(2.0_rp*grvel(2,1))*Res13v - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res13v & 
                  + aux3*(2.0_rp*grvel(3,2))*Res22v - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res22v &           
                  + aux3*(2.0_rp*grvel(2,3))*Res33v - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res33v &              
                  + elmat(4,inode,2,jnode)
            elmat(4,inode,3,jnode) = (2.0_rp*aux2)*Res23w &
                  + aux3*(2.0_rp*(grvel(3,3) + grvel(2,2)))*Res23w - aux3*((auxG/acvis)*(gpsig(2) + gpsig(3)))*Res23w &
                  + aux3*(2.0_rp*grvel(3,1))*Res12w - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res12w &           
                  + aux3*(2.0_rp*grvel(2,1))*Res13w - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res13w & 
                  + aux3*(2.0_rp*grvel(3,2))*Res22w - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res22w &           
                  + aux3*(2.0_rp*grvel(2,3))*Res33w - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res33w &              
                  + elmat(4,inode,3,jnode) 
                  
            elmat(5,inode,1,jnode) = (2.0_rp*aux2)*Res13u &
                  + aux3*(2.0_rp*(grvel(3,3) + grvel(1,1)))*Res13u - aux3*((auxG/acvis)*(gpsig(1) + gpsig(3)))*Res13u &
                  + aux3*(2.0_rp*grvel(3,2))*Res12u - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res12u &           
                  + aux3*(2.0_rp*grvel(1,2))*Res23u - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res23u & 
                  + aux3*(2.0_rp*grvel(3,1))*Res11u - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res11u &           
                  + aux3*(2.0_rp*grvel(1,3))*Res33u - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res33u &              
                  + elmat(5,inode,1,jnode)
            elmat(5,inode,2,jnode) = (2.0_rp*aux2)*Res13v &
                  + aux3*(2.0_rp*(grvel(3,3) + grvel(1,1)))*Res13v - aux3*((auxG/acvis)*(gpsig(1) + gpsig(3)))*Res13v &
                  + aux3*(2.0_rp*grvel(3,2))*Res12v - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res12v &           
                  + aux3*(2.0_rp*grvel(1,2))*Res23v - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res23v & 
                  + aux3*(2.0_rp*grvel(3,1))*Res11v - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res11v &           
                  + aux3*(2.0_rp*grvel(1,3))*Res33v - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res33v &              
                  + elmat(5,inode,2,jnode)
            elmat(5,inode,3,jnode) = (2.0_rp*aux2)*Res13w &
                  + aux3*(2.0_rp*(grvel(3,3) + grvel(1,1)))*Res13w - aux3*((auxG/acvis)*(gpsig(1) + gpsig(3)))*Res13w &
                  + aux3*(2.0_rp*grvel(3,2))*Res12w - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res12w &           
                  + aux3*(2.0_rp*grvel(1,2))*Res23w - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res23w & 
                  + aux3*(2.0_rp*grvel(3,1))*Res11w - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res11w &           
                  + aux3*(2.0_rp*grvel(1,3))*Res33w - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res33w &              
                  + elmat(5,inode,3,jnode)
                  
            elmat(6,inode,1,jnode) = (2.0_rp*aux2)*Res12u &
                  + aux3*(2.0_rp*(grvel(2,2) + grvel(1,1)))*Res12u - aux3*((auxG/acvis)*(gpsig(1) + gpsig(2)))*Res12u &
                  + aux3*(2.0_rp*grvel(2,3))*Res13u - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res13u &           
                  + aux3*(2.0_rp*grvel(1,3))*Res23u - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res23u & 
                  + aux3*(2.0_rp*grvel(2,1))*Res11u - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res11u &           
                  + aux3*(2.0_rp*grvel(1,2))*Res22u - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res22u &              
                  + elmat(6,inode,1,jnode)                
            elmat(6,inode,2,jnode) = (2.0_rp*aux2)*Res12v &
                  + aux3*(2.0_rp*(grvel(2,2) + grvel(1,1)))*Res12v - aux3*((auxG/acvis)*(gpsig(1) + gpsig(2)))*Res12v &
                  + aux3*(2.0_rp*grvel(2,3))*Res13v - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res13v &           
                  + aux3*(2.0_rp*grvel(1,3))*Res23v - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res23v & 
                  + aux3*(2.0_rp*grvel(2,1))*Res11v - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res11v &           
                  + aux3*(2.0_rp*grvel(1,2))*Res22v - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res22v &              
                  + elmat(6,inode,2,jnode)
            elmat(6,inode,3,jnode) = (2.0_rp*aux2)*Res12w &
                  + aux3*(2.0_rp*(grvel(2,2) + grvel(1,1)))*Res12w - aux3*((auxG/acvis)*(gpsig(1) + gpsig(2)))*Res12w &
                  + aux3*(2.0_rp*grvel(2,3))*Res13w - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res13w &           
                  + aux3*(2.0_rp*grvel(1,3))*Res23w - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res23w & 
                  + aux3*(2.0_rp*grvel(2,1))*Res11w - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res11w &           
                  + aux3*(2.0_rp*grvel(1,2))*Res22w - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res22w &              
                  + elmat(6,inode,3,jnode)                                   

         end do  
      end do

   end subroutine supm_elmbutEst23d    
   
   subroutine supm_elmrhcEst2(e,auxVE,auxG,auxPTT,tisig,acvis,gpsig,grsig,gpvel,gpadv,grvel &
         ,dvolu,auxtens,elextS,elrhs)         
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxPTT
      real(rp),    intent(in)    :: gpsig(auxtens),grsig(auxtens,e%ndime),tisig,elextS(auxtens) 
      real(rp),    intent(in)    :: dvolu,auxVE,auxG,acvis,gpvel(e%ndime),gpadv(e%pnode),grvel(e%ndime,e%ndime)
      real(rp),    intent(inout) :: elrhs(auxtens,e%mnode)
      integer(ip)                :: inode
      real(rp)                   :: aux2,aux5
      real(rp)                   :: Res11,Res12,Res22,traza
      
      
      traza = (gpsig(1) + gpsig(2))
      
      Res11 = elextS(1) + (auxVE)*((gpvel(1)*grsig(1,1) + gpvel(2)*grsig(1,2)) &
            - 2.0_rp*(grvel(1,1)*gpsig(1) + grvel(1,2)*gpsig(3)) + auxPTT*(auxG/acvis)*(gpsig(1)*gpsig(1) + gpsig(3)*gpsig(3))) &
            + auxVE*(1_ip - auxPTT)*(auxG/acvis)*(traza)*gpsig(1)
      Res12 = elextS(3) + ((gpvel(1)*grsig(3,1) + gpvel(2)*grsig(3,2)) - (grvel(2,1)*gpsig(1) + grvel(1,2)*gpsig(2)) &
            + (auxG/acvis)*(gpsig(1) + gpsig(2))*gpsig(3))*auxVE      
      Res22 = elextS(2) + (auxVE)*((gpvel(1)*grsig(2,1) + gpvel(2)*grsig(2,2)) &
            - 2.0_rp*(grvel(2,1)*gpsig(3) + grvel(2,2)*gpsig(2)) + auxPTT*(auxG/acvis)*(gpsig(3)*gpsig(3) + gpsig(2)*gpsig(2))) &
            + auxVE*(1_ip - auxPTT)*(auxG/acvis)*(traza)*gpsig(2)

      do inode=1,e%pnode      

         aux2=(e%shape(inode,e%igaus)*(-(tisig/(2.0_rp*acvis)))  + (tisig*auxVE)*(gpadv(inode)))*dvolu  
         aux5= (tisig*auxVE)*(e%shape(inode,e%igaus))*dvolu
         
               
         elrhs(1,inode) = aux2*Res11 &
               + aux5*(2.0_rp*grvel(1,1) - auxPTT*(auxG/acvis)*gpsig(1))*Res11 &
               + aux5*grvel(1,2)*(2.0_rp*Res12) - aux5*(auxPTT*(auxG/acvis)*gpsig(3))*Res12 &              
               - aux5*(1_ip - auxPTT)*(auxG/acvis)*traza*Res11 &
               + elrhs(1,inode) 
               
         elrhs(2,inode) = aux2*Res22 &
               + aux5*(2.0_rp*grvel(2,2) - auxPTT*(auxG/acvis)*gpsig(2))*Res22 & 
               + aux5*grvel(2,1)*(2.0_rp*Res12) - aux5*(auxPTT*(auxG/acvis)*gpsig(3))*Res12 &             
               - aux5*(1_ip - auxPTT)*(auxG/acvis)*traza*Res22 &
               + elrhs(2,inode)
               
         elrhs(3,inode) = aux2*(2.0_rp*Res12)  &
               + aux5*(2.0_rp*grvel(2,1) - auxPTT*(auxG/acvis)*gpsig(3))*Res11 &
               + aux5*(2.0_rp*grvel(1,2) - auxPTT*(auxG/acvis)*gpsig(3))*Res22 &
               + aux5*(-auxPTT*(auxG/acvis)*(gpsig(1) + gpsig(2)))*Res12 &
               - aux5*(1_ip - auxPTT)*2.0_rp*(auxG/acvis)*traza*Res12 &
               + elrhs(3,inode)  
      end do

   end subroutine supm_elmrhcEst2   

   
   subroutine supm_elmrhcEst23d(e,auxVE,auxG,auxPTT,tisig,acvis,gpsig,grsig,gpvel,gpadv,grvel &
         ,dvolu,auxtens,elextS,elrhs)         
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxPTT
      real(rp),    intent(in)    :: gpsig(auxtens),grsig(auxtens,e%ndime),tisig,elextS(auxtens) 
      real(rp),    intent(in)    :: dvolu,auxVE,auxG,acvis,gpvel(e%ndime),gpadv(e%pnode),grvel(e%ndime,e%ndime)
      real(rp),    intent(inout) :: elrhs(auxtens,e%mnode)
      integer(ip)                :: inode
      real(rp)                   :: aux2,aux3
      real(rp)                   :: Res11,Res12,Res22,Res13,Res23,Res33,Res21,Res31,Res32
      
      
      Res11 = elextS(1) + (auxVE)*((gpvel(1)*grsig(1,1) + gpvel(2)*grsig(1,2) + gpvel(3)*grsig(1,3)) &
               - 2.0_rp*(grvel(1,1)*gpsig(1) + grvel(1,2)*gpsig(6) + grvel(1,3)*gpsig(5)) &
               + (auxG/acvis)*(gpsig(1)*gpsig(1) + auxPTT*(gpsig(6)*gpsig(6) + gpsig(5)*gpsig(5))))
      
      Res22 = elextS(2) + (auxVE)*((gpvel(1)*grsig(2,1) + gpvel(2)*grsig(2,2) + gpvel(3)*grsig(2,3)) &
               - 2.0_rp*(grvel(2,1)*gpsig(6) + grvel(2,2)*gpsig(2) + grvel(2,3)*gpsig(4)) &
               + (auxG/acvis)*(gpsig(2)*gpsig(2) + auxPTT*(gpsig(6)*gpsig(6) + gpsig(4)*gpsig(4))))               
      
      Res33 = elextS(3) + (auxVE)*((gpvel(1)*grsig(3,1) + gpvel(2)*grsig(3,2) + gpvel(3)*grsig(3,3)) &
               - 2.0_rp*(grvel(3,1)*gpsig(5) + grvel(3,2)*gpsig(4) + grvel(3,3)*gpsig(3)) &
               + (auxG/acvis)*(auxPTT*(gpsig(5)*gpsig(5) + gpsig(4)*gpsig(4)) + gpsig(3)*gpsig(3)))       
      
      Res12 = elextS(6) + (auxVE)*((gpvel(1)*grsig(6,1) + gpvel(2)*grsig(6,2) + gpvel(3)*grsig(6,3)) &
               - (grvel(2,1)*gpsig(1) + grvel(1,2)*gpsig(2) + (grvel(2,2) + grvel(1,1))*gpsig(6) &
               + gpsig(5)*grvel(2,3) + gpsig(4)*grvel(1,3)) &
               + (auxG/acvis)*((gpsig(1) + auxPTT*gpsig(2))*gpsig(6) + auxPTT*gpsig(4)*gpsig(5)))
               
      Res21 = elextS(6) + (auxVE)*((gpvel(1)*grsig(6,1) + gpvel(2)*grsig(6,2) + gpvel(3)*grsig(6,3)) &
               - (grvel(2,1)*gpsig(1) + grvel(1,2)*gpsig(2) + (grvel(2,2) + grvel(1,1))*gpsig(6) &
               + gpsig(5)*grvel(2,3) + gpsig(4)*grvel(1,3)) &
               + (auxG/acvis)*((auxPTT*gpsig(1) + gpsig(2))*gpsig(6) + auxPTT*gpsig(4)*gpsig(5)))               

      Res13 = elextS(5) + (auxVE)*((gpvel(1)*grsig(5,1) + gpvel(2)*grsig(5,2) + gpvel(3)*grsig(5,3)) &
               - (grvel(3,1)*gpsig(1) + grvel(3,2)*gpsig(6) + (grvel(3,3) + grvel(1,1))*gpsig(5) &
               + gpsig(4)*grvel(1,2) + gpsig(3)*grvel(1,3)) &
               + (auxG/acvis)*((gpsig(1) + auxPTT*gpsig(3))*gpsig(5) + auxPTT*gpsig(4)*gpsig(6)))    
               
      Res31 = elextS(5) + (auxVE)*((gpvel(1)*grsig(5,1) + gpvel(2)*grsig(5,2) + gpvel(3)*grsig(5,3)) &
               - (grvel(3,1)*gpsig(1) + grvel(3,2)*gpsig(6) + (grvel(3,3) + grvel(1,1))*gpsig(5) &
               + gpsig(4)*grvel(1,2) + gpsig(3)*grvel(1,3)) &
               + (auxG/acvis)*((auxPTT*gpsig(1) + gpsig(3))*gpsig(5) + auxPTT*gpsig(4)*gpsig(6)))                   
               
      Res23 = elextS(4) + (auxVE)*((gpvel(1)*grsig(4,1) + gpvel(2)*grsig(4,2) + gpvel(3)*grsig(4,3)) &
               - (grvel(3,1)*gpsig(6) + grvel(3,2)*gpsig(2) + (grvel(3,3) + grvel(2,2))*gpsig(4) &
               + gpsig(5)*grvel(2,1) + gpsig(3)*grvel(2,3)) &
               + (auxG/acvis)*((gpsig(2) + auxPTT*gpsig(3))*gpsig(4) + auxPTT*gpsig(6)*gpsig(5)))      
               
      Res32 = elextS(4) + (auxVE)*((gpvel(1)*grsig(4,1) + gpvel(2)*grsig(4,2) + gpvel(3)*grsig(4,3)) &
               - (grvel(3,1)*gpsig(6) + grvel(3,2)*gpsig(2) + (grvel(3,3) + grvel(2,2))*gpsig(4) &
               + gpsig(5)*grvel(2,1) + gpsig(3)*grvel(2,3)) &
               + (auxG/acvis)*((auxPTT*gpsig(2) + gpsig(3))*gpsig(4) + auxPTT*gpsig(6)*gpsig(5)))                   
                     

      do inode=1,e%pnode      

         aux2= (e%shape(inode,e%igaus)*(-(tisig/(2.0_rp*acvis))) + (tisig*auxVE)*gpadv(inode))*dvolu  
         aux3= ((tisig*auxVE)*e%shape(inode,e%igaus))*dvolu      
               
         elrhs(1,inode) = aux2*Res11 &
                  + aux3*(2.0_rp*grvel(1,1))*Res11 - aux3*((auxG/acvis)*gpsig(1))*Res11 &
                  + aux3*(grvel(1,2))*(Res12 + Res21) - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res12 &
                  + aux3*(grvel(1,3))*(Res13 + Res31) - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res13 &   
                  + elrhs(1,inode) 
               
         elrhs(2,inode) =  aux2*Res22 &
                  + aux3*(2.0_rp*grvel(2,2))*Res22 - aux3*((auxG/acvis)*gpsig(2))*Res22 &           
                  + aux3*(grvel(2,1))*(Res12 + Res21) - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res12 & 
                  + aux3*(grvel(2,3))*(Res23 + Res32) - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res23 &                
                  + elrhs(2,inode)
               
         elrhs(3,inode) =  aux2*Res33 &
                  + aux3*(2.0_rp*grvel(3,3))*Res33 - aux3*((auxG/acvis)*gpsig(3))*Res33 &           
                  + aux3*(grvel(3,1))*(Res13 + Res31) - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res13 & 
                  + aux3*(grvel(3,2))*(Res23 + Res32) - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res23 &                   
                  + elrhs(3,inode)
                  
         elrhs(4,inode) = aux2*(Res23 + Res32) &
                  + aux3*(grvel(3,3) + grvel(2,2))*(Res23 + Res32) - aux3*((auxG/acvis)*(gpsig(2)*Res32 + gpsig(3)*Res23)) &
                  + aux3*(grvel(3,1))*(Res12 + Res21) - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res12 &           
                  + aux3*(grvel(2,1))*(Res13 + Res31) - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res13 & 
                  + aux3*(2.0_rp*grvel(3,2))*Res22 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res22 &           
                  + aux3*(2.0_rp*grvel(2,3))*Res33 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res33 &              
                  + elrhs(4,inode)
                  
         elrhs(5,inode) = aux2*(Res13 + Res31) &
                  + aux3*(grvel(3,3) + grvel(1,1))*(Res13 + Res31) - aux3*((auxG/acvis)*(gpsig(1)*Res31 + gpsig(3)*Res13)) &
                  + aux3*(grvel(3,2))*(Res12 + Res21) - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res12 &           
                  + aux3*(grvel(1,2))*(Res23 + Res32) - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res23 & 
                  + aux3*(2.0_rp*grvel(3,1))*Res11 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res11 &           
                  + aux3*(2.0_rp*grvel(1,3))*Res33 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res33 &            
                  + elrhs(5,inode)
                 
         elrhs(6,inode) = aux2*(Res12 + Res21) &
                  + aux3*(grvel(2,2) + grvel(1,1))*(Res12 + Res21) - aux3*((auxG/acvis)*(gpsig(1)*Res21 + gpsig(2)*Res12)) &
                  + aux3*(grvel(2,3))*(Res13 + Res31) - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res13 &           
                  + aux3*(grvel(1,3))*(Res23 + Res32) - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res23 & 
                  + aux3*(2.0_rp*grvel(2,1))*Res11 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res11 &           
                  + aux3*(2.0_rp*grvel(1,2))*Res22 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res22 &          
                  + elrhs(6,inode)                  
  
      end do

   end subroutine supm_elmrhcEst23d   
   
   subroutine supm_elmbsvEst2(e,beta,auxVE,auxG,auxPTT,acvis,tisig,dtinv,gpadv,gpsig,dvolu,auxtens,grvel,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in constitutive equation
    !    (-(1/2eta)*tau + auxVE*a*grad(tau),R_constituitva)
    !   +(auxVE*(2*grad(a)*tau -(auxG/eta)*sigma*tau),R_constituitva)
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxPTT
      real(rp),    intent(in)    :: acvis,auxVE,beta,auxG,dvolu,gpadv(e%pnode),gpsig(auxtens)
      real(rp),    intent(in)    :: grvel(e%ndime,e%ndime),tisig,dtinv     
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode,auxstab,aux1
      real(rp)                   :: aux2
      real(rp)                   :: Res11s11,Res11s12,Res11s22,Res12s11,Res12s12,Res12S22, &
                                    Res22s11,Res22s12,Res22S22,traza      
                            
      aux2 = (tisig*dvolu)
      
      traza= (gpsig(1) + gpsig(2))
 
      do jnode=1,e%pnode      
      
         Res11s11 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode) - 2.0_rp*grvel(1,1)*e%shape(jnode,e%igaus)) &
               + auxVE*(auxPTT*(auxG/acvis))*(2.0_rp*gpsig(1))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus) &
               + auxVE*(1_ip - auxPTT)*(auxG/acvis)*(traza + gpsig(1))*e%shape(jnode,e%igaus)               
         Res11s12 = (auxVE)*(-2.0_rp)*grvel(1,2)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*(2.0_rp*gpsig(3))*e%shape(jnode,e%igaus)
         Res11s22 = auxVE*(1_ip - auxPTT)*(auxG/acvis)*(gpsig(1))*e%shape(jnode,e%igaus)
         
         Res12s11 = -(auxVE)*grvel(2,1)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(3)*e%shape(jnode,e%igaus)
         Res12s12 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode)) &
               + auxVE*(auxG/acvis)*(gpsig(1) + gpsig(2))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus) 
         Res12s22 = -(auxVE)*grvel(1,2)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(3)*e%shape(jnode,e%igaus) 
         
         Res22s11 = auxVE*(1_ip - auxPTT)*(auxG/acvis)*(gpsig(2))*e%shape(jnode,e%igaus)
         Res22s12 = (auxVE)*(-2.0_rp)*grvel(2,1)*e%shape(jnode,e%igaus) + auxVE*(auxPTT*(auxG/acvis))*(2.0_rp*gpsig(3))*e%shape(jnode,e%igaus) 
         Res22s22 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode) - 2.0_rp*grvel(2,2)*e%shape(jnode,e%igaus)) &
               + auxVE*(auxPTT*(auxG/acvis))*(2.0_rp*gpsig(2))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus) &
               + auxVE*(1_ip - auxPTT)*(auxG/acvis)*(traza + gpsig(2))*e%shape(jnode,e%igaus)        
               
         do inode=1,e%pnode                 
             
            elmat(1,inode,1,jnode) = -(aux2*e%cartd(1,inode))*Res11s11 - aux2*(e%cartd(2,inode)*Res12s11) &
                  + elmat(1,inode,1,jnode)                  
            elmat(1,inode,2,jnode) = -(aux2*e%cartd(1,inode))*Res11s22 - aux2*(e%cartd(2,inode)*Res12s22) &      
                  + elmat(1,inode,2,jnode)                  
            elmat(1,inode,3,jnode) = -(aux2*e%cartd(1,inode))*Res11s12 - aux2*(e%cartd(2,inode)*Res12s12) &             
                  + elmat(1,inode,3,jnode)
            
            elmat(2,inode,1,jnode) = -(aux2*e%cartd(2,inode))*Res22s11 - aux2*(e%cartd(1,inode)*Res12s11) &               
                  + elmat(2,inode,1,jnode)            
            elmat(2,inode,2,jnode) = -(aux2*e%cartd(2,inode))*Res22s22 - aux2*(e%cartd(1,inode)*Res12s22) &             
                  + elmat(2,inode,2,jnode)                  
            elmat(2,inode,3,jnode) = -(aux2*e%cartd(2,inode))*Res22s12 - aux2*(e%cartd(1,inode)*Res12s12) &            
                  + elmat(2,inode,3,jnode)                             

         end do
      end do   

   end subroutine supm_elmbsvEst2
   
   subroutine supm_elmbsvEst23d(e,beta,auxVE,auxG,auxPTT,acvis,tisig,dtinv,gpadv,gpsig,dvolu,auxtens,grvel,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in constitutive equation
    !    (-(1/2eta)*tau + auxVE*a*grad(tau),R_constituitva)
    !   +(auxVE*(2*grad(a)*tau -(auxG/eta)*sigma*tau),R_constituitva)
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxPTT
      real(rp),    intent(in)    :: acvis,auxVE,beta,auxG,dvolu,gpadv(e%pnode),gpsig(auxtens)
      real(rp),    intent(in)    :: grvel(e%ndime,e%ndime),tisig,dtinv     
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode,auxstab,aux1
      real(rp)                   :: aux2
      real(rp)                   :: Res11s11,Res11s12,Res11s13,Res11s22,Res11s23,Res11s33, &
                                    Res22s11,Res22s12,Res22s13,Res22s22,Res22s23,Res22s33, &
                                    Res33s11,Res33s12,Res33s13,Res33s22,Res33s23,Res33s33, &
                                    Res23s11,Res23s12,Res23s13,Res23s22,Res23s23,Res23s33, &
                                    Res13s11,Res13s12,Res13s13,Res13s22,Res13s23,Res13s33, &
                                    Res12s11,Res12s12,Res12s13,Res12s22,Res12s23,Res12s33
                            
      aux2 = (tisig*dvolu)
      
      do jnode=1,e%pnode    
              
         Res11s11 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode) - 2.0_rp*grvel(1,1)*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(2.0_rp*gpsig(1))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)
         Res11s12 = auxVE*(-2.0_rp)*grvel(1,2)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*(2.0_rp*gpsig(6))*e%shape(jnode,e%igaus)
         Res11s13 = auxVE*(-2.0_rp)*grvel(1,3)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*(2.0_rp*gpsig(5))*e%shape(jnode,e%igaus)
         Res11s22 = 0.0_rp
         Res11s23 = 0.0_rp
         Res11s33 = 0.0_rp
         
         Res22s11 = 0.0_rp
         Res22s12 = auxVE*(-2.0_rp)*grvel(2,1)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*(2.0_rp*gpsig(6))*e%shape(jnode,e%igaus)
         Res22s13 = 0.0_rp         
         Res22s22 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode) - 2.0_rp*grvel(2,2)*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(2.0_rp*gpsig(2))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)   
         Res22s23 = auxVE*(-2.0_rp)*grvel(2,3)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*(2.0_rp*gpsig(4))*e%shape(jnode,e%igaus)
         Res22s33 = 0.0_rp
         
         Res33s11 = 0.0_rp
         Res33s12 = 0.0_rp
         Res33s13 = auxVE*(-2.0_rp)*grvel(3,1)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*(2.0_rp*gpsig(5))*e%shape(jnode,e%igaus)
         Res33s22 = 0.0_rp
         Res33s23 = auxVE*(-2.0_rp)*grvel(3,2)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*(2.0_rp*gpsig(4))*e%shape(jnode,e%igaus)
         Res33s33 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode) - 2.0_rp*grvel(3,3)*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(2.0_rp*gpsig(3))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)
            
         Res12s11 = -auxVE*grvel(2,1)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(6)*e%shape(jnode,e%igaus)
         Res12s12 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode)) &
               - auxVE*((grvel(2,2) + grvel(1,1))*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(gpsig(1) + gpsig(2))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)
         Res12s13 = -auxVE*grvel(2,3)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(4)*e%shape(jnode,e%igaus)
         Res12s22 = -auxVE*grvel(1,2)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(6)*e%shape(jnode,e%igaus)          
         Res12s23 = -auxVE*grvel(1,3)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(5)*e%shape(jnode,e%igaus)
         Res12s33 = 0.0_rp
         
         Res13s11 = -auxVE*grvel(3,1)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(5)*e%shape(jnode,e%igaus)
         Res13s12 = -auxVE*grvel(3,2)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(4)*e%shape(jnode,e%igaus)
         Res13s13 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode)) &
               - auxVE*((grvel(3,3) + grvel(1,1))*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(gpsig(1) + gpsig(3))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)
         Res13s22 = 0.0_rp        
         Res13s23 = -auxVE*grvel(1,2)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(6)*e%shape(jnode,e%igaus)
         Res13s33 = -auxVE*grvel(1,3)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(5)*e%shape(jnode,e%igaus)         

         Res23s11 = 0.0_rp
         Res23s12 = -auxVE*grvel(3,1)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(5)*e%shape(jnode,e%igaus)
         Res23s13 = -auxVE*grvel(2,1)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(6)*e%shape(jnode,e%igaus)
         Res23s22 = -auxVE*grvel(3,2)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(4)*e%shape(jnode,e%igaus)         
         Res23s23 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(gpadv(jnode)) &
               - auxVE*((grvel(3,3) + grvel(2,2))*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(gpsig(2) + gpsig(3))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)       
         Res23s33 = -auxVE*grvel(2,3)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(4)*e%shape(jnode,e%igaus)        
               
         do inode=1,e%pnode                 
             
            elmat(1,inode,1,jnode) = -aux2*(e%cartd(1,inode)*Res11s11 + e%cartd(2,inode)*Res12s11 + e%cartd(3,inode)*Res13s11) &
                  + elmat(1,inode,1,jnode)                  
            elmat(1,inode,2,jnode) = -aux2*(e%cartd(1,inode)*Res11s22 + e%cartd(2,inode)*Res12s22 + e%cartd(3,inode)*Res13s22) &      
                  + elmat(1,inode,2,jnode)                  
            elmat(1,inode,3,jnode) = -aux2*(e%cartd(1,inode)*Res11s33 + e%cartd(2,inode)*Res12s33 + e%cartd(3,inode)*Res13s33) &             
                  + elmat(1,inode,3,jnode)
            elmat(1,inode,4,jnode) = -aux2*(e%cartd(1,inode)*Res11s23 + e%cartd(2,inode)*Res12s23 + e%cartd(3,inode)*Res13s23) &
                  + elmat(1,inode,4,jnode)                  
            elmat(1,inode,5,jnode) = -aux2*(e%cartd(1,inode)*Res11s13 + e%cartd(2,inode)*Res12s13 + e%cartd(3,inode)*Res13s13) &      
                  + elmat(1,inode,5,jnode)                  
            elmat(1,inode,6,jnode) = -aux2*(e%cartd(1,inode)*Res11s12 + e%cartd(2,inode)*Res12s12 + e%cartd(3,inode)*Res13s12) &             
                  + elmat(1,inode,6,jnode)                  
            
            elmat(2,inode,1,jnode) = -aux2*(e%cartd(1,inode)*Res12s11 + e%cartd(2,inode)*Res22s11 + e%cartd(3,inode)*Res23s11) &               
                  + elmat(2,inode,1,jnode)            
            elmat(2,inode,2,jnode) = -aux2*(e%cartd(1,inode)*Res12s22 + e%cartd(2,inode)*Res22s22 + e%cartd(3,inode)*Res23s22) &      
                  + elmat(2,inode,2,jnode)                  
            elmat(2,inode,3,jnode) = -aux2*(e%cartd(1,inode)*Res12s33 + e%cartd(2,inode)*Res22s33 + e%cartd(3,inode)*Res23s33) &             
                  + elmat(2,inode,3,jnode)
            elmat(2,inode,4,jnode) = -aux2*(e%cartd(1,inode)*Res12s23 + e%cartd(2,inode)*Res22s23 + e%cartd(3,inode)*Res23s23) &
                  + elmat(2,inode,4,jnode)                  
            elmat(2,inode,5,jnode) = -aux2*(e%cartd(1,inode)*Res12s13 + e%cartd(2,inode)*Res22s13 + e%cartd(3,inode)*Res23s13) &      
                  + elmat(2,inode,5,jnode)                  
            elmat(2,inode,6,jnode) = -aux2*(e%cartd(1,inode)*Res12s12 + e%cartd(2,inode)*Res22s12 + e%cartd(3,inode)*Res23s12) &             
                  + elmat(2,inode,6,jnode)
                  
            elmat(3,inode,1,jnode) = -aux2*(e%cartd(1,inode)*Res13s11 + e%cartd(2,inode)*Res23s11 + e%cartd(3,inode)*Res33s11) &               
                  + elmat(3,inode,1,jnode)            
            elmat(3,inode,2,jnode) = -aux2*(e%cartd(1,inode)*Res13s22 + e%cartd(2,inode)*Res23s22 + e%cartd(3,inode)*Res33s22) &      
                  + elmat(3,inode,2,jnode)                  
            elmat(3,inode,3,jnode) = -aux2*(e%cartd(1,inode)*Res13s33 + e%cartd(2,inode)*Res23s33 + e%cartd(3,inode)*Res33s33) &             
                  + elmat(3,inode,3,jnode)
            elmat(3,inode,4,jnode) = -aux2*(e%cartd(1,inode)*Res13s23 + e%cartd(2,inode)*Res23s23 + e%cartd(3,inode)*Res33s23) &
                  + elmat(3,inode,4,jnode)                  
            elmat(3,inode,5,jnode) = -aux2*(e%cartd(1,inode)*Res13s13 + e%cartd(2,inode)*Res23s13 + e%cartd(3,inode)*Res33s13) &      
                  + elmat(3,inode,5,jnode)                  
            elmat(3,inode,6,jnode) = -aux2*(e%cartd(1,inode)*Res13s12 + e%cartd(2,inode)*Res23s12 + e%cartd(3,inode)*Res33s12) &             
                  + elmat(3,inode,6,jnode)                  

         end do
      end do   

   end subroutine supm_elmbsvEst23d   
   
   subroutine supm_elmbuvEst2(e,beta,auxVE,tisig,gpsig,dvolu,auxtens,grvel,grsig,elmat) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: auxVE,dvolu,gpsig(auxtens),grsig(auxtens,e%ndime),tisig
      real(rp),    intent(in)    :: grvel(e%ndime,e%ndime),beta
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux2
      real(rp)                   :: Res11u,Res11v,Res12u,Res12v,Res22u,Res22v
      
      
      aux2=(tisig*dvolu)
      
      do jnode=1,e%pnode          
      
         Res11u = -(1.0_rp - beta)*e%cartd(1,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(1,1) - 2.0_rp*(gpsig(1)*e%cartd(1,jnode) + gpsig(3)*e%cartd(2,jnode)))
         Res11v = auxVE*(e%shape(jnode,e%igaus)*grsig(1,2))
         
         Res12u = -((1.0_rp - beta)/2.0_rp)*e%cartd(2,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(3,1) - (gpsig(2)*e%cartd(2,jnode)))
         Res12v = -((1.0_rp - beta)/2.0_rp)*e%cartd(1,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(3,2) - (gpsig(1)*e%cartd(1,jnode)))
         
         Res22u = auxVE*(e%shape(jnode,e%igaus)*grsig(2,1))
         Res22v = -(1.0_rp - beta)*e%cartd(2,jnode) & 
               + auxVE*(e%shape(jnode,e%igaus)*grsig(2,2) - 2.0_rp*(gpsig(3)*e%cartd(1,jnode) + gpsig(2)*e%cartd(2,jnode)))                 
  
         
         do inode=1,e%pnode        
                                 
            elmat(1,inode,1,jnode) = -aux2*e%cartd(1,inode)*Res11u - aux2*(e%cartd(2,inode)*Res12u) &
                  + elmat(1,inode,1,jnode)                  
            elmat(1,inode,2,jnode) = -aux2*e%cartd(1,inode)*Res11v - aux2*(e%cartd(2,inode)*Res12v) &    
                  + elmat(1,inode,2,jnode)
            
            elmat(2,inode,1,jnode) = -aux2*e%cartd(2,inode)*Res22u - aux2*(e%cartd(1,inode)*Res12u) &              
                  + elmat(2,inode,1,jnode)            
            elmat(2,inode,2,jnode) = -aux2*e%cartd(2,inode)*Res22v - aux2*(e%cartd(1,inode)*Res12v) & 
                  + elmat(2,inode,2,jnode)                                           

         end do  
      end do

   end subroutine supm_elmbuvEst2 
   
   subroutine supm_elmbuvEst23d(e,beta,auxVE,tisig,gpsig,dvolu,auxtens,grvel,grsig,elmat) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: auxVE,dvolu,gpsig(auxtens),grsig(auxtens,e%ndime),tisig
      real(rp),    intent(in)    :: grvel(e%ndime,e%ndime),beta
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux2
      real(rp)                   :: Res11u,Res11v,Res11w,Res12u,Res12v,Res12w,Res22u,Res22v,Res22w, &
                                    Res13u,Res13v,Res13w,Res23u,Res23v,Res23w,Res33u,Res33v,Res33w
      
      aux2=(tisig*dvolu)
      
      do jnode=1,e%pnode          
      
         Res11u = -(1.0_rp - beta)*e%cartd(1,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(1,1) - 2.0_rp*(gpsig(1)*e%cartd(1,jnode) + gpsig(6)*e%cartd(2,jnode) &
               + gpsig(5)*e%cartd(3,jnode)))
         Res11v = auxVE*(e%shape(jnode,e%igaus)*grsig(1,2))
         Res11w = auxVE*(e%shape(jnode,e%igaus)*grsig(1,3))
         
         Res22u = auxVE*(e%shape(jnode,e%igaus)*grsig(2,1))
         Res22v = -(1.0_rp - beta)*e%cartd(2,jnode) & 
               + auxVE*(e%shape(jnode,e%igaus)*grsig(2,2) - 2.0_rp*(gpsig(6)*e%cartd(1,jnode) + gpsig(2)*e%cartd(2,jnode) &
               + gpsig(4)*e%cartd(3,jnode)))             
         Res22w = auxVE*(e%shape(jnode,e%igaus)*grsig(2,3))
         
         Res33u = auxVE*(e%shape(jnode,e%igaus)*grsig(3,1))
         Res33v = auxVE*(e%shape(jnode,e%igaus)*grsig(3,2))
         Res33w = -(1.0_rp - beta)*e%cartd(3,jnode) & 
               + auxVE*(e%shape(jnode,e%igaus)*grsig(3,3) - 2.0_rp*(gpsig(5)*e%cartd(1,jnode) + gpsig(4)*e%cartd(2,jnode) &
               + gpsig(3)*e%cartd(3,jnode)))     
         
         Res12u = -((1.0_rp - beta)/2.0_rp)*e%cartd(2,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(6,1) - (gpsig(6)*e%cartd(1,jnode) + gpsig(2)*e%cartd(2,jnode) &
               + gpsig(4)*e%cartd(3,jnode)))
         Res12v = -((1.0_rp - beta)/2.0_rp)*e%cartd(1,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(6,2) - (gpsig(1)*e%cartd(1,jnode) + gpsig(6)*e%cartd(2,jnode) &
               + gpsig(5)*e%cartd(3,jnode)))
         Res12w = auxVE*(e%shape(jnode,e%igaus)*grsig(6,3))
         
         Res13u = -((1.0_rp - beta)/2.0_rp)*e%cartd(3,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(5,1) - (gpsig(5)*e%cartd(1,jnode) + gpsig(4)*e%cartd(2,jnode) &
               + gpsig(3)*e%cartd(3,jnode)))
         Res13v = auxVE*(e%shape(jnode,e%igaus)*grsig(5,2))
         Res13w = -((1.0_rp - beta)/2.0_rp)*e%cartd(1,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(5,3) - (gpsig(1)*e%cartd(1,jnode) + gpsig(6)*e%cartd(2,jnode) &
               + gpsig(5)*e%cartd(3,jnode)))
               
         Res23u = auxVE*(e%shape(jnode,e%igaus)*grsig(4,1))
         Res23v = -((1.0_rp - beta)/2.0_rp)*e%cartd(3,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(4,2) - (gpsig(5)*e%cartd(1,jnode) + gpsig(4)*e%cartd(2,jnode) &
               + gpsig(3)*e%cartd(3,jnode)))
         Res23w = -((1.0_rp - beta)/2.0_rp)*e%cartd(2,jnode) &
               + auxVE*(e%shape(jnode,e%igaus)*grsig(4,3) - (gpsig(6)*e%cartd(1,jnode) + gpsig(2)*e%cartd(2,jnode) &
               + gpsig(4)*e%cartd(3,jnode)))
               
         do inode=1,e%pnode        
                                 
            elmat(1,inode,1,jnode) = -aux2*(e%cartd(1,inode)*Res11u + e%cartd(2,inode)*Res12u + e%cartd(3,inode)*Res13u) &
                  + elmat(1,inode,1,jnode)                  
            elmat(1,inode,2,jnode) = -aux2*(e%cartd(1,inode)*Res11v + e%cartd(2,inode)*Res12v + e%cartd(3,inode)*Res13v) &      
                  + elmat(1,inode,2,jnode)                  
            elmat(1,inode,3,jnode) = -aux2*(e%cartd(1,inode)*Res11w + e%cartd(2,inode)*Res12w + e%cartd(3,inode)*Res13w) &             
                  + elmat(1,inode,3,jnode)                 
            
            elmat(2,inode,1,jnode) = -aux2*(e%cartd(1,inode)*Res12u + e%cartd(2,inode)*Res22u + e%cartd(3,inode)*Res23u) &               
                  + elmat(2,inode,1,jnode)            
            elmat(2,inode,2,jnode) = -aux2*(e%cartd(1,inode)*Res12v + e%cartd(2,inode)*Res22v + e%cartd(3,inode)*Res23v) &      
                  + elmat(2,inode,2,jnode)                  
            elmat(2,inode,3,jnode) = -aux2*(e%cartd(1,inode)*Res12w + e%cartd(2,inode)*Res22w + e%cartd(3,inode)*Res23w) &             
                  + elmat(2,inode,3,jnode)
                  
            elmat(3,inode,1,jnode) = -aux2*(e%cartd(1,inode)*Res13u + e%cartd(2,inode)*Res23u + e%cartd(3,inode)*Res33u) &               
                  + elmat(3,inode,1,jnode)            
            elmat(3,inode,2,jnode) = -aux2*(e%cartd(1,inode)*Res13v + e%cartd(2,inode)*Res23v + e%cartd(3,inode)*Res33v) &      
                  + elmat(3,inode,2,jnode)                  
            elmat(3,inode,3,jnode) = -aux2*(e%cartd(1,inode)*Res13w + e%cartd(2,inode)*Res23w + e%cartd(3,inode)*Res33w) &             
                  + elmat(3,inode,3,jnode)                                        

         end do  
      end do

   end subroutine supm_elmbuvEst23d    
   
   subroutine supm_elmrhuEst2(e,beta,auxVE,auxG,auxPTT,tisig,acvis,gpsig,grsig,gpvel,grvel,dvolu,auxtens,elextS,elrhs) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxPTT
      real(rp),    intent(in)    :: gpsig(auxtens),grsig(auxtens,e%ndime),tisig,beta
      real(rp),    intent(in)    :: dvolu,auxVE,auxG,acvis,gpvel(e%ndime),grvel(e%ndime,e%ndime),elextS(auxtens)
      real(rp),    intent(inout) :: elrhs(e%ndime,e%mnode)
      integer(ip)                :: inode,aux1,auxstab,aux3,aux
      real(rp)                   :: aux2
      real(rp)                   :: Res11,Res12,Res22,traza
      
      aux2=(tisig)*dvolu      
      traza = (gpsig(1) + gpsig(2))
      
      Res11 = elextS(1) + (auxVE)*((gpvel(1)*grsig(1,1) + gpvel(2)*grsig(1,2)) &
            - 2.0_rp*(grvel(1,1)*gpsig(1) + grvel(1,2)*gpsig(3)) + auxPTT*(auxG/acvis)*(gpsig(1)*gpsig(1) + gpsig(3)*gpsig(3))) &
            + auxVE*(1_ip - auxPTT)*(auxG/acvis)*(traza)*gpsig(1)
      Res12 = elextS(3) + ((gpvel(1)*grsig(3,1) + gpvel(2)*grsig(3,2)) - (grvel(2,1)*gpsig(1) + grvel(1,2)*gpsig(2)) &
            + (auxG/acvis)*(gpsig(1) + gpsig(2))*gpsig(3))*auxVE      
      Res22 = elextS(2) + (auxVE)*((gpvel(1)*grsig(2,1) + gpvel(2)*grsig(2,2)) &
            - 2.0_rp*(grvel(2,1)*gpsig(3) + grvel(2,2)*gpsig(2)) + auxPTT*(auxG/acvis)*(gpsig(3)*gpsig(3) + gpsig(2)*gpsig(2))) &
            + auxVE*(1_ip - auxPTT)*(auxG/acvis)*(traza)*gpsig(2)            

      do inode=1,e%pnode   
                           
         elrhs(1,inode) = -e%cartd(1,inode)*aux2*(Res11) - e%cartd(2,inode)*aux2*(Res12) &
               + elrhs(1,inode)               
         elrhs(2,inode) = -e%cartd(2,inode)*aux2*(Res22) - e%cartd(1,inode)*aux2*(Res12) &   
               + elrhs(2,inode)  
      end do

   end subroutine supm_elmrhuEst2 
   
   subroutine supm_elmrhuEst23d(e,beta,auxVE,auxG,auxPTT,tisig,acvis,gpsig,grsig,gpvel,grvel,dvolu,auxtens,elextS,elrhs) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxPTT
      real(rp),    intent(in)    :: gpsig(auxtens),grsig(auxtens,e%ndime),tisig,beta
      real(rp),    intent(in)    :: dvolu,auxVE,auxG,acvis,gpvel(e%ndime),grvel(e%ndime,e%ndime),elextS(auxtens)
      real(rp),    intent(inout) :: elrhs(e%ndime,e%mnode)
      integer(ip)                :: inode,aux1,auxstab,aux3,aux
      real(rp)                   :: aux2
      real(rp)                   :: Res11,Res12,Res22,Res13,Res23,Res33
      
      aux2=(tisig)*dvolu
               
      Res11 = elextS(1) + auxVE*((gpvel(1)*grsig(1,1) + gpvel(2)*grsig(1,2) + gpvel(3)*grsig(1,3)) &
               - 2.0_rp*(grvel(1,1)*gpsig(1) + grvel(1,2)*gpsig(6) + grvel(1,3)*gpsig(5)) &
               + (auxG/acvis)*(gpsig(1)*gpsig(1) + gpsig(6)*gpsig(6) + gpsig(5)*gpsig(5)))
      
      Res22 = elextS(2) + auxVE*((gpvel(1)*grsig(2,1) + gpvel(2)*grsig(2,2) + gpvel(3)*grsig(2,3)) &
               - 2.0_rp*(grvel(2,1)*gpsig(6) + grvel(2,2)*gpsig(2) + grvel(2,3)*gpsig(4)) &
               + (auxG/acvis)*(gpsig(2)*gpsig(2) + gpsig(6)*gpsig(6) + gpsig(4)*gpsig(4)))               
      
      Res33 = elextS(3) + auxVE*((gpvel(1)*grsig(3,1) + gpvel(2)*grsig(3,2) + gpvel(3)*grsig(3,3)) &
               - 2.0_rp*(grvel(3,1)*gpsig(5) + grvel(3,2)*gpsig(4) + grvel(3,3)*gpsig(3)) &
               + (auxG/acvis)*(gpsig(5)*gpsig(5) + gpsig(4)*gpsig(4) + gpsig(3)*gpsig(3)))       
      
      Res12 = elextS(6) + auxVE*((gpvel(1)*grsig(6,1) + gpvel(2)*grsig(6,2) + gpvel(3)*grsig(6,3)) &
               - (grvel(2,1)*gpsig(1) + grvel(1,2)*gpsig(2) + (grvel(2,2) + grvel(1,1))*gpsig(6) &
               + gpsig(5)*grvel(2,3) + gpsig(4)*grvel(1,3)) &
               + (auxG/acvis)*((gpsig(1) + gpsig(2))*gpsig(6) + gpsig(4)*gpsig(5)))

      Res13 = elextS(5) + auxVE*((gpvel(1)*grsig(5,1) + gpvel(2)*grsig(5,2) + gpvel(3)*grsig(5,3)) &
               - (grvel(3,1)*gpsig(1) + grvel(3,2)*gpsig(6) + (grvel(3,3) + grvel(1,1))*gpsig(5) &
               + gpsig(4)*grvel(1,2) + gpsig(3)*grvel(1,3)) &
               + (auxG/acvis)*((gpsig(1) + gpsig(3))*gpsig(5) + gpsig(4)*gpsig(6)))    
               
      Res23 = elextS(4) + auxVE*((gpvel(1)*grsig(4,1) + gpvel(2)*grsig(4,2) + gpvel(3)*grsig(4,3)) &
               - (grvel(3,1)*gpsig(6) + grvel(3,2)*gpsig(2) + (grvel(3,3) + grvel(2,2))*gpsig(4) &
               + gpsig(5)*grvel(2,1) + gpsig(3)*grvel(2,3)) &
               + (auxG/acvis)*((gpsig(2) + gpsig(3))*gpsig(4) + gpsig(6)*gpsig(5)))   

      do inode=1,e%pnode   
                           
         elrhs(1,inode) = -aux2*(e%cartd(1,inode)*Res11 + e%cartd(2,inode)*Res12 + e%cartd(3,inode)*Res13) &
               + elrhs(1,inode)               
         elrhs(2,inode) = -aux2*(e%cartd(1,inode)*Res12 + e%cartd(2,inode)*Res22 + e%cartd(3,inode)*Res23) &   
               + elrhs(2,inode)
         elrhs(3,inode) = -aux2*(e%cartd(1,inode)*Res13 + e%cartd(2,inode)*Res23 + e%cartd(3,inode)*Res33) &   
               + elrhs(3,inode)                
               
      end do

   end subroutine supm_elmrhuEst23d     
   
   !--------------------------------------------------------------------------------------------------------------------
   !Split OSS
   
   subroutine supm_elmrhu_splitoss(e,acden,timom,dvolu,gpconv,gpadv,auxoss,elrhs) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxoss
      real(rp),    intent(in)    :: gpconv(e%ndime),timom,acden,dvolu,gpadv(e%pnode)
      real(rp),    intent(inout) :: elrhs(e%ndime,e%mnode)
      integer(ip)                :: aux1,inode
      real(rp)                   :: aux2,aux3
      
      aux1=(1_ip - auxoss)
      aux2=((timom)*acden*dvolu)*aux1               

      do inode=1,e%pnode
      
         aux3=gpadv(inode)*aux2
                           
         elrhs(1,inode) = aux3*acden*gpconv(1) + elrhs(1,inode)               
         elrhs(2,inode) = aux3*acden*gpconv(2) + elrhs(2,inode)  
      end do

   end subroutine supm_elmrhu_splitoss 
   
   subroutine supm_elmrhu_splitoss3d(e,acden,timom,dvolu,gpconv,gpadv,auxoss,elrhs) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxoss
      real(rp),    intent(in)    :: gpconv(e%ndime),timom,acden,dvolu,gpadv(e%pnode)
      real(rp),    intent(inout) :: elrhs(e%ndime,e%mnode)
      integer(ip)                :: aux1,inode
      real(rp)                   :: aux2,aux3
      
      aux1=(1_ip - auxoss)
      aux2=((timom)*acden*dvolu)*aux1               

      do inode=1,e%pnode
      
         aux3=gpadv(inode)*aux2
                           
         elrhs(1,inode) = aux3*acden*gpconv(1) + elrhs(1,inode)               
         elrhs(2,inode) = aux3*acden*gpconv(2) + elrhs(2,inode)
         elrhs(3,inode) = aux3*acden*gpconv(3) + elrhs(3,inode)
         
      end do

   end subroutine supm_elmrhu_splitoss3d    
   
   
   subroutine supm_laplatovector(e,acvis,beta,elvel,gplapl)
      implicit none
      class(FiniteElement) :: e
      real(rp) :: acvis,elvel(e%ndime,e%pnode),beta,gplapl(e%ndime)      
      integer(ip) :: inode,idime
      real(rp) :: aux1(e%pnode)
      
      
      do inode = 1,e%pnode
         aux1(inode) = sum(e%hessi(1:e%ndime,inode))
      enddo   
      do idime = 1,e%ndime                              ! Contribution from the laplacian term
         gplapl(idime) = gplapl(idime) -  (1.0_rp*beta*acvis)*dot_product(aux1,elvel(idime,1:e%pnode))
      end do
   
   end subroutine      
   
   subroutine supm_elmrhu_splitossNonLinear(e,acvis,beta,timom,dvolu,gplapl,auxoss,elrhs) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for OSS
    !+ tau1*(rho*a*grad(v), resid_momentum)+tau2(div(tau),resid_continuity)-tau3(grad_sym(v),resid_constitutive)
    !
    !-----------------------------------------------------------------------
   use typre
   implicit none

      class(FiniteElement)        :: e
      integer(ip), intent(in)    :: auxoss
      real(rp),    intent(in)    :: gplapl(e%ndime),acvis,beta
      real(rp),    intent(in)    :: timom,dvolu
      real(rp),    intent(inout) :: elrhs(e%ndime,e%mnode)
      integer(ip)                :: inode,idime
      integer(ip)                :: aux1
      real(rp)                   :: aux,aux2,tmp2,aux3

      aux1= 0.0_rp !(1_ip - auxoss)
      
      do inode=1,e%pnode

         aux = aux1*(timom*((beta*acvis)*(e%hessi(1,inode) + e%hessi(2,inode)))*dvolu)

         elrhs(1,inode) = aux*gplapl(1) + elrhs(1,inode)
         elrhs(2,inode) = aux*gplapl(2) + elrhs(2,inode) 
         
      end do

   end subroutine supm_elmrhu_splitossNonLinear 
   
   subroutine supm_elmrhu_splitossNonLinear3d(e,acvis,beta,timom,dvolu,gplapl,auxoss,elrhs) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for OSS
    !+ tau1*(rho*a*grad(v), resid_momentum)+tau2(div(tau),resid_continuity)-tau3(grad_sym(v),resid_constitutive)
    !
    !-----------------------------------------------------------------------
   use typre
   implicit none

      class(FiniteElement)        :: e
      integer(ip), intent(in)    :: auxoss
      real(rp),    intent(in)    :: gplapl(e%ndime),acvis,beta
      real(rp),    intent(in)    :: timom,dvolu
      real(rp),    intent(inout) :: elrhs(e%ndime,e%mnode)
      integer(ip)                :: inode,idime
      integer(ip)                :: aux1
      real(rp)                   :: aux,aux2,tmp2,aux3

      aux1= 0.0_rp !(1_ip - auxoss)
      
      do inode=1,e%pnode

         aux = aux1*(timom*((beta*acvis)*(e%hessi(1,inode) + e%hessi(2,inode) + e%hessi(3,inode)))*dvolu)

         elrhs(1,inode) = aux*gplapl(1) + elrhs(1,inode)
         elrhs(2,inode) = aux*gplapl(2) + elrhs(2,inode)
         elrhs(3,inode) = aux*gplapl(3) + elrhs(3,inode)
         
      end do

   end subroutine supm_elmrhu_splitossNonLinear3d   
   
   subroutine supm_elmrhc_splitoss(e,auxtens,beta,timom,dvolu,gpdivs,auxoss,elrhs)
   !-----------------------------------------------------------------------
   !
   ! This routine computes the rhs terms in constitutive equation for OSS
   !    
   ! -tau1(div(tau),resid_momentum)- tau3/2mu(tau,resid_constitutive)
   !-----------------------------------------------------------------------
      use typre
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxtens,auxoss
      real(rp),    intent(in)    :: gpdivs(e%ndime)
      real(rp),    intent(in)    :: dvolu,beta,timom
      real(rp),    intent(inout) :: elrhs(auxtens,e%mnode)
      integer(ip)                :: inode,aux2
      real(rp)                   :: aux1,aux3

      aux2 = 1_ip - auxoss
      aux1 = ((1.0_rp - beta)*timom*dvolu)*aux2    
      do inode=1,e%pnode

         elrhs(1,inode) = e%cartd(1,inode)*aux1*gpdivs(1) + elrhs(1,inode)
         elrhs(2,inode) = e%cartd(2,inode)*aux1*gpdivs(2) + elrhs(2,inode)
         elrhs(3,inode) = aux1*(e%cartd(2,inode)*gpdivs(1) + e%cartd(1,inode)*gpdivs(2)) + elrhs(3,inode)        

      end do
   end subroutine supm_elmrhc_splitoss  
   
   subroutine supm_elmrhc_splitoss3d(e,auxtens,beta,timom,dvolu,gpdivs,auxoss,elrhs)
   !-----------------------------------------------------------------------
   !
   ! This routine computes the rhs terms in constitutive equation for OSS
   !    
   ! -tau1(div(tau),resid_momentum)- tau3/2mu(tau,resid_constitutive)
   !-----------------------------------------------------------------------
      use typre
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxtens,auxoss
      real(rp),    intent(in)    :: gpdivs(e%ndime)
      real(rp),    intent(in)    :: dvolu,beta,timom
      real(rp),    intent(inout) :: elrhs(auxtens,e%mnode)
      integer(ip)                :: inode,aux2
      real(rp)                   :: aux1,aux3

      aux2 = 1_ip - auxoss
      aux1 = ((1.0_rp - beta)*timom*dvolu)*aux2    
      do inode=1,e%pnode

         elrhs(1,inode) = e%cartd(1,inode)*aux1*gpdivs(1) + elrhs(1,inode)
         elrhs(2,inode) = e%cartd(2,inode)*aux1*gpdivs(2) + elrhs(2,inode)
         elrhs(3,inode) = e%cartd(3,inode)*aux1*gpdivs(3) + elrhs(3,inode)
         elrhs(4,inode) = aux1*(e%cartd(3,inode)*gpdivs(2) + e%cartd(2,inode)*gpdivs(3)) + elrhs(4,inode)            
         elrhs(5,inode) = aux1*(e%cartd(3,inode)*gpdivs(1) + e%cartd(1,inode)*gpdivs(3)) + elrhs(5,inode)            
         elrhs(6,inode) = aux1*(e%cartd(2,inode)*gpdivs(1) + e%cartd(1,inode)*gpdivs(2)) + elrhs(6,inode)        

      end do
   end subroutine supm_elmrhc_splitoss3d     
   
   subroutine supm_elmrhp_splitoss(e,timom,dvolu,gpgrap,auxoss,elrhs)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for OSS
    !    tau1*(grad q, resid_continuity)
    !
    !-----------------------------------------------------------------------
      use typre
      implicit none

      class(FiniteElement)        :: e
      integer(ip), intent(in)    :: auxoss       
      real(rp),    intent(in)    :: gpgrap(e%ndime),timom,dvolu
      real(rp),    intent(inout) :: elrhs(1,e%mnode)
      integer(ip)                :: inode,idime,aux1
      real(rp)                   :: tmp1

      aux1 = 1_ip - auxoss
      tmp1 = (dvolu*timom)*aux1

      do inode=1,e%pnode
         do idime=1,e%ndime
            elrhs(1,inode) = e%cartd(idime,inode)*gpgrap(idime)*tmp1 + elrhs(1,inode)
         end do
      end do

   end subroutine supm_elmrhp_splitoss 

   subroutine supm_elmbstVE(e,acvis,beta,auxVE,auxG,auxtrac,auxconv,aux12,timom,dtinv,dvolu,auxtens,gpadv,grvel,gpsig,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in constitutive equation
    !    1/2mu(S,T)+tau1*(div(T),div(S))-tau3*(1/2mu*(T),1/2mu*(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxtrac,auxconv,aux12
      real(rp),    intent(in)    :: timom,dvolu,beta,acvis,auxG,auxVE,dtinv
      real(rp),    intent(in)    :: gpadv(e%pnode),grvel(e%ndime,e%ndime),gpsig(auxtens)
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux,aux2,aux1
      real(rp)                   :: Res11s11,Res11s12,Res11s22,Res12s11,Res12s12,Res12S22, &
                                    Res21s11,Res21s12,Res21S22,Res22s11,Res22s12,Res22S22                         
                                    

      
      aux2= timom*dvolu*(1.0_rp-beta)
      
      
      do jnode=1,e%pnode               
      
         Res11s11 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(auxconv*gpadv(jnode) - auxtrac*2.0_rp*grvel(1,1)*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(2.0_rp*gpsig(1))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)
         Res11s12 = (auxVE*auxtrac)*(-2.0_rp)*grvel(1,2)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*(2.0_rp*gpsig(3))*e%shape(jnode,e%igaus)
         Res11s22 = 0.0_rp
         
         Res12s11 = -(auxVE*auxtrac)*grvel(2,1)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(3)*e%shape(jnode,e%igaus)
         Res12s12 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(auxconv*gpadv(jnode)) &
               - auxVE*(auxtrac*(grvel(2,2) + grvel(1,1))*e%shape(jnode,e%igaus))*aux12 &
               + auxVE*(auxG/acvis)*(gpsig(1) + gpsig(2))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)
         Res12s22 = -(auxVE*auxtrac)*grvel(1,2)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(3)*e%shape(jnode,e%igaus) 
         
         Res21s11 = Res12s11
         Res21s12 = Res12s12
         Res21s22 = Res12s22
         
         Res22s11 = 0.0_rp
         Res22s12 = (auxVE*auxtrac)*(-2.0_rp)*grvel(2,1)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*(2.0_rp*gpsig(3))*e%shape(jnode,e%igaus)
         Res22s22 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(auxconv*gpadv(jnode) - auxtrac*2.0_rp*grvel(2,2)*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(2.0_rp*gpsig(2))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)      
      
         do inode=1,e%pnode
         
            aux1=e%shape(inode,e%igaus)*dvolu
      
            elmat(1,inode,1,jnode) = aux2*(e%cartd(1,inode)*e%cartd(1,jnode)) &
                  + aux1*Res11s11 &
                  + elmat(1,inode,1,jnode)
            elmat(1,inode,2,jnode) = 0.0_rp + elmat(1,inode,2,jnode)
            elmat(1,inode,3,jnode) = aux2*(e%cartd(1,inode)*e%cartd(2,jnode)) &
                  + aux1*Res11s12 &
                  + elmat(1,inode,3,jnode)
            
            elmat(2,inode,1,jnode) = 0.0_rp + elmat(2,inode,1,jnode)
            elmat(2,inode,2,jnode) = aux2*e%cartd(2,inode)*e%cartd(2,jnode) &
                  + aux1*Res22s22 &
                  + elmat(2,inode,2,jnode)
            elmat(2,inode,3,jnode) = aux2*e%cartd(2,inode)*e%cartd(1,jnode) &
                  + aux1*Res22s12 &
                  + elmat(2,inode,3,jnode)
            
            elmat(3,inode,1,jnode) = aux2*e%cartd(2,inode)*e%cartd(1,jnode) &
                  + aux1*(Res12s11 + Res21s11) & 
                  + elmat(3,inode,1,jnode)
            elmat(3,inode,2,jnode) = aux2*e%cartd(1,inode)*e%cartd(2,jnode) & 
                  + aux1*(Res12s22 + Res21s22) &
                  + elmat(3,inode,2,jnode)                                         
            elmat(3,inode,3,jnode) = aux2*(e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(2,inode)*e%cartd(2,jnode)) &
                  + aux1*(Res12s12 + Res21s12) &
                  + elmat(3,inode,3,jnode)                                  

         end do
      end do   

   end subroutine supm_elmbstVE    
  
   subroutine supm_elmbstVES(e,auxsupg,auxvms,auxvms2,auxgls,auxnewtonG,aux12,auxVE,auxG,acvis,tisig,dtinv,gpadv,gpsig,dvolu,auxtens,grvel,auxtrac,auxtractest,auxconv,elmat) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in constitutive equation
    !    (-(1/2eta)*tau + auxVE*a*grad(tau),R_constituitva)
    !   +(auxVE*(2*grad(a)*tau -(auxG/eta)*sigma*tau),R_constituitva)
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxvms,auxnewtonG,auxtrac,auxtractest,auxconv,auxsupg,auxgls,aux12,auxvms2
      real(rp),    intent(in)    :: acvis,auxVE,auxG,dvolu,gpsig(auxtens),gpadv(e%pnode),dtinv
      real(rp),    intent(in)    :: grvel(e%ndime,e%ndime),tisig     
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode,auxstab,aux1,auxstab2,aux4
      real(rp)                   :: aux,aux2,aux3
      real(rp)                   :: Res11s11,Res11s12,Res11s22,Res12s11,Res12s12,Res12S22, &
                                    Res21s11,Res21s12,Res21S22,Res22s11,Res22s12,Res22S22                                     
      aux4=auxvms2
      
      do jnode=1,e%pnode  
         
         Res11s11 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(auxconv*gpadv(jnode) - auxtrac*2.0_rp*grvel(1,1)*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(2.0_rp*gpsig(1))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)
         Res11s12 = (auxVE*auxtrac)*(-2.0_rp)*grvel(1,2)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*(2.0_rp*gpsig(3))*e%shape(jnode,e%igaus)
         Res11s22 = 0.0_rp
         
         Res12s11 = -(auxVE*auxtrac)*grvel(2,1)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(3)*e%shape(jnode,e%igaus)
         Res12s12 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(auxconv*gpadv(jnode)) &
               - auxVE*(auxtrac*(grvel(2,2) + grvel(1,1))*e%shape(jnode,e%igaus))*aux12 &
               + auxVE*(auxG/acvis)*(gpsig(1) + gpsig(2))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)
         Res12s22 = -(auxVE*auxtrac)*grvel(1,2)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*gpsig(3)*e%shape(jnode,e%igaus) 
         
         Res21s11 = Res12s11
         Res21s12 = Res12s12
         Res21s22 = Res12s22
         
         Res22s11 = 0.0_rp
         Res22s12 = (auxVE*auxtrac)*(-2.0_rp)*grvel(2,1)*e%shape(jnode,e%igaus) + auxVE*(auxG/acvis)*(2.0_rp*gpsig(3))*e%shape(jnode,e%igaus)
         Res22s22 = e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(auxconv*gpadv(jnode) - auxtrac*2.0_rp*grvel(2,2)*e%shape(jnode,e%igaus)) &
               + auxVE*(auxG/acvis)*(2.0_rp*gpsig(2))*e%shape(jnode,e%igaus) + auxVE*dtinv*e%shape(jnode,e%igaus)                               

         do inode=1,e%pnode
         
         aux2= (aux4*e%shape(inode,e%igaus)*(-tisig/(2.0_rp*acvis)) + (tisig*auxVE)*gpadv(inode)*auxsupg)*dvolu          

         aux3= ((tisig*auxVE)*e%shape(inode,e%igaus))*dvolu         
             
         elmat(1,inode,1,jnode) = aux2*Res11s11 &
               + auxvms*aux3*(auxtractest*2.0_rp*grvel(1,1))*Res11s11 - aux3*((auxG/acvis)*gpsig(1))*Res11s11 &
               - auxgls*aux3*(auxtractest*2.0_rp*grvel(1,1))*Res11s11 &
               + auxvms*aux3*(2.0_rp*auxtractest*grvel(1,2))*Res12s11 - aux3*((auxG/acvis)*gpsig(3))*Res21s11 & 
               - auxgls*aux3*(2.0_rp*auxtractest*grvel(2,1))*Res12s11 &                 
               + elmat(1,inode,1,jnode)
               
         elmat(1,inode,2,jnode) = 0.0_rp &
               + auxvms*aux3*(2.0_rp*auxtractest*grvel(1,2))*Res12s22 - aux3*((auxG/acvis)*gpsig(3))*Res21s22 &                    
               - auxgls*aux3*(2.0_rp*auxtractest*grvel(2,1))*Res12s22 &   
               + elmat(1,inode,2,jnode)
               
         elmat(1,inode,3,jnode) = aux2*Res11s12 &
               + auxvms*aux3*(auxtractest*2.0_rp*grvel(1,1))*Res11s12 - aux3*((auxG/acvis)*gpsig(1))*Res11s12 &
               - auxgls*aux3*(auxtractest*2.0_rp*grvel(1,1))*Res11s12 &
               + auxvms*aux3*(2.0_rp*auxtractest*grvel(1,2))*Res12s12 - aux3*((auxG/acvis)*gpsig(3))*Res21s12 &                    
               - auxgls*aux3*(2.0_rp*auxtractest*grvel(2,1))*Res12s12 &   
               + elmat(1,inode,3,jnode)
         
         elmat(2,inode,1,jnode) = 0.0_rp &
               + auxvms*aux3*(2.0_rp*auxtractest*grvel(2,1))*Res12s11 - aux3*((auxG/acvis)*gpsig(3))*Res12s11 &            
               - auxgls*aux3*(2.0_rp*auxtractest*grvel(1,2))*Res12s11 &   
               + elmat(2,inode,1,jnode)
         
         elmat(2,inode,2,jnode) = aux2*Res22s22 &
               + auxvms*aux3*(auxtractest*2.0_rp*grvel(2,2))*Res22s22 - aux3*((auxG/acvis)*gpsig(2))*Res22s22 &
               - auxgls*aux3*(auxtractest*2.0_rp*grvel(2,2))*Res22s22 &               
               + auxvms*aux3*(2.0_rp*auxtractest*grvel(2,1))*Res12s22 - aux3*((auxG/acvis)*gpsig(3))*Res12s22 &                   
               - auxgls*aux3*(2.0_rp*auxtractest*grvel(1,2))*Res12s22 &   
               + elmat(2,inode,2,jnode)
               
         elmat(2,inode,3,jnode) = aux2*Res22s12 &
               + auxvms*aux3*(auxtractest*2.0_rp*grvel(2,2))*Res22s12 - aux3*((auxG/acvis)*gpsig(2))*Res22s12 &
               - auxgls*aux3*(auxtractest*2.0_rp*grvel(2,2))*Res22s12 &
               + auxvms*aux3*(2.0_rp*auxtractest*grvel(2,1))*Res12s12 - aux3*((auxG/acvis)*gpsig(3))*Res12s12 &                  
               - auxgls*aux3*(2.0_rp*auxtractest*grvel(1,2))*Res12s12 &      
               + elmat(2,inode,3,jnode)
         
         elmat(3,inode,1,jnode) = aux2*(Res12s11 + Res21s11) & 
               + auxvms*aux3*(auxtractest*2.0_rp*grvel(2,1))*Res11s11 - aux3*((auxG/acvis)*gpsig(3))*Res11s11 &
               - auxgls*aux3*(auxtractest*2.0_rp*grvel(1,2))*Res11s11 &               
               + auxvms*aux3*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12)*Res12s11 - aux3*((auxG/acvis)*gpsig(1))*Res12s11 &
               - auxgls*aux3*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12)*Res12s11 &               
               + auxvms*aux3*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12)*Res21s11 - aux3*((auxG/acvis)*gpsig(2))*Res21s11 &  
               - auxgls*aux3*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12)*Res21s11 &                
               + elmat(3,inode,1,jnode)
               
               
         elmat(3,inode,2,jnode) = aux2*(Res12s22 + Res21s22) &
               + auxvms*aux3*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12)*Res12s22 - aux3*((auxG/acvis)*gpsig(1))*Res12s22 &
               - auxgls*aux3*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12)*Res12s22 &    
               + auxvms*aux3*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12)*Res21s22 - aux3*((auxG/acvis)*gpsig(2))*Res21s22 &  
               - auxgls*aux3*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12)*Res21s22 &                 
               + auxvms*aux3*(auxtractest*2.0_rp*grvel(1,2))*Res22s22 - aux3*((auxG/acvis)*gpsig(3))*Res22s22 &              
               - auxgls*aux3*(auxtractest*2.0_rp*grvel(2,1))*Res22s22 &     
               + elmat(3,inode,2,jnode)           
         
               
         elmat(3,inode,3,jnode) = aux2*(Res12s12 + Res21s12) &
               + auxvms*aux3*(auxtractest*2.0_rp*grvel(2,1))*Res11s12 - aux3*((auxG/acvis)*gpsig(3))*Res11s12 &
               - auxgls*aux3*(auxtractest*2.0_rp*grvel(1,2))*Res11s12 &                 
               + auxvms*aux3*(auxtractest*2.0_rp*grvel(1,2))*Res22s12 - aux3*((auxG/acvis)*gpsig(3))*Res22s12 &
               - auxgls*aux3*(auxtractest*2.0_rp*grvel(2,1))*Res22s12 &                
               + auxvms*aux3*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12)*Res12s12 - aux3*((auxG/acvis)*gpsig(1))*Res12s12 &
               - auxgls*aux3*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12)*Res12s12 &                
               + auxvms*aux3*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12)*Res21s12 - aux3*((auxG/acvis)*gpsig(2))*Res21s12 &                    
               - auxgls*aux3*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12)*Res21s12 &               
               + elmat(3,inode,3,jnode)  
                                  

         end do
      end do   

   end subroutine supm_elmbstVES   
   
   subroutine supm_elmbstDC(e,auxtens,kdisc,dvolu,elmat)
   
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in constitutive equation
    !    1/2mu(S,T)+tau1*(div(T),div(S))-tau3*(1/2mu*(T),1/2mu*(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: dvolu,kdisc
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux

      aux= kdisc*dvolu  
      do jnode=1,e%pnode  
         do inode=1,e%pnode
      
         elmat(1,inode,1,jnode) = aux*(e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(2,inode)*e%cartd(2,jnode)) + elmat(1,inode,1,jnode)
         elmat(1,inode,2,jnode) = 0.0_rp + elmat(1,inode,2,jnode)
         elmat(1,inode,3,jnode) = 0.0_rp + elmat(1,inode,3,jnode)
         
         elmat(2,inode,1,jnode) = 0.0_rp + elmat(2,inode,1,jnode)
         elmat(2,inode,2,jnode) = aux*(e%cartd(2,inode)*e%cartd(2,jnode) + e%cartd(1,inode)*e%cartd(1,jnode)) + elmat(2,inode,2,jnode)
         elmat(2,inode,3,jnode) = 0.0_rp + elmat(2,inode,3,jnode)
         
         elmat(3,inode,1,jnode) = 0.0_rp + elmat(3,inode,1,jnode)                                     
         elmat(3,inode,2,jnode) = 0.0_rp + elmat(3,inode,2,jnode)   
         elmat(3,inode,3,jnode) = 2.0_rp*aux*(e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(2,inode)*e%cartd(2,jnode)) + elmat(3,inode,3,jnode)                                  

         end do
      end do   

   end subroutine supm_elmbstDC
   
   subroutine supm_elmbstDC3d(e,auxtens,kdisc,dvolu,elmat)
   
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in constitutive equation
    !    1/2mu(S,T)+tau1*(div(T),div(S))-tau3*(1/2mu*(T),1/2mu*(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: dvolu,kdisc
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux

      aux= kdisc*dvolu  
      do jnode=1,e%pnode  
         do inode=1,e%pnode
      
         elmat(1,inode,1,jnode) = aux*(e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(2,inode)*e%cartd(2,jnode) + e%cartd(3,inode)*e%cartd(3,jnode))&
               + elmat(1,inode,1,jnode)
         elmat(1,inode,2,jnode) = 0.0_rp + elmat(1,inode,2,jnode)
         elmat(1,inode,3,jnode) = 0.0_rp + elmat(1,inode,3,jnode)
         elmat(1,inode,4,jnode) = 0.0_rp + elmat(1,inode,4,jnode)
         elmat(1,inode,5,jnode) = 0.0_rp + elmat(1,inode,5,jnode)
         elmat(1,inode,6,jnode) = 0.0_rp + elmat(1,inode,6,jnode)         
         
         elmat(2,inode,1,jnode) = 0.0_rp + elmat(2,inode,1,jnode)
         elmat(2,inode,2,jnode) = aux*(e%cartd(2,inode)*e%cartd(2,jnode) + e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(3,inode)*e%cartd(3,jnode)) &
               + elmat(2,inode,2,jnode)
         elmat(2,inode,3,jnode) = 0.0_rp + elmat(2,inode,3,jnode)
         elmat(2,inode,4,jnode) = 0.0_rp + elmat(2,inode,4,jnode)
         elmat(2,inode,5,jnode) = 0.0_rp + elmat(2,inode,5,jnode)
         elmat(2,inode,6,jnode) = 0.0_rp + elmat(2,inode,6,jnode)
         
         elmat(3,inode,1,jnode) = 0.0_rp + elmat(3,inode,1,jnode)
         elmat(3,inode,2,jnode) = 0.0_rp + elmat(3,inode,2,jnode)
         elmat(3,inode,3,jnode) = aux*(e%cartd(2,inode)*e%cartd(2,jnode) + e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(3,inode)*e%cartd(3,jnode)) &
               + elmat(3,inode,3,jnode)
         elmat(3,inode,4,jnode) = 0.0_rp + elmat(3,inode,4,jnode)
         elmat(3,inode,5,jnode) = 0.0_rp + elmat(3,inode,5,jnode)
         elmat(3,inode,6,jnode) = 0.0_rp + elmat(3,inode,6,jnode)

         elmat(4,inode,1,jnode) = 0.0_rp + elmat(4,inode,1,jnode)
         elmat(4,inode,2,jnode) = 0.0_rp + elmat(4,inode,2,jnode)
         elmat(4,inode,3,jnode) = 0.0_rp + elmat(4,inode,3,jnode)         
         elmat(4,inode,4,jnode) = 2.0_rp*aux*(e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(2,inode)*e%cartd(2,jnode) + e%cartd(3,inode)*e%cartd(3,jnode)) & 
               + elmat(4,inode,4,jnode)                                     
         elmat(4,inode,5,jnode) = 0.0_rp + elmat(4,inode,5,jnode)   
         elmat(4,inode,6,jnode) = 0.0_rp + elmat(4,inode,6,jnode)           
         
         elmat(5,inode,1,jnode) = 0.0_rp + elmat(5,inode,1,jnode)
         elmat(5,inode,2,jnode) = 0.0_rp + elmat(5,inode,2,jnode)
         elmat(5,inode,3,jnode) = 0.0_rp + elmat(5,inode,3,jnode)         
         elmat(5,inode,4,jnode) = 0.0_rp + elmat(5,inode,4,jnode)                                     
         elmat(5,inode,5,jnode) = 2.0_rp*aux*(e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(2,inode)*e%cartd(2,jnode) + e%cartd(3,inode)*e%cartd(3,jnode)) & 
               + elmat(5,inode,5,jnode)   
         elmat(5,inode,6,jnode) = 0.0_rp + elmat(5,inode,6,jnode)          

         elmat(6,inode,1,jnode) = 0.0_rp + elmat(6,inode,1,jnode)
         elmat(6,inode,2,jnode) = 0.0_rp + elmat(6,inode,2,jnode)
         elmat(6,inode,3,jnode) = 0.0_rp + elmat(6,inode,3,jnode)         
         elmat(6,inode,4,jnode) = 0.0_rp + elmat(6,inode,4,jnode)                                     
         elmat(6,inode,5,jnode) = 0.0_rp + elmat(6,inode,5,jnode)   
         elmat(6,inode,6,jnode) = 2.0_rp*aux*(e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(2,inode)*e%cartd(2,jnode) + e%cartd(3,inode)*e%cartd(3,jnode)) &
               + elmat(6,inode,6,jnode)                                  

         end do
      end do   

   end subroutine supm_elmbstDC3d   
   
   subroutine supm_elmbuvDC(e,acvis,tisig,beta,dvolu,elmat) 
   
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in constitutive equation
    !    1/2mu(S,T)+tau1*(div(T),div(S))-tau3*(1/2mu*(T),1/2mu*(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      real(rp),    intent(in)    :: dvolu,acvis,beta,tisig
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux,auxstab
      
      auxstab= (1.0_rp-beta)*0.1_rp
      aux= (acvis*auxstab*dvolu)  
      do jnode=1,e%pnode  
         do inode=1,e%pnode
      
         elmat(1,inode,1,jnode) = aux*(e%cartd(1,inode)*e%cartd(1,jnode) + 0.5_rp*e%cartd(2,inode)*e%cartd(2,jnode)) + elmat(1,inode,1,jnode)
         elmat(1,inode,2,jnode) = aux*(0.5_rp*e%cartd(2,inode)*e%cartd(1,jnode)) + elmat(1,inode,2,jnode)
         
         elmat(2,inode,1,jnode) = aux*(0.5_rp*e%cartd(1,inode)*e%cartd(2,jnode)) + elmat(2,inode,1,jnode)
         elmat(2,inode,2,jnode) = aux*(e%cartd(2,inode)*e%cartd(2,jnode) + 0.5_rp*e%cartd(1,inode)*e%cartd(1,jnode)) + elmat(2,inode,2,jnode)                                          

         end do
      end do   

   end subroutine supm_elmbuvDC  
   
   subroutine supm_elmrhuDC(e,acvis,tisig,beta,dvolu,grvelRP,elrhs)  
   
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in constitutive equation
    !    1/2mu(S,T)+tau1*(div(T),div(S))-tau3*(1/2mu*(T),1/2mu*(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      real(rp),    intent(in)    :: dvolu,acvis,beta,grvelRP(e%ndime,e%ndime),tisig
      real(rp),    intent(inout) :: elrhs(e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux,aux1,auxstab
      
      auxstab= (1.0_rp-beta)*0.1_rp
      aux = (acvis*auxstab*dvolu) 
      do jnode=1,e%pnode  
         do inode=1,e%pnode
      
         elrhs(1,inode) = aux*(e%cartd(1,inode)*grvelRP(1,1) + 0.5_rp*e%cartd(2,inode)*(2.0_rp*grvelRP(1,2))) &
               + elrhs(1,inode)
         elrhs(2,inode) = aux*(e%cartd(2,inode)*grvelRP(2,2) + 0.5_rp*e%cartd(1,inode)*(2.0_rp*grvelRP(1,2))) &
               + elrhs(2,inode)                                      

         end do
      end do   

   end subroutine supm_elmrhuDC      
   
   
   subroutine supm_elmbutVE(e,auxVE,auxtrac,auxconv,aux12,auxnewtonG,timom,dtinv,gpadv,dvolu,acden,auxtens,beta,grvel,gpsig,grsig,elmat)   
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxtens,auxnewtonG,auxtrac,auxconv,aux12
      real(rp),    intent(in)    :: timom,dvolu,acden,dtinv,gpadv(e%pnode),beta,grvel(e%ndime,e%ndime),gpsig(auxtens),grsig(auxtens,e%ndime),auxVE  
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux,aux1,tmp,aux2,aux4,aux3
      real(rp)                   :: Res11u,Res11v,Res12u,Res12v,Res21u,Res21v,Res22u,Res22v           


      tmp  = acden*dtinv
      aux2= -timom*dvolu*(1.0_rp-beta)       
      aux4= (auxnewtonG*aux2)*acden !aporte de Newton
      
      do jnode=1,e%pnode
         aux1=acden*gpadv(jnode)
         
         Res11u = -(1.0_rp - beta)*e%cartd(1,jnode) &
               + auxVE*(auxconv*e%shape(jnode,e%igaus)*grsig(1,1) - 2.0_rp*auxtrac*(gpsig(1)*e%cartd(1,jnode) + gpsig(3)*e%cartd(2,jnode)))*auxnewtonG
         Res11v = auxVE*(auxconv*e%shape(jnode,e%igaus)*grsig(1,2))*auxnewtonG
         
         Res12u = -((1.0_rp - beta)/2.0_rp)*e%cartd(2,jnode) &
               + auxVE*(auxconv*e%shape(jnode,e%igaus)*grsig(3,1) - auxtrac*(gpsig(3)*e%cartd(1,jnode)*aux12 + gpsig(2)*e%cartd(2,jnode)))*auxnewtonG
         Res12v = -((1.0_rp - beta)/2.0_rp)*e%cartd(1,jnode) &
               + auxVE*(auxconv*e%shape(jnode,e%igaus)*grsig(3,2) - auxtrac*(gpsig(1)*e%cartd(1,jnode) + gpsig(3)*e%cartd(2,jnode)*aux12))*auxnewtonG
         
         Res21u = Res12u
         Res21v = Res12v
         
         Res22u = auxVE*(auxconv*e%shape(jnode,e%igaus)*grsig(2,1))*auxnewtonG
         Res22v = -(1.0_rp - beta)*e%cartd(2,jnode) & 
               + auxVE*(auxconv*e%shape(jnode,e%igaus)*grsig(2,2) - 2.0_rp*auxtrac*(gpsig(3)*e%cartd(1,jnode) + gpsig(2)*e%cartd(2,jnode)))*auxnewtonG             
         
         do inode=1,e%pnode
         
            aux3=e%shape(inode,e%igaus)*dvolu
         
            elmat(1,inode,1,jnode) = aux2*e%cartd(1,inode)*(aux1 + e%shape(jnode,e%igaus)*tmp) &  
                  + aux4*e%cartd(1,inode)*(e%shape(jnode,e%igaus)*grvel(1,1)) &
                  + aux3*Res11u &
                  + elmat(1,inode,1,jnode)                                      
            
            elmat(1,inode,2,jnode) = 0.0_rp &
                  + aux4*e%cartd(1,inode)*(e%shape(jnode,e%igaus)*grvel(1,2)) &
                  + aux3*Res11v &
                  + elmat(1,inode,2,jnode)
            
            elmat(2,inode,1,jnode) = 0.0_rp &
                  + aux4*e%cartd(2,inode)*(e%shape(jnode,e%igaus)*grvel(2,1)) &
                  + aux3*Res22u &
                  + elmat(2,inode,1,jnode) 
   
            elmat(2,inode,2,jnode) = aux2*e%cartd(2,inode)*(aux1+e%shape(jnode,e%igaus)*tmp) &
                  + aux4*e%cartd(2,inode)*(e%shape(jnode,e%igaus)*grvel(2,2)) &
                  + aux3*Res22v &
                  + elmat(2,inode,2,jnode)
               
            elmat(3,inode,1,jnode) = aux2*e%cartd(2,inode)*(aux1+e%shape(jnode,e%igaus)*tmp) &
                  + (aux4*e%shape(jnode,e%igaus))*(e%cartd(2,inode)*grvel(1,1) + e%cartd(1,inode)*grvel(2,1)) &
                  + aux3*(Res12u + Res21u) &
                  + elmat(3,inode,1,jnode)
               
            elmat(3,inode,2,jnode) = aux2*e%cartd(1,inode)*(aux1+e%shape(jnode,e%igaus)*tmp) &              
                  + (aux4*e%shape(jnode,e%igaus))*(e%cartd(2,inode)*grvel(1,2) + e%cartd(1,inode)*grvel(2,2)) &
                  + aux3*(Res12v + Res21v) &
                  + elmat(3,inode,2,jnode)                                         

         end do  
      end do

   end subroutine supm_elmbutVE    
   
   subroutine supm_elmbutVES(e,auxsupg,auxvms,auxvms2,auxgls,auxnewtonG,beta,auxVE,aux12,auxG,acvis,tisig,gpsig,dvolu,auxtens,grvel,grsig,gpadv,auxtrac,auxtractest,auxconv,elmat) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxtens,auxvms,auxtrac,auxtractest,auxconv,auxsupg,auxnewtonG,auxgls,aux12,auxvms2
      real(rp),    intent(in)    :: auxVE,dvolu,gpsig(auxtens),grsig(auxtens,e%ndime),tisig
      real(rp),    intent(in)    :: acvis,auxG,grvel(e%ndime,e%ndime),beta,gpadv(e%pnode)
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode,aux1,auxstab,aux4,auxstab2
      real(rp)                   :: aux,aux2,aux3  
      real(rp)                   :: Res11u,Res11v,Res12u,Res12v,Res21u,Res21v,Res22u,Res22v       

      aux4=auxvms2
      do jnode=1,e%pnode          

         Res11u = -(1.0_rp - beta)*e%cartd(1,jnode) &
               + auxVE*(auxconv*e%shape(jnode,e%igaus)*grsig(1,1) - 2.0_rp*auxtrac*(gpsig(1)*e%cartd(1,jnode) + gpsig(3)*e%cartd(2,jnode)))*auxnewtonG
         Res11v = auxVE*(auxconv*e%shape(jnode,e%igaus)*grsig(1,2))*auxnewtonG
         
         Res12u = -((1.0_rp - beta)/2.0_rp)*e%cartd(2,jnode) &
               + auxVE*(auxconv*e%shape(jnode,e%igaus)*grsig(3,1) - auxtrac*(gpsig(3)*e%cartd(1,jnode)*aux12 + gpsig(2)*e%cartd(2,jnode)))*auxnewtonG
         Res12v = -((1.0_rp - beta)/2.0_rp)*e%cartd(1,jnode) &
               + auxVE*(auxconv*e%shape(jnode,e%igaus)*grsig(3,2) - auxtrac*(gpsig(1)*e%cartd(1,jnode) + gpsig(3)*e%cartd(2,jnode)*aux12))*auxnewtonG
         
         Res21u = Res12u
         Res21v = Res12v
         
         Res22u = auxVE*(auxconv*e%shape(jnode,e%igaus)*grsig(2,1))*auxnewtonG
         Res22v = -(1.0_rp - beta)*e%cartd(2,jnode) & 
               + auxVE*(auxconv*e%shape(jnode,e%igaus)*grsig(2,2) - 2.0_rp*auxtrac*(gpsig(3)*e%cartd(1,jnode) + gpsig(2)*e%cartd(2,jnode)))*auxnewtonG      
                
           
         do inode=1,e%pnode         
         
         aux2= (aux4*e%shape(inode,e%igaus)*(-(tisig/(2.0_rp*acvis))) + (tisig*auxVE)*gpadv(inode)*auxsupg)*dvolu  
         aux3= ((tisig*auxVE)*e%shape(inode,e%igaus))*dvolu                                      
                 
         elmat(1,inode,1,jnode) = aux2*Res11u &
               + auxvms*aux3*(auxtractest*2.0_rp*grvel(1,1))*Res11u - aux3*((auxG/acvis)*gpsig(1))*Res11u &  
               - auxgls*aux3*(auxtractest*2.0_rp*grvel(1,1))*Res11u &
               + auxvms*aux3*(2.0_rp*auxtractest*grvel(1,2))*Res12u - aux3*((auxG/acvis)*gpsig(3))*Res21u &               
               - auxgls*aux3*(2.0_rp*auxtractest*grvel(2,1))*Res12u &   
               + elmat(1,inode,1,jnode) 
               
         elmat(1,inode,2,jnode) = aux2*Res11v & 
               + auxvms*aux3*(auxtractest*2.0_rp*grvel(1,1))*Res11v - aux3*((auxG/acvis)*gpsig(1))*Res11v &  
               - auxgls*aux3*(auxtractest*2.0_rp*grvel(1,1))*Res11v &               
               + auxvms*aux3*(2.0_rp*auxtractest*grvel(1,2))*Res12v - aux3*((auxG/acvis)*gpsig(3))*Res21v &  
               - auxgls*aux3*(2.0_rp*auxtractest*grvel(2,1))*Res12v &                 
               + elmat(1,inode,2,jnode)
         
         elmat(2,inode,1,jnode) = aux2*Res22u &
               + auxvms*aux3*(auxtractest*2.0_rp*grvel(2,2))*Res22u - aux3*((auxG/acvis)*gpsig(2))*Res22u &
               - auxgls*aux3*(auxtractest*2.0_rp*grvel(2,2))*Res22u &               
               + auxvms*aux3*(2.0_rp*auxtractest*grvel(2,1))*Res21u - aux3*((auxG/acvis)*gpsig(3))*Res12u &   
               - auxgls*aux3*(2.0_rp*auxtractest*grvel(1,2))*Res21u &                    
               + elmat(2,inode,1,jnode)
         
         elmat(2,inode,2,jnode) = aux2*Res22v &
               + auxvms*aux3*(auxtractest*2.0_rp*grvel(2,2))*Res22v - aux3*((auxG/acvis)*gpsig(2))*Res22v & 
               - auxgls*aux3*(auxtractest*2.0_rp*grvel(2,2))*Res22v &                 
               + auxvms*aux3*(2.0_rp*auxtractest*grvel(2,1))*Res21v - aux3*((auxG/acvis)*gpsig(3))*Res12v &    
               - auxgls*aux3*(2.0_rp*auxtractest*grvel(1,2))*Res21v &                   
               + elmat(2,inode,2,jnode)  
               
         elmat(3,inode,1,jnode) = aux2*(Res12u + Res21u) &
               + auxvms*aux3*(auxtractest*2.0_rp*grvel(2,1))*Res11u - aux3*((auxG/acvis)*gpsig(3))*Res11u &
               - auxgls*aux3*(auxtractest*2.0_rp*grvel(1,2))*Res11u &               
               + auxvms*aux3*(auxtractest*2.0_rp*grvel(1,2))*Res22u - aux3*((auxG/acvis)*gpsig(3))*Res22u &
               - auxgls*aux3*(auxtractest*2.0_rp*grvel(2,1))*Res22u &                
               + auxvms*aux3*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12)*Res12u - aux3*((auxG/acvis)*gpsig(1))*Res12u &
               - auxgls*aux3*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12)*Res12u &               
               + auxvms*aux3*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12)*Res21u - aux3*((auxG/acvis)*gpsig(2))*Res21u &                  
               - auxgls*aux3*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12)*Res21u &                  
               + elmat(3,inode,1,jnode) 
               
         elmat(3,inode,2,jnode) = aux2*(Res12v + Res21v) &
               + auxvms*aux3*(auxtractest*2.0_rp*grvel(2,1))*Res11v - aux3*((auxG/acvis)*gpsig(3))*Res11v &
               - auxgls*aux3*(auxtractest*2.0_rp*grvel(1,2))*Res11v &               
               + auxvms*aux3*(auxtractest*2.0_rp*grvel(1,2))*Res22v - aux3*((auxG/acvis)*gpsig(3))*Res22v &
               - auxgls*aux3*(auxtractest*2.0_rp*grvel(2,1))*Res22v &                
               + auxvms*aux3*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12)*Res12v - aux3*((auxG/acvis)*gpsig(1))*Res12v &
               - auxgls*aux3*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12)*Res12v &               
               + auxvms*aux3*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12)*Res21v - aux3*((auxG/acvis)*gpsig(2))*Res21v &                  
               - auxgls*aux3*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12)*Res21v &                    
               + elmat(3,inode,2,jnode)                                          

         end do  
      end do

   end subroutine supm_elmbutVES

   subroutine supm_elmbptVE(e,timom,dvolu,auxtens,beta,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the third lhs term for ASGS in constitutive equation
    !    -tau1*(gra(p),div(t))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: timom,dvolu,beta
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,1,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux

      aux= -timom*dvolu*(1.0_rp-beta)    
      do jnode=1,e%pnode  
         do inode=1,e%pnode    

         elmat(1,inode,1,jnode) = e%cartd(1,inode)*aux*e%cartd(1,jnode) + elmat(1,inode,1,jnode)
         elmat(2,inode,1,jnode) = e%cartd(2,inode)*aux*e%cartd(2,jnode) + elmat(2,inode,1,jnode)
         elmat(3,inode,1,jnode) = (e%cartd(2,inode)*e%cartd(1,jnode) + e%cartd(1,inode)*e%cartd(2,jnode))*aux &
            + elmat(3,inode,1,jnode)

      end do  
   end do

   end subroutine supm_elmbptVE 
   
   subroutine supm_elmbsvVE(e,timom,dvolu,acden,gpadv,auxtens,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in momentum equation
    !    (gra_sym(v),S) -tau3(gra_sym(v),1/2mu*S) -tau1(rho*a*grad(v),div(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: timom,dvolu,acden,gpadv(e%pnode) 
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux,aux1

      aux  = dvolu 
      do inode=1,e%pnode
         aux1 = -acden*gpadv(inode)*timom*dvolu        
         do jnode=1,e%pnode
         
         elmat(1,inode,1,jnode) = e%cartd(1,inode)*aux*e%shape(jnode,e%igaus) + e%cartd(1,jnode)*aux1 & 
               + elmat(1,inode,1,jnode)                                      
         elmat(1,inode,2,jnode) = 0.0_rp + elmat(1,inode,2,jnode)
         elmat(1,inode,3,jnode) = e%cartd(2,inode)*aux*e%shape(jnode,e%igaus) + e%cartd(2,jnode)*aux1 & 
               + elmat(1,inode,3,jnode)
              
         elmat(2,inode,1,jnode) = 0.0_rp + elmat(2,inode,1,jnode)
         elmat(2,inode,2,jnode) = e%cartd(2,inode)*aux*e%shape(jnode,e%igaus) + e%cartd(2,jnode)*aux1 & 
               + elmat(2,inode,2,jnode)
         elmat(2,inode,3,jnode) = e%cartd(1,inode)*aux*e%shape(jnode,e%igaus) + e%cartd(1,jnode)*aux1 & 
               + elmat(2,inode,3,jnode)                                    
      
         end do  
      end do
 
   end subroutine supm_elmbsvVE   
   
   subroutine supm_elmbsvVES(e,auxvms,aux12,auxnewtonG,beta,auxVE,auxG,acvis,tisig,dtinv,gpadv,gpsig,dvolu,auxtens,grvel,auxtrac,auxconv,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in constitutive equation
    !    (-(1/2eta)*tau + auxVE*a*grad(tau),R_constituitva)
    !   +(auxVE*(2*grad(a)*tau -(auxG/eta)*sigma*tau),R_constituitva)
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxvms,auxnewtonG,auxtrac,auxconv,aux12
      real(rp),    intent(in)    :: acvis,auxVE,beta,auxG,dvolu,gpadv(e%pnode),gpsig(auxtens)
      real(rp),    intent(in)    :: grvel(e%ndime,e%ndime),tisig,dtinv     
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode,auxstab,aux1
      real(rp)                   :: aux2
      real(rp)                   :: Res11s11,Res11s12,Res11s22,Res12s11,Res12s12,Res12S22, &
                                    Res21s11,Res21s12,Res21S22,Res22s11,Res22s12,Res22S22      

      aux1=1                              
      auxstab=aux1*auxvms
      aux2 = (tisig*dvolu)  
      do jnode=1,e%pnode    
              
         Res11s11 = (e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(auxconv*gpadv(jnode) - auxtrac*2.0_rp*grvel(1,1)*e%shape(jnode,e%igaus) &
               + (auxG/acvis)*(gpsig(1) + gpsig(1))*e%shape(jnode,e%igaus))) + auxVE*dtinv*e%shape(jnode,e%igaus)
         Res11s12 = (auxVE*((-2.0_rp)*grvel(1,2)*e%shape(jnode,e%igaus)*auxtrac & 
               + (auxG/acvis)*(gpsig(3) + gpsig(3))*e%shape(jnode,e%igaus)))
         Res11s22 = 0.0_rp
         
         Res12s11 = (auxVE*(-grvel(2,1)*e%shape(jnode,e%igaus)*auxtrac + (auxG/acvis)*gpsig(3)*e%shape(jnode,e%igaus)))
         Res12s12 = (e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(auxconv*gpadv(jnode) - aux12*auxtrac*(grvel(2,2) + grvel(1,1))*e%shape(jnode,e%igaus) &
               + (auxG/acvis)*(gpsig(1) + gpsig(2))*e%shape(jnode,e%igaus))) + auxVE*dtinv*e%shape(jnode,e%igaus)
         Res12s22 = auxVE*(-grvel(1,2)*e%shape(jnode,e%igaus)*auxtrac + (auxG/acvis)*gpsig(3)*e%shape(jnode,e%igaus)) 
         
         Res21s11 = Res12s11
         Res21s12 = Res12s12
         Res21s22 = Res12s22
         
         Res22s11 = 0.0_rp
         Res22s12 = (auxVE*((-2.0_rp)*grvel(2,1)*e%shape(jnode,e%igaus)*auxtrac &
               + (auxG/acvis)*(gpsig(3) + gpsig(3))*e%shape(jnode,e%igaus)))
         Res22s22 = (e%shape(jnode,e%igaus)/(2.0_rp*acvis) + auxVE*(auxconv*gpadv(jnode) - 2.0_rp*grvel(2,2)*e%shape(jnode,e%igaus)*auxtrac &
               + (auxG/acvis)*(gpsig(2) + gpsig(2))*e%shape(jnode,e%igaus))) + auxVE*dtinv*e%shape(jnode,e%igaus)                  
               
               
         do inode=1,e%pnode
                 
             
         elmat(1,inode,1,jnode) = -(aux2*e%cartd(1,inode))*Res11s11 &
               - aux2*(0.5_rp*e%cartd(2,inode)*Res12s11 + 0.5_rp*e%cartd(2,inode)*Res21s11) &
               + elmat(1,inode,1,jnode)
               
         elmat(1,inode,2,jnode) = -(aux2*e%cartd(1,inode))*Res11s22 &
               - aux2*(0.5_rp*e%cartd(2,inode)*Res12s22 + 0.5_rp*e%cartd(2,inode)*Res21s22) &      
               + elmat(1,inode,2,jnode)
               
         elmat(1,inode,3,jnode) = -(aux2*e%cartd(1,inode))*Res11s12 &
               - aux2*(0.5_rp*e%cartd(2,inode)*Res12s12 + 0.5_rp*e%cartd(2,inode)*Res21s12) &             
               + elmat(1,inode,3,jnode)
         
         elmat(2,inode,1,jnode) = -(aux2*e%cartd(2,inode))*Res22s11 &
               - aux2*(0.5_rp*e%cartd(1,inode)*Res12s11 + 0.5_rp*e%cartd(1,inode)*Res21s11) &               
               + elmat(2,inode,1,jnode)
         
         elmat(2,inode,2,jnode) = -(aux2*e%cartd(2,inode))*Res22s22 &
               - aux2*(0.5_rp*e%cartd(1,inode)*Res12s22 + 0.5_rp*e%cartd(1,inode)*Res21s22) &             
               + elmat(2,inode,2,jnode)
               
         elmat(2,inode,3,jnode) = -(aux2*e%cartd(2,inode))*Res22s12 &
               - aux2*(0.5_rp*e%cartd(1,inode)*Res12s12 + 0.5_rp*e%cartd(1,inode)*Res21s12) &            
               + elmat(2,inode,3,jnode)                                  

         end do
      end do   

   end subroutine supm_elmbsvVES   
   
   
   subroutine supm_elmbsqVE(e,timom,dvolu,auxtens,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the lhs term for ASGS in momentum equation
    !    tau1*(gra(q),div(S))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: timom,dvolu
      real(rp),    intent(inout) :: elmat(1,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux


      aux=-timom*dvolu    
      do jnode=1,e%pnode      
         do inode=1,e%pnode   

         elmat(1,inode,1,jnode) = e%cartd(1,inode)*(aux)*e%cartd(1,jnode) + elmat(1,inode,1,jnode)
         elmat(1,inode,2,jnode) = e%cartd(2,inode)*(aux)*e%cartd(2,jnode) + elmat(1,inode,2,jnode)
         elmat(1,inode,3,jnode) = (e%cartd(1,inode)*e%cartd(2,jnode) + e%cartd(2,inode)*e%cartd(1,jnode))*aux &
                 + elmat(1,inode,3,jnode)                      

         end do  
      end do

   end subroutine supm_elmbsqVE      
   
   subroutine supm_elmbuqVE(e,auxnewtonG,timom,dvolu,acvis,acden,grvel,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxnewtonG
      real(rp),    intent(in)    :: dvolu,timom,acvis,acden,grvel(e%ndime,e%ndime)
      real(rp),    intent(inout) :: elmat(1,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode,aux1
      real(rp)                   :: aux2 
      
      aux2= (auxnewtonG)*(acden*dvolu*timom)
      
      do jnode=1,e%pnode         
         do inode=1,e%pnode                 
                 
         elmat(1,inode,1,jnode) = aux2*e%cartd(1,inode)*(e%shape(jnode,e%igaus)*grvel(1,1)) &
               + aux2*e%cartd(2,inode)*(e%shape(jnode,e%igaus)*grvel(2,1)) &
               + elmat(1,inode,1,jnode)                
         
         elmat(1,inode,2,jnode) = aux2*e%cartd(1,inode)*(e%shape(jnode,e%igaus)*grvel(1,2)) &
               + aux2*e%cartd(2,inode)*(e%shape(jnode,e%igaus)*grvel(2,2)) &          
               + elmat(1,inode,2,jnode)

         end do
      end do

   end subroutine supm_elmbuqVE     
   
   subroutine supm_elmrhpVE(e,auxnewtonG,acden,timom,dvolu,elextC,gpvel,grvel,elrhs)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxnewtonG
      real(rp),    intent(in)    :: elextC(1),acden,timom
      real(rp),    intent(in)    :: dvolu,gpvel(e%ndime),grvel(e%ndime,e%ndime)
      real(rp),    intent(inout) :: elrhs(1,e%mnode)
      integer(ip)                :: inode,aux1
      real(rp)                   :: aux2

      aux2 = (auxnewtonG)*(acden*timom*dvolu)
    
      do inode=1,e%pnode

         elrhs(1,inode) = e%shape(inode,e%igaus)*dvolu*elextC(1) &
               + aux2*e%cartd(1,inode)*(gpvel(1)*grvel(1,1) + gpvel(2)*grvel(1,2)) &
               + aux2*e%cartd(2,inode)*(gpvel(1)*grvel(2,1) + gpvel(2)*grvel(2,2)) &
               + elrhs(1,inode) 
  
      end do

   end subroutine supm_elmrhpVE     
   
   
   subroutine supm_elmbuv2VE(e,auxnewtonG,timom,dvolu,acvis,acden,beta,gpadv,grvel,elmat)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in momentum equation
    !    tau3*(gra_sym(v),gra_sym(u))
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxnewtonG
      real(rp),    intent(in)    :: dvolu,beta,acvis,grvel(e%ndime,e%ndime),timom,gpadv(e%pnode),acden
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode,aux4
      real(rp)                   :: aux,aux1,aux2,aux3

      aux1=1.0_rp*beta*acvis*dvolu
      
      do inode=1,e%pnode         
         aux2= auxnewtonG*(e%shape(inode,e%igaus) + timom*acden*gpadv(inode))*dvolu !aporte newton      
         do jnode=1,e%pnode
         
         aux3= e%shape(jnode,e%igaus)*aux2
         
         elmat(1,inode,1,jnode)= aux1*(e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(2,inode)*e%cartd(2,jnode)) &
            + aux3*(acden*grvel(1,1))  + elmat(1,inode,1,jnode)            
         elmat(1,inode,2,jnode)= aux3*(acden*grvel(1,2)) + elmat(1,inode,2,jnode)         
         elmat(2,inode,1,jnode)= aux3*(acden*grvel(2,1)) + elmat(2,inode,1,jnode)
         elmat(2,inode,2,jnode)= aux1*(e%cartd(1,inode)*e%cartd(1,jnode) + e%cartd(2,inode)*e%cartd(2,jnode)) &
            + aux3*(acden*grvel(2,2)) + elmat(2,inode,2,jnode)
         end do  
      end do
 
   end subroutine supm_elmbuv2VE        
   
   subroutine supm_elmbuvVES(e,auxvms,aux12,auxnewtonG,beta,auxVE,auxG,tisig,gpsig,dvolu,auxtens,grvel,grsig,auxtrac,auxconv,elmat) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxtens,auxvms,auxnewtonG,auxtrac,auxconv,aux12
      real(rp),    intent(in)    :: auxVE,dvolu,gpsig(auxtens),grsig(auxtens,e%ndime),tisig
      real(rp),    intent(in)    :: auxG,grvel(e%ndime,e%ndime),beta
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode,auxstab,aux1
      real(rp)                   :: aux2
      real(rp)                   :: Res11u,Res11v,Res12u,Res12v,Res21u,Res21v,Res22u,Res22v
      
      aux1=1
      auxstab=aux1*auxvms
      
      aux2=(tisig*dvolu)     
      do jnode=1,e%pnode          
      
         Res11u = -(1.0_rp - beta)*e%cartd(1,jnode) &
               + auxVE*(auxconv*e%shape(jnode,e%igaus)*grsig(1,1) - 2.0_rp*auxtrac*(gpsig(1)*e%cartd(1,jnode) + gpsig(3)*e%cartd(2,jnode)))*auxnewtonG
         Res11v = auxVE*(auxconv*e%shape(jnode,e%igaus)*grsig(1,2))*auxnewtonG
         
         Res12u = -((1.0_rp - beta)/2.0_rp)*e%cartd(2,jnode) &
               + auxVE*(auxconv*e%shape(jnode,e%igaus)*grsig(3,1) - auxtrac*(aux12*gpsig(3)*e%cartd(1,jnode) + gpsig(2)*e%cartd(2,jnode)))*auxnewtonG
         Res12v = -((1.0_rp - beta)/2.0_rp)*e%cartd(1,jnode) &
               + auxVE*(auxconv*e%shape(jnode,e%igaus)*grsig(3,2) - auxtrac*(gpsig(1)*e%cartd(1,jnode) + aux12*gpsig(3)*e%cartd(2,jnode)))*auxnewtonG
         
         Res21u = Res12u
         Res21v = Res12v
         
         Res22u = auxVE*(auxconv*e%shape(jnode,e%igaus)*grsig(2,1))*auxnewtonG
         Res22v = -(1.0_rp - beta)*e%cartd(2,jnode) & 
               + auxVE*(auxconv*e%shape(jnode,e%igaus)*grsig(2,2) - 2.0_rp*auxtrac*(gpsig(3)*e%cartd(1,jnode) + gpsig(2)*e%cartd(2,jnode)))*auxnewtonG                 
  
         
         do inode=1,e%pnode        
                                 
         elmat(1,inode,1,jnode) = -aux2*e%cartd(1,inode)*Res11u &
               - aux2*(0.5_rp*e%cartd(2,inode)*Res12u + 0.5_rp*e%cartd(2,inode)*Res21u) &
               + elmat(1,inode,1,jnode) 
               
         elmat(1,inode,2,jnode) = -aux2*e%cartd(1,inode)*Res11v & 
               - aux2*(0.5_rp*e%cartd(2,inode)*Res12v + 0.5_rp*e%cartd(2,inode)*Res21v) &    
               + elmat(1,inode,2,jnode)
         
         elmat(2,inode,1,jnode) = -aux2*e%cartd(2,inode)*Res22u &
               - aux2*(0.5_rp*e%cartd(1,inode)*Res12u + 0.5_rp*e%cartd(1,inode)*Res21u) &              
               + elmat(2,inode,1,jnode)
         
         elmat(2,inode,2,jnode) = -aux2*e%cartd(2,inode)*Res22v &
               - aux2*(0.5_rp*e%cartd(1,inode)*Res12v + 0.5_rp*e%cartd(1,inode)*Res21v) & 
               + elmat(2,inode,2,jnode)                                           

         end do  
      end do

   end subroutine supm_elmbuvVES  
   
   subroutine supm_elmrhcVE(e,auxtrac,auxconv,auxnewtonG,aux12,auxVE,auxG,acvis,timom,acden,dvolu,elext,auxtens,beta,elextS,gpvel,grvel,gpsig,grsig,elrhs)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxnewtonG,auxtrac,auxconv,aux12
      real(rp),    intent(in)    :: elext(e%ndime),elextS(auxtens),gpvel(e%ndime),grvel(e%ndime,e%ndime)
      real(rp),    intent(in)    :: dvolu,timom,beta,acden,acvis,auxG,auxVE,gpsig(auxtens),grsig(auxtens,e%ndime)
      real(rp),    intent(inout) :: elrhs(auxtens,e%mnode)
      integer(ip)                :: inode,aux2
      real(rp)                   :: aux,aux1,aux3
      real(rp)                   :: Res11,Res12,Res21,Res22


      aux  = -timom*dvolu*(1.0_rp-beta)
      aux3 = (auxnewtonG)*(aux*acden)
      do inode=1,e%pnode
      
         aux1=e%shape(inode,e%igaus)*dvolu

         Res11 = elextS(1) + (auxnewtonG*auxVE)*(auxconv*(gpvel(1)*grsig(1,1) + gpvel(2)*grsig(1,2)) &
               - auxtrac*2.0_rp*(grvel(1,1)*gpsig(1) + grvel(1,2)*gpsig(3)) + (auxG/acvis)*(gpsig(1)*gpsig(1) + gpsig(3)*gpsig(3)))
         Res12 = (elextS(3) + auxnewtonG*(auxconv*(gpvel(1)*grsig(3,1) + gpvel(2)*grsig(3,2)) - auxtrac*(grvel(2,1)*gpsig(1) + grvel(1,2)*gpsig(2)) &
               + (auxG/acvis)*(gpsig(1) + gpsig(2))*gpsig(3))*auxVE) - auxVE*(auxnewtonG*auxtrac)*(aux12*((grvel(2,2) + grvel(1,1))))*gpsig(3)
         Res21 = Res12
         Res22 = elextS(2) + (auxnewtonG*auxVE)*(auxconv*(gpvel(1)*grsig(2,1) + gpvel(2)*grsig(2,2)) &
               - auxtrac*2.0_rp*(grvel(2,1)*gpsig(3) + grvel(2,2)*gpsig(2)) + (auxG/acvis)*(gpsig(3)*gpsig(3) + gpsig(2)*gpsig(2)))   
               
      
         elrhs(1,inode) = e%cartd(1,inode)*elext(1)*aux &
               + aux3*e%cartd(1,inode)*(gpvel(1)*grvel(1,1) + gpvel(2)*grvel(1,2)) &
               + aux1*Res11 &
               + elrhs(1,inode) 
         elrhs(2,inode) = e%cartd(2,inode)*elext(2)*aux &
               + aux3*e%cartd(2,inode)*(gpvel(1)*grvel(2,1) + gpvel(2)*grvel(2,2)) &
               + aux1*Res22 &
               + elrhs(2,inode)
         elrhs(3,inode) = (e%cartd(1,inode)*elext(2) + e%cartd(2,inode)*elext(1))*aux & 
               + aux3*e%cartd(2,inode)*(gpvel(1)*grvel(1,1) + gpvel(2)*grvel(1,2)) &
               + aux3*e%cartd(1,inode)*(gpvel(1)*grvel(2,1) + gpvel(2)*grvel(2,2)) &
               + aux1*(Res12 + Res21) &
               + elrhs(3,inode)
  
      end do

   end subroutine supm_elmrhcVE
   
   subroutine supm_elmrhuVE(e,timom,tidiv,acden,auxnewtonG,auxtens,dvolu,elextC,elextS,gpvel,grvel,gpadv,elrhs)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxnewtonG
      real(rp),    intent(in)    :: elextC(1),elextS(auxtens),gpadv(e%pnode),acden
      real(rp),    intent(in)    :: dvolu,tidiv,timom,gpvel(e%ndime),grvel(e%ndime,e%ndime)
      real(rp),    intent(inout) :: elrhs(e%ndime,e%mnode)
      integer(ip)                :: inode,aux3
      real(rp)                   :: aux,aux1,aux2

      aux = tidiv*dvolu 
      do inode=1,e%pnode
      
         aux2= auxnewtonG*(e%shape(inode,e%igaus) + timom*acden*gpadv(inode))*dvolu !aporte newton

         elrhs(1,inode) = e%cartd(1,inode)*elextC(1)*aux &
               + aux2*(acden*(gpvel(1)*grvel(1,1) + gpvel(2)*grvel(1,2))) &
               + elrhs(1,inode) 
         elrhs(2,inode) = e%cartd(2,inode)*elextC(1)*aux &
               + aux2*(acden*(gpvel(1)*grvel(2,1) + gpvel(2)*grvel(2,2))) &               
               + elrhs(2,inode)
  
      end do

   end subroutine supm_elmrhuVE    
     
   subroutine supm_elmrhcVES(e,auxsupg,auxvms,auxvms2,auxgls,auxnewtonG,auxNF,aux12,auxVE,auxG,tisig,acvis,gpsig,grsig,gpvel,grvel &
         ,dvolu,auxtens,elextS,auxtrac,auxtractest,auxconv,elrhs)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxvms,auxnewtonG,auxtrac,auxtractest,auxconv,auxNF,auxsupg,auxgls,aux12,auxvms2
      real(rp),    intent(in)    :: gpsig(auxtens),grsig(auxtens,e%ndime),tisig,elextS(auxtens) 
      real(rp),    intent(in)    :: dvolu,auxVE,auxG,acvis,gpvel(e%ndime),grvel(e%ndime,e%ndime)
      real(rp),    intent(inout) :: elrhs(auxtens,e%mnode)
      integer(ip)                :: inode,aux1,auxstab,aux4,auxstab2,aux6,aux
      real(rp)                   :: aux2,aux3,aux5,gpadv(e%pnode)
      real(rp)                   :: Res11,Res12,Res21,Res22
         
      
      aux1=1
      aux4=auxvms2
      do inode=1,e%pnode
      
         gpadv(inode) = gpvel(1)*e%cartd(1,inode) + gpvel(2)*e%cartd(2,inode)

         aux2=(aux4*e%shape(inode,e%igaus)*(-(tisig/(2.0_rp*acvis)))  + (tisig*auxVE)*(gpadv(inode)*auxsupg))*dvolu         
  
         aux5= (tisig*auxVE)*(e%shape(inode,e%igaus))*dvolu

         Res11 = elextS(1) + (auxnewtonG*auxVE)*(auxconv*(gpvel(1)*grsig(1,1) + gpvel(2)*grsig(1,2)) &
               - auxtrac*2.0_rp*(grvel(1,1)*gpsig(1) + grvel(1,2)*gpsig(3)) + (auxG/acvis)*(gpsig(1)*gpsig(1) + gpsig(3)*gpsig(3)))
         Res12 = (elextS(3) + auxnewtonG*(auxconv*(gpvel(1)*grsig(3,1) + gpvel(2)*grsig(3,2)) - auxtrac*(grvel(2,1)*gpsig(1) + grvel(1,2)*gpsig(2)) &
               + (auxG/acvis)*(gpsig(1) + gpsig(2))*gpsig(3))*auxVE) - auxVE*(auxnewtonG*auxtrac)*(aux12*((grvel(2,2) + grvel(1,1))))*gpsig(3)
         Res21 = Res12
         Res22 = elextS(2) + (auxnewtonG*auxVE)*(auxconv*(gpvel(1)*grsig(2,1) + gpvel(2)*grsig(2,2)) &
               - auxtrac*2.0_rp*(grvel(2,1)*gpsig(3) + grvel(2,2)*gpsig(2)) + (auxG/acvis)*(gpsig(3)*gpsig(3) + gpsig(2)*gpsig(2)))                    
               
               
         elrhs(1,inode) = aux2*Res11 &
               + auxvms*aux5*(auxtractest*2.0_rp*grvel(1,1) - (auxG/acvis)*gpsig(1))*(Res11) &
               - auxgls*aux5*(auxtractest*2.0_rp*grvel(1,1) - (auxG/acvis)*gpsig(1))*(Res11) &               
               + auxvms*aux5*(auxtractest*grvel(1,2)*(Res12) + (auxtractest*grvel(1,2) - (auxG/acvis)*gpsig(3))*(Res21)) &              
               - auxgls*aux5*(auxtractest*grvel(2,1)*(Res12) + (auxtractest*grvel(2,1) - (auxG/acvis)*gpsig(3))*(Res21)) &    
               + elrhs(1,inode) 
               
         elrhs(2,inode) = aux2*Res22 &
               + auxvms*aux5*(auxtractest*2.0_rp*grvel(2,2) - (auxG/acvis)*gpsig(2))*(Res22) & 
               - auxgls*aux5*(auxtractest*2.0_rp*grvel(2,2) - (auxG/acvis)*gpsig(2))*(Res22) &                   
               + auxvms*aux5*((auxtractest*grvel(2,1) - (auxG/acvis)*gpsig(3))*(Res12) + auxtractest*grvel(2,1)*(Res21)) &   
               - auxgls*aux5*((auxtractest*grvel(1,2) - (auxG/acvis)*gpsig(3))*(Res12) + auxtractest*grvel(1,2)*(Res21)) &                   
               + elrhs(2,inode)
               
         elrhs(3,inode) = aux2*(Res12 + Res21)  &
               + auxvms*aux5*(auxtractest*2.0_rp*grvel(2,1) - (auxG/acvis)*gpsig(3))*(Res11) &
               + auxvms*aux5*(auxtractest*2.0_rp*grvel(1,2) - (auxG/acvis)*gpsig(3))*(Res22) &
               + auxvms*aux5*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12 - (auxG/acvis)*gpsig(1))*(Res12)&
               + auxvms*aux5*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12 - (auxG/acvis)*gpsig(2))*(Res21)&   
               - auxgls*aux5*(auxtractest*2.0_rp*grvel(1,2) - (auxG/acvis)*gpsig(3))*(Res11) &
               - auxgls*aux5*(auxtractest*2.0_rp*grvel(2,1) - (auxG/acvis)*gpsig(3))*(Res22) &               
               - auxgls*aux5*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12 - (auxG/acvis)*gpsig(1))*(Res12)&
               - auxgls*aux5*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12 - (auxG/acvis)*gpsig(2))*(Res21)&                  
               + elrhs(3,inode)
  
      end do

   end subroutine supm_elmrhcVES     
   
   
   subroutine supm_elmrhuVES(e,auxvms,auxnewtonG,auxNF,aux12,beta,auxVE,auxG,tisig,acvis,gpsig,grsig,gpvel,grvel,dvolu,auxtens,elext,elextS,auxtrac,auxconv,elrhs) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxvms,auxnewtonG,auxtrac,auxconv,auxNF,aux12
      real(rp),    intent(in)    :: gpsig(auxtens),grsig(auxtens,e%ndime),tisig,elext(e%ndime),beta
      real(rp),    intent(in)    :: dvolu,auxVE,auxG,acvis,gpvel(e%ndime),grvel(e%ndime,e%ndime),elextS(auxtens)
      real(rp),    intent(inout) :: elrhs(e%ndime,e%mnode)
      integer(ip)                :: inode,aux1,auxstab,aux3,aux
      real(rp)                   :: aux2
      real(rp)                   :: Res11,Res12,Res21,Res22
      
      aux1=1
      auxstab=aux1*auxvms
      do inode=1,e%pnode
         aux2=(tisig)*dvolu
               
         Res11 = (elextS(1) + auxnewtonG*(auxconv*(gpvel(1)*grsig(1,1) + gpvel(2)*grsig(1,2)) &
               - auxtrac*2.0_rp*(grvel(1,1)*gpsig(1) + grvel(1,2)*gpsig(3)) + (auxG/acvis)*(gpsig(1)*gpsig(1) + gpsig(3)*gpsig(3)))*auxVE)
         Res12 = (elextS(3) + auxnewtonG*(auxconv*(gpvel(1)*grsig(3,1) + gpvel(2)*grsig(3,2)) - auxtrac*(grvel(2,1)*gpsig(1) + aux12*(grvel(2,2) + grvel(1,1))*gpsig(3) + grvel(1,2)*gpsig(2)) &
               + (auxG/acvis)*(gpsig(1) + gpsig(2))*gpsig(3))*auxVE)
         Res21 = Res12
         Res22 = (elextS(2) + auxnewtonG*(auxconv*(gpvel(1)*grsig(2,1) + gpvel(2)*grsig(2,2)) &
               - auxtrac*2.0_rp*(grvel(2,1)*gpsig(3) + grvel(2,2)*gpsig(2)) + (auxG/acvis)*(gpsig(3)*gpsig(3) + gpsig(2)*gpsig(2)))*auxVE)                
     
                           
         elrhs(1,inode) = -e%cartd(1,inode)*aux2*(Res11) &
               - 0.5_rp*e%cartd(2,inode)*aux2*(Res12 + Res21) &
               + elrhs(1,inode) 
               
         elrhs(2,inode) = -e%cartd(2,inode)*aux2*(Res22) &
               - 0.5_rp*e%cartd(1,inode)*aux2*(Res12 + Res21) &   
               + elrhs(2,inode)  
      end do

   end subroutine supm_elmrhuVES
   
   subroutine supm_elmbutNF(e,auxvms,aux12,auxNF,auxVE,beta,auxG,tisig,acvis,gpsig,grsig,gpvel,grvel,dvolu,auxtens,elextS,auxtrac,auxconv,elmat)   
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxvms,aux12,auxtrac,auxconv,auxNF
      real(rp),    intent(in)    :: gpsig(auxtens),grsig(auxtens,e%ndime),tisig,elextS(auxtens) 
      real(rp),    intent(in)    :: dvolu,auxVE,auxG,acvis,gpvel(e%ndime),grvel(e%ndime,e%ndime),beta
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode,aux1,auxstab,aux4,auxstab2
      real(rp)                   :: aux,aux2,aux3,aux5
      real(rp)                   :: Res11,Res12,Res21,Res22
         
      

      aux5=(auxVE*tisig*dvolu)*auxNF
            
      do jnode=1,e%pnode           
         do inode=1,e%pnode
         
         Res11 = -elextS(1) + gpsig(1)/(2.0_rp*acvis) - (1.0_rp - beta)*grvel(1,1) + &
               (auxVE)*(auxconv*(gpvel(1)*grsig(1,1) + gpvel(2)*grsig(1,2)) &
               - auxtrac*2.0_rp*(grvel(1,1)*gpsig(1) + grvel(1,2)*gpsig(3)) + (auxG/acvis)*(gpsig(1)*gpsig(1) + gpsig(3)*gpsig(3)))
         Res12 = -elextS(3) + gpsig(3)/(2.0_rp*acvis) - 0.5_rp*(1.0_rp - beta)*(grvel(1,2)+grvel(2,1)) + &
               ((auxconv*(gpvel(1)*grsig(3,1) + gpvel(2)*grsig(3,2)) - auxtrac*(grvel(2,1)*gpsig(1) + grvel(1,2)*gpsig(2)) &
               + (auxG/acvis)*(gpsig(1) + gpsig(2))*gpsig(3))*auxVE) - auxVE*(auxtrac)*(aux12*((grvel(2,2) + grvel(1,1))))*gpsig(3)
         Res21 = Res12
         Res22 = -elextS(2) + gpsig(2)/(2.0_rp*acvis) - (1.0_rp - beta)*grvel(2,2) + &
               (auxVE)*(auxconv*(gpvel(1)*grsig(2,1) + gpvel(2)*grsig(2,2)) &
               - auxtrac*2.0_rp*(grvel(2,1)*gpsig(3) + grvel(2,2)*gpsig(2)) + (auxG/acvis)*(gpsig(3)*gpsig(3) + gpsig(2)*gpsig(2)))              
         
         elmat(1,inode,1,jnode) = aux5*(e%shape(jnode,e%igaus)*e%cartd(1,inode)*auxconv)*Res11 &
               + aux5*(2.0_rp*e%shape(inode,e%igaus)*e%cartd(1,jnode)*Res11 + e%shape(inode,e%igaus)*e%cartd(2,jnode)*(Res12 + Res21))*auxtrac &       
               + elmat(1,inode,1,jnode) 
               
         elmat(1,inode,2,jnode) = aux5*(e%shape(jnode,e%igaus)*e%cartd(2,inode)*auxconv)*Res11 &            
               + elmat(1,inode,2,jnode)
         
         elmat(2,inode,1,jnode) = aux5*(e%shape(jnode,e%igaus)*e%cartd(1,inode)*auxconv)*Res22 &             
               + elmat(2,inode,1,jnode)
         
         elmat(2,inode,2,jnode) = aux5*(e%shape(jnode,e%igaus)*e%cartd(2,inode)*auxconv)*Res22 &
               + aux5*(2.0_rp*e%shape(inode,e%igaus)*e%cartd(2,jnode)*Res22 + e%shape(inode,e%igaus)*e%cartd(1,jnode)*(Res12 + Res21))*auxtrac &          
               + elmat(2,inode,2,jnode)  
               
         elmat(3,inode,1,jnode) = aux5*(e%shape(jnode,e%igaus)*e%cartd(1,inode)*auxconv)*(Res12 + Res21) &
               + aux5*(e%shape(inode,e%igaus)*e%cartd(1,jnode)*(Res12 + Res21)*aux12 + 2.0_rp*e%shape(inode,e%igaus)*e%cartd(2,jnode)*Res22)*auxtrac &                  
               + elmat(3,inode,1,jnode) 
               
         elmat(3,inode,2,jnode) = aux5*(e%shape(jnode,e%igaus)*e%cartd(2,inode)*auxconv)*(Res12 + Res21) &
               + aux5*(e%shape(inode,e%igaus)*e%cartd(2,jnode)*(Res12 + Res21)*aux12 + 2.0_rp*e%shape(inode,e%igaus)*e%cartd(1,jnode)*Res11)*auxtrac &                        
               + elmat(3,inode,2,jnode)                                          

         end do  
      end do 


   end subroutine supm_elmbutNF    
   
   
   subroutine supm_elmrhcNF(e,auxsupg,auxvms,auxvms2,auxgls,auxNF,aux12,auxVE,beta,auxG,tisig,acvis,gpsig,grsig,gpvel,grvel &
         ,dvolu,auxtens,auxtrac,auxtractest,auxconv,elrhs)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxvms,auxtrac,auxtractest,auxconv,auxNF,auxsupg,auxgls,aux12,auxvms2
      real(rp),    intent(in)    :: gpsig(auxtens),grsig(auxtens,e%ndime),tisig,beta 
      real(rp),    intent(in)    :: dvolu,auxVE,auxG,acvis,gpvel(e%ndime),grvel(e%ndime,e%ndime)
      real(rp),    intent(inout) :: elrhs(auxtens,e%mnode)
      integer(ip)                :: inode,aux1,auxstab,aux4,auxstab2,aux6,aux
      real(rp)                   :: aux2,aux3,aux5,gpadv(e%pnode)
      real(rp)                   :: Res11,Res12,Res21,Res22
         
      
      aux1=1
      aux4=auxvms2
      do inode=1,e%pnode
      
         gpadv(inode) = gpvel(1)*e%cartd(1,inode) + gpvel(2)*e%cartd(2,inode)

         aux2=auxNF*(aux4*e%shape(inode,e%igaus)*(-(tisig/(2.0_rp*acvis)))  + (tisig*auxVE)*(gpadv(inode)*auxsupg))*dvolu         
  
         aux5= auxNF*(tisig*auxVE)*(e%shape(inode,e%igaus))*dvolu

         Res11 = gpsig(1)/(2.0_rp*acvis) - (1.0_rp - beta)*grvel(1,1) + &
               (auxVE)*(auxconv*(gpvel(1)*grsig(1,1) + gpvel(2)*grsig(1,2)) &
               - auxtrac*2.0_rp*(grvel(1,1)*gpsig(1) + grvel(1,2)*gpsig(3)) + (auxG/acvis)*(gpsig(1)*gpsig(1) + gpsig(3)*gpsig(3)))
         Res12 = gpsig(3)/(2.0_rp*acvis) - 0.5_rp*(1.0_rp - beta)*(grvel(1,2)+grvel(2,1)) + &
               ((auxconv*(gpvel(1)*grsig(3,1) + gpvel(2)*grsig(3,2)) - auxtrac*(grvel(2,1)*gpsig(1) + grvel(1,2)*gpsig(2)) &
               + (auxG/acvis)*(gpsig(1) + gpsig(2))*gpsig(3))*auxVE) - auxVE*(auxtrac)*(aux12*((grvel(2,2) + grvel(1,1))))*gpsig(3)
         Res21 = Res12
         Res22 = gpsig(2)/(2.0_rp*acvis) - (1.0_rp - beta)*grvel(2,2) + &
               (auxVE)*(auxconv*(gpvel(1)*grsig(2,1) + gpvel(2)*grsig(2,2)) &
               - auxtrac*2.0_rp*(grvel(2,1)*gpsig(3) + grvel(2,2)*gpsig(2)) + (auxG/acvis)*(gpsig(3)*gpsig(3) + gpsig(2)*gpsig(2)))                    
               
               
         elrhs(1,inode) = aux2*Res11 &
               + auxvms*aux5*(auxtractest*2.0_rp*grvel(1,1) - (auxG/acvis)*gpsig(1))*(Res11) &
               - auxgls*aux5*(auxtractest*2.0_rp*grvel(1,1) - (auxG/acvis)*gpsig(1))*(Res11) &               
               + auxvms*aux5*(auxtractest*grvel(1,2)*(Res12) + (auxtractest*grvel(1,2) - (auxG/acvis)*gpsig(3))*(Res21)) &              
               - auxgls*aux5*(auxtractest*grvel(2,1)*(Res12) + (auxtractest*grvel(2,1) - (auxG/acvis)*gpsig(3))*(Res21)) &    
               + elrhs(1,inode) 
               
         elrhs(2,inode) = aux2*Res22 &
               + auxvms*aux5*(auxtractest*2.0_rp*grvel(2,2) - (auxG/acvis)*gpsig(2))*(Res22) & 
               - auxgls*aux5*(auxtractest*2.0_rp*grvel(2,2) - (auxG/acvis)*gpsig(2))*(Res22) &                   
               + auxvms*aux5*((auxtractest*grvel(2,1) - (auxG/acvis)*gpsig(3))*(Res12) + auxtractest*grvel(2,1)*(Res21)) &   
               - auxgls*aux5*((auxtractest*grvel(1,2) - (auxG/acvis)*gpsig(3))*(Res12) + auxtractest*grvel(1,2)*(Res21)) &                   
               + elrhs(2,inode)
               
         elrhs(3,inode) = aux2*(Res12 + Res21)  &
               + auxvms*aux5*(auxtractest*2.0_rp*grvel(2,1) - (auxG/acvis)*gpsig(3))*(Res11) &
               + auxvms*aux5*(auxtractest*2.0_rp*grvel(1,2) - (auxG/acvis)*gpsig(3))*(Res22) &
               + auxvms*aux5*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12 - (auxG/acvis)*gpsig(1))*(Res12)&
               + auxvms*aux5*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12 - (auxG/acvis)*gpsig(2))*(Res21)&   
               - auxgls*aux5*(auxtractest*2.0_rp*grvel(1,2) - (auxG/acvis)*gpsig(3))*(Res11) &
               - auxgls*aux5*(auxtractest*2.0_rp*grvel(2,1) - (auxG/acvis)*gpsig(3))*(Res22) &               
               - auxgls*aux5*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12 - (auxG/acvis)*gpsig(1))*(Res12)&
               - auxgls*aux5*(auxtractest*(grvel(1,1) + grvel(2,2))*aux12 - (auxG/acvis)*gpsig(2))*(Res21)&                  
               + elrhs(3,inode)
  
      end do

   end subroutine supm_elmrhcNF     
   
   
!    subroutine supm_elmrhuNF(e,auxvms,auxnewton,auxNF,auxVE,auxG,tisig,acvis,gpsig,grsig,gpvel,grvel,dvolu,auxtens,elext,elextS,auxtrac,auxconv,elrhs)   
!     !-----------------------------------------------------------------------
!     !
!     ! This routine computes the rhs terms for ASGS in constitutive equation
!     !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
!     !
!     !-----------------------------------------------------------------------
!       implicit none
!       class(FiniteElement) :: e
! 
!       integer(ip), intent(in)    :: auxtens,auxvms,auxnewton,auxtrac,auxconv,auxNF
!       real(rp),    intent(in)    :: gpsig(auxtens),grsig(auxtens,e%ndime),tisig,elext(e%ndime)
!       real(rp),    intent(in)    :: dvolu,auxVE,auxG,acvis,gpvel(e%ndime),grvel(e%ndime,e%ndime),elextS(auxtens)
!       real(rp),    intent(inout) :: elrhs(e%ndime,e%mnode)
!       integer(ip)                :: inode,aux1,auxstab
!       real(rp)                   :: aux2
!       real(rp)                   :: Res11,Res12,Res21,Res22
!       
!       aux1=1
!       auxstab=aux1*auxvms
!       
!       do inode=1,e%pnode
!       
!          aux2= (tisig*auxvms)*dvolu*auxNF
! 
!          Res11 = (-elextS(1) + auxnewton*(auxconv*(gpvel(1)*grsig(1,1) + gpvel(2)*grsig(1,2)) &
!                - auxtrac*2.0_rp*(grvel(1,1)*gpsig(1) + grvel(1,2)*gpsig(3)) + (auxG/acvis)*(gpsig(1)*gpsig(1) + gpsig(3)*gpsig(3)))*auxVE)
!          Res12 = (-elextS(3) + auxnewton*(auxconv*(gpvel(1)*grsig(3,1) + gpvel(2)*grsig(3,2)) - auxtrac*(grvel(2,1)*gpsig(1) + (grvel(2,2) + grvel(1,1))*gpsig(3) + grvel(1,2)*gpsig(2)) &
!                + (auxG/acvis)*(gpsig(1) + gpsig(2))*gpsig(3))*auxVE)
!          Res21 = Res12
!          Res22 = (-elextS(2) + auxnewton*(auxconv*(gpvel(1)*grsig(2,1) + gpvel(2)*grsig(2,2)) &
!                - auxtrac*2.0_rp*(grvel(2,1)*gpsig(3) + grvel(2,2)*gpsig(2)) + (auxG/acvis)*(gpsig(3)*gpsig(3) + gpsig(2)*gpsig(2)))*auxVE)
!          
!          
!          elrhs(1,inode) = e%cartd(inode,1)*aux2*(Res11) + e%cartd(inode,2)*aux2*(Res12 + Res21) &
!                + elrhs(1,inode) 
!                
!          elrhs(2,inode) = e%cartd(inode,2)*aux2*(Res22) + e%cartd(inode,1)*aux2*(Res12 + Res21) &
!                + elrhs(2,inode)
!   
!       end do
! 
!    end subroutine supm_elmrhuNF  


      

    
   subroutine supm_elmbutHES3(e,beta,acvis,timom,dvolu,auxtens,elmat) 
   
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: dvolu,acvis,timom,beta      
      real(rp),    intent(inout) :: elmat(auxtens,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode,auxvms
      real(rp)                   :: aux4,auxvis

                                     
                                    
      aux4=-timom*dvolu*(1.0_rp-beta)
      
      do inode=1,e%pnode     
         do jnode=1,e%pnode   

         auxvis= (-2.0_rp)*(beta*acvis)*(e%hessi(1,jnode) + e%hessi(2,jnode) + e%hessi(3,jnode))                    
                           
         
         elmat(1,inode,1,jnode) = aux4*e%cartd(1,inode)*(auxvis) &                  
               + elmat(1,inode,1,jnode)                                    
         elmat(1,inode,2,jnode) = 0.0_rp + elmat(1,inode,2,jnode)
         elmat(1,inode,3,jnode) = 0.0_rp + elmat(1,inode,3,jnode)
         
         elmat(2,inode,1,jnode) = 0.0_rp + elmat(2,inode,1,jnode) 
         elmat(2,inode,2,jnode) = aux4*e%cartd(2,inode)*(auxvis) &                  
               + elmat(2,inode,2,jnode)
         elmat(2,inode,3,jnode) = 0.0_rp + elmat(2,inode,3,jnode)                
               
         elmat(3,inode,1,jnode) = 0.0_rp + elmat(3,inode,1,jnode)                                                   
         elmat(3,inode,2,jnode) = 0.0_rp + elmat(3,inode,2,jnode)
         elmat(3,inode,3,jnode) = aux4*e%cartd(3,inode)*(auxvis) &                  
               + elmat(3,inode,3,jnode)
               
         elmat(4,inode,1,jnode) = 0.0_rp + elmat(4,inode,1,jnode)                                      
         elmat(4,inode,2,jnode) = aux4*e%cartd(3,inode)*(auxvis) &                  
               + elmat(4,inode,2,jnode)
         elmat(4,inode,3,jnode) = aux4*e%cartd(2,inode)*(auxvis) &                  
               + elmat(4,inode,3,jnode)
         
         elmat(5,inode,1,jnode) = aux4*e%cartd(3,inode)*(auxvis) &                  
               + elmat(5,inode,1,jnode) 
         elmat(5,inode,2,jnode) = 0.0_rp + elmat(5,inode,2,jnode)
         elmat(5,inode,3,jnode) = aux4*e%cartd(1,inode)*(auxvis) &                 
               + elmat(5,inode,3,jnode)                
               
         elmat(6,inode,1,jnode) = aux4*e%cartd(2,inode)*(auxvis) &                  
               + elmat(6,inode,1,jnode)                                                    
         elmat(6,inode,2,jnode) = aux4*e%cartd(1,inode)*(auxvis) &                  
               + elmat(6,inode,2,jnode)  
         elmat(6,inode,3,jnode) = 0.0_rp + elmat(6,inode,3,jnode)               

         end do  
      end do

   end subroutine supm_elmbutHES3     
   

   
   subroutine supm_elmbsvHES3(e,beta,acvis,timom,dvolu,auxtens,elmat)

   
    !-----------------------------------------------------------------------
    !
    ! This routine computes the first lhs term for ASGS in constitutive equation
    !    (-(1/2eta)*tau + auxVE*a*grad(tau),R_constituitva)
    !   +(auxVE*(2*grad(a)*tau -(auxG/eta)*sigma*tau),R_constituitva)
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: acvis,dvolu,beta,timom     
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,auxtens,e%mnode)
      integer(ip)                :: inode,jnode,auxvms
      real(rp)                   :: aux3,auxvis

                                    

      aux3= (-2.0_rp)*(beta*acvis)*dvolu*timom
      do inode=1,e%pnode
         auxvis= aux3*(e%hessi(1,inode) + e%hessi(2,inode) + e%hessi(3,inode))
         do jnode=1,e%pnode
         
         
         elmat(1,inode,1,jnode) = auxvis*e%cartd(1,jnode) &
               + elmat(1,inode,1,jnode)
               
         elmat(1,inode,2,jnode) = 0.0_rp + elmat(1,inode,2,jnode)
               
         elmat(1,inode,3,jnode) = 0.0_rp + elmat(1,inode,3,jnode)
               
         elmat(1,inode,4,jnode) = 0.0_rp + elmat(1,inode,4,jnode)
               
         elmat(1,inode,5,jnode) = auxvis*e%cartd(3,jnode) &               
               + elmat(1,inode,5,jnode)
               
         elmat(1,inode,6,jnode) = auxvis*e%cartd(2,jnode) &               
               + elmat(1,inode,6,jnode)
               
         elmat(2,inode,1,jnode) = 0.0_rp + elmat(2,inode,1,jnode)
         
         elmat(2,inode,2,jnode) = auxvis*e%cartd(2,jnode) &              
               + elmat(2,inode,2,jnode)
               
         elmat(2,inode,3,jnode) = 0.0_rp + elmat(2,inode,3,jnode)
               
         elmat(2,inode,4,jnode) = auxvis*e%cartd(3,jnode) &               
               + elmat(2,inode,4,jnode)
         
         elmat(2,inode,5,jnode) = 0.0_rp + elmat(2,inode,5,jnode)
               
         elmat(2,inode,6,jnode) = auxvis*e%cartd(1,jnode) &               
               + elmat(2,inode,6,jnode)
               
         elmat(3,inode,1,jnode) = 0.0_rp + elmat(3,inode,1,jnode)
         
         elmat(3,inode,3,jnode) = 0.0_rp + elmat(3,inode,2,jnode)
               
         elmat(3,inode,3,jnode) = auxvis*e%cartd(3,jnode) &               
               + elmat(3,inode,3,jnode)
               
         elmat(3,inode,4,jnode) = auxvis*e%cartd(2,jnode) &               
               + elmat(3,inode,4,jnode)
         
         elmat(3,inode,5,jnode) = auxvis*e%cartd(1,jnode) &               
               + elmat(3,inode,5,jnode)
               
         elmat(3,inode,6,jnode) = 0.0_rp + elmat(3,inode,6,jnode)                  

         end do
      end do   

   end subroutine supm_elmbsvHES3      
   
   subroutine supm_elmbuvHES3(e,beta,acvis,acden,timom,dvolu,auxtens,gpadv,dtinv,elmat) 
   
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: dvolu,gpadv(e%pnode)
      real(rp),    intent(in)    :: acvis,beta,acden,timom,dtinv
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux3,auxt,aux4,aux5   

      aux3=2.0_rp*beta*acvis
      
      do inode=1,e%pnode      
         aux5= aux3*(e%hessi(1,inode) + e%hessi(2,inode) + e%hessi(3,inode))*timom*dvolu         
         do jnode=1,e%pnode 
         
         aux4 = (e%shape(jnode,e%igaus)*auxt + acden*gpadv(jnode) - aux3*(e%hessi(1,jnode) + e%hessi(2,jnode) + e%hessi(3,jnode)))            
                                
         elmat(1,inode,1,jnode) = - e%shape(inode,e%igaus)*aux3*(e%hessi(1,jnode) + e%hessi(2,jnode) + e%hessi(3,jnode)) + aux5*aux4 &               
               + elmat(1,inode,1,jnode) 
               
         elmat(1,inode,2,jnode) = 0.0_rp + elmat(1,inode,2,jnode)
               
         elmat(1,inode,3,jnode) = 0.0_rp + elmat(1,inode,3,jnode)
               
         elmat(2,inode,1,jnode) = 0.0_rp + elmat(2,inode,1,jnode)
         
         elmat(2,inode,2,jnode) = - e%shape(inode,e%igaus)*aux3*(e%hessi(1,jnode) + e%hessi(2,jnode) + e%hessi(3,jnode)) + aux5*aux4 &                     
               + elmat(2,inode,2,jnode)                 

         elmat(2,inode,3,jnode) = 0.0_rp + elmat(2,inode,3,jnode)
               
         elmat(3,inode,1,jnode) = 0.0_rp + elmat(3,inode,1,jnode)
         
         elmat(3,inode,2,jnode) = 0.0_rp + elmat(3,inode,2,jnode)                 

         elmat(3,inode,3,jnode) = - e%shape(inode,e%igaus)*aux3*(e%hessi(1,jnode) + e%hessi(2,jnode) + e%hessi(3,jnode)) + aux5*aux4 &                     
               + elmat(3,inode,3,jnode)                

         end do  
      end do

   end subroutine supm_elmbuvHES3    
   
   subroutine supm_elmbpvHES3(e,beta,acvis,timom,dvolu,elmat) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      real(rp),    intent(in)    :: dvolu,timom,acvis,beta
      real(rp),    intent(inout) :: elmat(e%ndime,e%mnode,1,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux1,aux2 
      

      aux1=2.0_rp*beta*acvis*dvolu*timom      
      do inode=1,e%pnode      
         aux2= aux1*(e%hessi(1,inode) + e%hessi(2,inode) + e%hessi(3,inode))      
         do jnode=1,e%pnode                 
                 
         elmat(1,inode,1,jnode) = aux2*e%cartd(1,jnode) &
               + elmat(1,inode,1,jnode)                
         
         elmat(2,inode,1,jnode) = aux2*e%cartd(2,jnode) &          
               + elmat(2,inode,1,jnode)
               
         elmat(3,inode,1,jnode) = aux2*e%cartd(3,jnode) &          
               + elmat(3,inode,1,jnode)
         end do
      end do

   end subroutine supm_elmbpvHES3  
   
   
   subroutine supm_elmbuqHES3(e,beta,acvis,timom,dvolu,elmat) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the second lhs term for ASGS in constitutive equation
    ! -(gra_sym(u),T) +tau3(gra_sym(u),1/2mu*T) -tau1(Div(T),rho*a*grad(u)+rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e
      real(rp),    intent(in)    :: dvolu,timom,acvis,beta
      real(rp),    intent(inout) :: elmat(1,e%mnode,e%ndime,e%mnode)
      integer(ip)                :: inode,jnode
      real(rp)                   :: aux1,aux2 
      
      aux1= (-2.0_rp)*(beta*acvis)*dvolu*timom      
      do jnode=1,e%pnode      
         aux2= aux1*(e%hessi(1,jnode) + e%hessi(2,jnode) + e%hessi(3,jnode))      
         do inode=1,e%pnode                 
                 
         elmat(1,inode,1,jnode) = aux2*e%cartd(1,inode) &
               + elmat(1,inode,1,jnode)                
         
         elmat(1,inode,2,jnode) = aux2*e%cartd(2,inode) &          
               + elmat(1,inode,2,jnode)
               
         elmat(1,inode,3,jnode) = aux2*e%cartd(3,inode) &          
               + elmat(1,inode,3,jnode)
         end do
      end do

   end subroutine supm_elmbuqHES3     





   
   subroutine supm_elmrhuHES3(e,beta,timom,acvis,dvolu,auxtens,elext,elrhs)   
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens
      real(rp),    intent(in)    :: elext(e%ndime),dvolu,acvis,beta,timom 
      real(rp),    intent(inout) :: elrhs(e%ndime,e%mnode)
      integer(ip)                :: inode
      real(rp)                   :: aux3,auxvis      
                     

      aux3= (2.0_rp*beta*acvis)*timom*dvolu
      do inode=1,e%pnode
         auxvis=aux3*(e%hessi(1,inode) + e%hessi(2,inode) + e%hessi(3,inode))               
         
         elrhs(1,inode) = auxvis*elext(1) &
               + elrhs(1,inode) 
               
         elrhs(2,inode) = auxvis*elext(2) &               
               + elrhs(2,inode)
               
         elrhs(3,inode) = auxvis*elext(3) &               
               + elrhs(3,inode)               
  
      end do

   end subroutine supm_elmrhuHES3   
   
   !-----------------------------------------------------------------------------------
   !FOR RESIDUAL PROJECTION
   
   !This suborutine computes the residual at a Gauss point
   subroutine supm_elmrfe_oto(e,dtnsi,acden,acvis,veadv, &
         vegau,gpsig,grapr,grave,grasig,auxtens,elext,resim)
      use typre
      implicit none
      class(FiniteElement)        :: e
      integer(ip) :: auxtens
      real(rp) :: dtnsi,acden,veadv(e%ndime),vegau(e%ndime),grapr(e%ndime),grave(e%ndime,e%ndime),resim(auxtens+e%ndime+1)
      real(rp) :: gpsig(auxtens),grasig(auxtens,e%ndime),acvis
      real(rp) :: elext(e%ndime)
      real(rp) :: aux,aux2
      
      
      integer(ip) :: idime,jdime
      
      resim = 0.0_rp
      aux=1.0_rp/(2.0_rp*acvis)
      aux2=1.0_rp
      
      !Residual in constitutive equation
      resim(1)=aux*gpsig(1)-aux2*grave(1,1)
      resim(2)=aux*gpsig(2)-aux2*grave(2,2)
      resim(3)=aux*gpsig(3)-aux2*0.5_rp*(grave(1,2)+grave(2,1))
      
      !Temporal derivative LHS
      resim(auxtens+1:auxtens+e%ndime) = resim(auxtens+1:auxtens+e%ndime) + acden*dtnsi*vegau
      
      !RHS (Temporal derivative + External forces)
      resim(auxtens+1:auxtens+e%ndime) = resim(auxtens+1:auxtens+e%ndime) - elext
      
      !Contribution from pressure term
      !Pressure Gradient
      resim(auxtens+1:auxtens+e%ndime) = resim(auxtens+1:auxtens+e%ndime) + grapr     

      !Contribution from the convective term
      do jdime = 1,e%ndime
         resim(auxtens+1:auxtens+e%ndime) = resim(auxtens+1:auxtens+e%ndime) + acden*veadv(jdime)*grave(:,jdime) 
      end do

      !Contribution from the divergence of sigma
      
      resim(4)= resim(4) - (grasig(1,1) + grasig(3,2))
      resim(5)= resim(5) - (grasig(2,2) + grasig(3,1))

      !Contribution from the divergence term
      do idime = 1,e%ndime                              
         resim(auxtens+e%ndime+1) = resim(auxtens+e%ndime+1) + grave(idime,idime)
      end do

   end subroutine supm_elmrfe_oto 
   
   subroutine supm_elmrfeVE_oto(e,dtnsi,acden,acvis,beta,lambda,auxVE,auxG,auxPTT,veadv, &
         vegau,gpsig,grapr,grave,grasig,auxtens,elext,elextC,elextS,resim)        
         
      use typre
      implicit none
      class(FiniteElement)        :: e
      integer(ip), intent(in) :: auxtens,auxPTT
      real(rp), intent(in)    :: dtnsi,acden,veadv(e%ndime),vegau(e%ndime),grapr(e%ndime),grave(e%ndime,e%ndime)
      real(rp), intent(in)    :: gpsig(auxtens),grasig(auxtens,e%ndime),acvis,elextC(1),elextS(auxtens)
      real(rp), intent(in)    :: elext(e%ndime),beta,auxVE,auxG,lambda
      real(rp), intent(out)   :: resim(auxtens+e%ndime+1)
      real(rp) ::  aux,traza     
      integer(ip) :: idime,jdime
      
      resim = 0.0_rp
      aux=1.0_rp/(2.0_rp*acvis)
      
      traza=(gpsig(1) + gpsig(2))

      !Residual in constitutive equation
      resim(1)= (aux*gpsig(1) - (1.0_rp - beta)*grave(1,1)) + auxVE*(veadv(1)*grasig(1,1) + veadv(2)*grasig(1,2) &
            - 2.0_rp*(gpsig(1)*grave(1,1) + gpsig(3)*grave(1,2)) + auxPTT*(auxG/acvis)*(gpsig(1)*gpsig(1) + gpsig(3)*gpsig(3))) &
            + auxVE*(1_ip - auxPTT)*(auxG/acvis)*(traza)*gpsig(1) &
            + (auxVE*gpsig(1)*dtnsi - elextS(1))
            
      resim(2)= (aux*gpsig(2) - (1.0_rp - beta)*grave(2,2)) + auxVE*(veadv(1)*grasig(2,1) + veadv(2)*grasig(2,2) &
            - 2.0_rp*(gpsig(3)*grave(2,1) + gpsig(2)*grave(2,2)) + auxPTT*(auxG/acvis)*(gpsig(3)*gpsig(3) + gpsig(2)*gpsig(2))) &
            + auxVE*(1_ip - auxPTT)*(auxG/acvis)*(traza)*gpsig(2) &
            + (auxVE*gpsig(2)*dtnsi - elextS(2))
            
      resim(3)= (aux*gpsig(3) - 0.5_rp*(1.0_rp - beta)*(grave(1,2) + grave(2,1))) + auxVE*(veadv(1)*grasig(3,1) + veadv(2)*grasig(3,2) &
             - (gpsig(1)*grave(2,1) + gpsig(2)*grave(1,2)) + (auxG/acvis)*gpsig(3)*(gpsig(2) + gpsig(1))) &
             + (auxVE*gpsig(3)*dtnsi - elextS(3))
            
      !Temporal derivative LHS, RHS (Temporal derivative + External forces)
      resim(4) = resim(4) + acden*dtnsi*vegau(1) - elext(1)
      resim(5) = resim(5) + acden*dtnsi*vegau(2) - elext(2)
      
      !Contribution from pressure term
      !Pressure Gradient
      resim(4) = resim(4) + grapr(1)
      resim(5) = resim(5) + grapr(2)

      !Contribution from the convective term
      resim(4) = resim(4) + acden*(veadv(1)*grave(1,1) + veadv(2)*grave(1,2))
      resim(5) = resim(5) + acden*(veadv(1)*grave(2,1) + veadv(2)*grave(2,2))

      !Contribution from the divergence of sigma
      
      resim(4)= resim(4) - (grasig(1,1) + grasig(3,2))
      resim(5)= resim(5) - (grasig(2,2) + grasig(3,1))

      !Contribution from the divergence term    
      resim(6) = grave(1,1) + grave(2,2) - elextC(1)

   end subroutine supm_elmrfeVE_oto    
   
   subroutine supm_elmrfe3_oto(e,dtnsi,acden,acvis,veadv, &
         vegau,gpsig,grapr,grave,grasig,auxtens,elext,resim)
      
      use typre
      implicit none
      class(FiniteElement)        :: e
      integer(ip) :: auxtens
      real(rp) :: dtnsi,acden,veadv(e%ndime),vegau(e%ndime),grapr(e%ndime),grave(e%ndime,e%ndime),resim(auxtens+e%ndime+1)
      real(rp) :: gpsig(auxtens),grasig(auxtens,e%ndime),acvis
      real(rp) :: elext(e%ndime)
      real(rp) :: aux,aux2      
      
      integer(ip) :: idime,jdime
      
      resim = 0.0_rp
      aux=1.0_rp/(2.0_rp*acvis)
      aux2=1.0_rp
      
      !Residual in constitutive equation
      resim(1)=aux*gpsig(1)-grave(1,1) 
      resim(2)=aux*gpsig(2)-grave(2,2) 
      resim(3)=aux*gpsig(3)-grave(3,3)
      resim(4)=aux*gpsig(4)-0.5_rp*(grave(2,3)+grave(3,2))
      resim(5)=aux*gpsig(5)-0.5_rp*(grave(3,1)+grave(1,3)) 
      resim(6)=aux*gpsig(5)-0.5_rp*(grave(2,1)+grave(1,2)) 
      
      !Temporal derivative LHS
      resim(auxtens+1:auxtens+e%ndime) = resim(auxtens+1:auxtens+e%ndime) + acden*dtnsi*vegau
      
      !RHS (Temporal derivative + External forces)
      resim(auxtens+1:auxtens+e%ndime) = resim(auxtens+1:auxtens+e%ndime) - elext
      
      !Contribution from pressure term
      !Pressure Gradient
      resim(auxtens+1:auxtens+e%ndime) = resim(auxtens+1:auxtens+e%ndime) + grapr     

      !Contribution from the convective term
      do jdime = 1,e%ndime
         resim(auxtens+1:auxtens+e%ndime) = resim(auxtens+1:auxtens+e%ndime) + acden*veadv(jdime)*grave(:,jdime) 
      end do

      !Contribution from the divergence of sigma
      
      resim(auxtens+1)= resim(auxtens+1) - (grasig(1,1) + grasig(6,2) + grasig(5,3))
      resim(auxtens+2)= resim(auxtens+2) - (grasig(2,2) + grasig(6,1) + grasig(4,3))
      resim(auxtens+3)= resim(auxtens+3) - (grasig(3,3) + grasig(4,2) + grasig(5,1)) 

      !Contribution from the divergence term
      do idime = 1,e%ndime                              
         resim(auxtens+e%ndime+1) = resim(auxtens+e%ndime+1) + grave(idime,idime)
      end do

   end subroutine supm_elmrfe3_oto    
           
         
   subroutine supm_elmrfe3VE_oto(e,dtnsi,acden,acvis,beta,lambda,auxVE,auxG,auxPTT,veadv, &
         vegau,gpsig,grapr,grave,grasig,auxtens,elext,elextC,elextS,resim)        
         
      use typre
      implicit none
      class(FiniteElement)        :: e
      integer(ip), intent(in) :: auxtens,auxPTT
      real(rp), intent(in)    :: dtnsi,acden,veadv(e%ndime),vegau(e%ndime),grapr(e%ndime),grave(e%ndime,e%ndime)
      real(rp), intent(in)    :: gpsig(auxtens),grasig(auxtens,e%ndime),acvis,elextC(1),elextS(auxtens)
      real(rp), intent(in)    :: elext(e%ndime),beta,auxVE,auxG,lambda
      real(rp), intent(out)   :: resim(auxtens+e%ndime+1)
      real(rp) ::  aux,traza     
      integer(ip) :: idime,jdime
      
      resim = 0.0_rp
      aux=1.0_rp/(2.0_rp*acvis)        
         
      
      traza = (gpsig(1) + gpsig(2) + gpsig(3))
      
      !Residual in constitutive equation
      resim(1) = aux*gpsig(1) - (1.0_rp-beta)*grave(1,1) + auxVE*(veadv(1)*grasig(1,1) + veadv(2)*grasig(1,2) + veadv(3)*grasig(1,3) &
               -2.0_rp*(gpsig(1)*grave(1,1) + gpsig(6)*grave(1,2) + gpsig(5)*grave(1,3)) &
               + auxPTT*(auxG/acvis)*(gpsig(1)*gpsig(1) + gpsig(6)*gpsig(6) + gpsig(5)*gpsig(5)))  &
               + auxVE*(1_ip - auxPTT)*(auxG/acvis)*(traza)*gpsig(1) &
               + auxVE*dtnsi*gpsig(1) - elextS(1)
            
      resim(2)=aux*gpsig(2) - (1.0_rp - beta)*grave(2,2) + auxVE*(veadv(1)*grasig(2,1) + veadv(2)*grasig(2,2) + veadv(3)*grasig(2,3) & 
               -2.0_rp*(gpsig(6)*grave(2,1) + gpsig(2)*grave(2,2) + gpsig(4)*grave(2,3)) &
               + auxPTT*(auxG/acvis)*(gpsig(6)*gpsig(6) + gpsig(2)*gpsig(2) + gpsig(4)*gpsig(4)))  &
               + auxVE*(1_ip - auxPTT)*(auxG/acvis)*(traza)*gpsig(2) &
               + auxVE*dtnsi*gpsig(2) - elextS(2)
            
      resim(3)=aux*gpsig(3) - (1.0_rp-beta)*grave(3,3) + auxVE*(veadv(1)*grasig(3,1) + veadv(2)*grasig(3,2) + veadv(3)*grasig(3,3) &
               -2.0_rp*(gpsig(5)*grave(3,1) + gpsig(4)*grave(3,2) + gpsig(3)*grave(3,3)) &
               + auxPTT*(auxG/acvis)*(gpsig(5)*gpsig(5) + gpsig(4)*gpsig(4) + gpsig(3)*gpsig(3))) &
               + auxVE*(1_ip - auxPTT)*(auxG/acvis)*(traza)*gpsig(3) &
               + auxVE*dtnsi*gpsig(3)  - elextS(3)
            
      resim(4)=aux*gpsig(4)-0.5_rp*(1.0_rp-beta)*(grave(2,3)+grave(3,2)) + auxVE*(veadv(1)*grasig(4,1) + veadv(2)*grasig(4,2) + veadv(3)*grasig(4,3) &
               -(gpsig(6)*grave(3,1) + gpsig(2)*grave(3,2) + gpsig(5)*grave(2,1) + gpsig(4)*(grave(3,3) + grave(2,2)) + gpsig(3)*grave(2,3)) &
               + auxPTT*(auxG/acvis)*(gpsig(6)*gpsig(5) + gpsig(2)*gpsig(4) + gpsig(4)*gpsig(3))) &
               + auxVE*(1_ip - auxPTT)*(auxG/acvis)*(traza)*gpsig(4) &
               + auxVE*dtnsi*gpsig(4) - elextS(4)
            
      resim(5)=aux*gpsig(5)-0.5_rp*(1.0_rp - beta)*(grave(1,3)+grave(3,1)) + auxVE*(veadv(1)*grasig(5,1) + veadv(2)*grasig(5,2) + veadv(3)*grasig(5,3) &
               -(gpsig(1)*grave(3,1) + gpsig(6)*grave(3,2) + gpsig(5)*(grave(1,1) + grave(3,3)) + gpsig(4)*grave(1,2) + gpsig(3)*grave(1,3)) &
               + auxPTT*(auxG/acvis)*(gpsig(1)*gpsig(5) + gpsig(6)*gpsig(4) + gpsig(5)*gpsig(3))) &
               + auxVE*(1_ip - auxPTT)*(auxG/acvis)*(traza)*gpsig(5) &
               + auxVE*dtnsi*gpsig(5) - elextS(5)
            
      resim(6)=aux*gpsig(5)-0.5_rp*(1.0_rp-beta)*(grave(2,1)+grave(1,2)) + auxVE*(veadv(1)*grasig(6,1) + veadv(2)*grasig(6,2) + veadv(3)*grasig(6,3) &
               -(gpsig(1)*grave(2,1) + gpsig(6)*(grave(1,1) + grave(2,2)) + gpsig(2)*grave(1,2) + gpsig(5)*grave(2,3) + gpsig(4)*grave(1,3)) &
               + auxPTT*(auxG/acvis)*(gpsig(1)*gpsig(6) + gpsig(6)*gpsig(2) + gpsig(5)*gpsig(4))) &
               + auxVE*(1_ip - auxPTT)*(auxG/acvis)*(traza)*gpsig(6) &
               + auxVE*dtnsi*gpsig(6) - elextS(6) 
      
      !Temporal derivative LHS
      resim(auxtens+1:auxtens+e%ndime) = resim(auxtens+1:auxtens+e%ndime) + acden*dtnsi*vegau
      
      !RHS (Temporal derivative + External forces)
      resim(auxtens+1:auxtens+e%ndime) = resim(auxtens+1:auxtens+e%ndime) - elext
      
      !Contribution from pressure term
      !Pressure Gradient
      resim(auxtens+1:auxtens+e%ndime) = resim(auxtens+1:auxtens+e%ndime) + grapr     

      !Contribution from the convective term
      do jdime = 1,e%ndime
         resim(auxtens+1:auxtens+e%ndime) = resim(auxtens+1:auxtens+e%ndime) + acden*veadv(jdime)*grave(:,jdime) 
      end do

      !Contribution from the divergence of sigma
      
      resim(auxtens+1)= resim(auxtens+1) - (grasig(1,1) + grasig(6,2) + grasig(5,3))
      resim(auxtens+2)= resim(auxtens+2) - (grasig(2,2) + grasig(6,1) + grasig(4,3))
      resim(auxtens+3)= resim(auxtens+3) - (grasig(3,3) + grasig(4,2) + grasig(5,1)) 

      !Contribution from the divergence term
      do idime = 1,e%ndime                              
         resim(auxtens+e%ndime+1) = resim(auxtens+e%ndime+1) + grave(idime,idime)
      end do

   end subroutine supm_elmrfe3VE_oto  
   
   subroutine supm_elmrfe_oto_nonlinear(e,acvis,auxtens,beta,elvel,gprep)
      implicit none
      class(FiniteElement) :: e
      integer(ip) :: auxtens
      real(rp) :: acvis,elvel(e%ndime,e%pnode),beta,gprep(e%ndime+auxtens+1)      
      integer(ip) :: inode,idime
      real(rp) :: aux1(e%pnode)
      
      
      do inode = 1,e%pnode
         aux1(inode) = sum(e%hessi(1:e%ndime,inode))
      enddo   
      do idime = 1,e%ndime                              ! Contribution from the laplacian term
         gprep(auxtens + idime) = gprep(auxtens + idime) -  (1.0_rp*beta*acvis)*dot_product(aux1,elvel(idime,1:e%pnode))
      end do
   
   end subroutine  
   
   !This subroutine assemblies the contribution of the residual to the RHS for projecting it
   subroutine supm_elmrep(e,dvol,ndofn,gprep,elrep)
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in) :: ndofn
      real(rp)                :: dvol
      real(rp)                :: gprep(ndofn)
      real(rp)                :: elrep(ndofn,*)
      
      integer(ip) :: inode
      
      do inode = 1,e%pnode
         elrep(:,inode) = elrep(:,inode) + e%shape(inode,e%igaus)*gprep*dvol
      enddo
      
   end subroutine   
   
   subroutine supm_elmrhu_oss(e,acden,tidiv,tisig,timom,dvolu,gpadv,gprep,auxtens,auxoss,elrhs) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for OSS
    !+ tau1*(rho*a*grad(v), resid_momentum)+tau2(div(tau),resid_continuity)-tau3(grad_sym(v),resid_constitutive)
    !
    !-----------------------------------------------------------------------
   use typre
   implicit none

      class(FiniteElement)        :: e
      integer(ip), intent(in)    :: auxtens,auxoss
      real(rp),    intent(in)    :: gprep(auxtens+e%ndime+1),acden
      real(rp),    intent(in)    :: gpadv(e%pnode)
      real(rp),    intent(in)    :: tidiv,dvolu,tisig,timom
      real(rp),    intent(inout) :: elrhs(e%ndime,e%pnode)
      integer(ip)                :: inode,idime
      real(rp)                   :: aux,aux2,tmp2,aux3


      aux2 = tidiv*dvolu
      aux3 = tisig*dvolu
      do inode=1,e%pnode

         aux = timom*(acden*gpadv(inode)*auxoss)*dvolu

         elrhs(1,inode) = aux*gprep(4) + e%cartd(1,inode)*aux2*gprep(6) & 
            - aux3*(e%cartd(1,inode)*gprep(1) + e%cartd(2,inode)*gprep(3)) + elrhs(1,inode)
         elrhs(2,inode) = aux*gprep(5) + e%cartd(2,inode)*aux2*gprep(6) & 
            - aux3*(e%cartd(1,inode)*gprep(3) + e%cartd(2,inode)*gprep(2)) + elrhs(2,inode) 
         
      end do

   end subroutine supm_elmrhu_oss
   
   subroutine supm_elmrhu_oss3d(e,acden,tidiv,tisig,timom,dvolu,gpadv,gprep,auxtens,auxoss,elrhs) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for OSS
    !+ tau1*(rho*a*grad(v), resid_momentum)+tau2(div(tau),resid_continuity)-tau3(grad_sym(v),resid_constitutive)
    !
    !-----------------------------------------------------------------------
   use typre
   implicit none

      class(FiniteElement)        :: e
      integer(ip), intent(in)    :: auxtens,auxoss
      real(rp),    intent(in)    :: gprep(auxtens+e%ndime+1),acden
      real(rp),    intent(in)    :: gpadv(e%pnode)
      real(rp),    intent(in)    :: tidiv,dvolu,tisig,timom
      real(rp),    intent(inout) :: elrhs(e%ndime,e%pnode)
      integer(ip)                :: inode,idime
      real(rp)                   :: aux,aux2,tmp2,aux3


      aux2 = tidiv*dvolu
      aux3 = tisig*dvolu
      do inode=1,e%pnode

         aux = timom*(acden*gpadv(inode)*auxoss)*dvolu

         elrhs(1,inode) = aux*gprep(7) + e%cartd(1,inode)*aux2*gprep(10) & 
            - aux3*(e%cartd(1,inode)*gprep(1) + e%cartd(2,inode)*gprep(6) + e%cartd(3,inode)*gprep(5)) &
            + elrhs(1,inode)
         elrhs(2,inode) = aux*gprep(8) + e%cartd(2,inode)*aux2*gprep(10) & 
            - aux3*(e%cartd(1,inode)*gprep(6) + e%cartd(2,inode)*gprep(2) + e%cartd(3,inode)*gprep(4)) &
            + elrhs(2,inode)        
         elrhs(3,inode) = aux*gprep(9) + e%cartd(3,inode)*aux2*gprep(10) & 
            - aux3*(e%cartd(1,inode)*gprep(5) + e%cartd(2,inode)*gprep(4) + e%cartd(3,inode)*gprep(3)) &
            + elrhs(3,inode)          
      end do 

   end subroutine supm_elmrhu_oss3d   
       
   subroutine supm_elmrhu_ossNL(e,auxtens,acvis,beta,timom,dvolu,gprep,auxoss,elrhs) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for OSS
    !+ tau1*(rho*a*grad(v), resid_momentum)+tau2(div(tau),resid_continuity)-tau3(grad_sym(v),resid_constitutive)
    !
    !-----------------------------------------------------------------------
   use typre
   implicit none

      class(FiniteElement)        :: e
      integer(ip), intent(in)    :: auxoss,auxtens
      real(rp),    intent(in)    :: gprep(auxtens+e%ndime+1),acvis,beta
      real(rp),    intent(in)    :: timom,dvolu
      real(rp),    intent(inout) :: elrhs(e%ndime,e%mnode)
      integer(ip)                :: inode,idime
      real(rp)                   :: aux,aux2,tmp2,aux3


      do inode=1,e%pnode

         aux = timom*((beta*acvis)*(e%hessi(1,inode) + e%hessi(2,inode))*auxoss)*dvolu

         elrhs(1,inode) = aux*gprep(4) + elrhs(1,inode)
         elrhs(2,inode) = aux*gprep(5) + elrhs(2,inode) 
         
      end do

   end subroutine supm_elmrhu_ossNL
   
   subroutine supm_elmrhu_ossNL3d(e,auxtens,acvis,beta,timom,dvolu,gprep,auxoss,elrhs) 
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for OSS
    !+ tau1*(rho*a*grad(v), resid_momentum)+tau2(div(tau),resid_continuity)-tau3(grad_sym(v),resid_constitutive)
    !
    !-----------------------------------------------------------------------
   use typre
   implicit none

      class(FiniteElement)        :: e
      integer(ip), intent(in)    :: auxoss,auxtens
      real(rp),    intent(in)    :: gprep(auxtens+e%ndime+1),acvis,beta
      real(rp),    intent(in)    :: timom,dvolu
      real(rp),    intent(inout) :: elrhs(e%ndime,e%mnode)
      integer(ip)                :: inode,idime
      real(rp)                   :: aux,aux2,tmp2,aux3


      do inode=1,e%pnode

         aux = timom*((beta*acvis)*(e%hessi(1,inode) + e%hessi(2,inode) + e%hessi(3,inode))*auxoss)*dvolu

         elrhs(1,inode) = aux*gprep(7) + elrhs(1,inode)
         elrhs(2,inode) = aux*gprep(8) + elrhs(2,inode) 
         elrhs(3,inode) = aux*gprep(9) + elrhs(3,inode) 
         
      end do

   end subroutine supm_elmrhu_ossNL3d   
     
   subroutine supm_elmrhp_oss(e,timom,dvol,gprep,auxtens,auxoss,elrhs)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for OSS
    !    tau1*(grad q, resid_continuity)
    !
    !-----------------------------------------------------------------------
      use typre
      implicit none

      class(FiniteElement)        :: e
      integer(ip), intent(in)    :: auxtens,auxoss       
      real(rp),    intent(in)    :: gprep(auxtens+e%ndime+1)
      real(rp),    intent(in)    :: timom,dvol
      real(rp),    intent(inout) :: elrhs(1,e%mnode)

      integer(ip)                :: inode,idime
      real(rp)                   :: tmp1

      tmp1 = dvol*timom*auxoss

      do inode=1,e%pnode
         do idime=1,e%ndime
            elrhs(1,inode) = e%cartd(idime,inode)*gprep(auxtens+idime)*tmp1 + elrhs(1,inode)
         end do
      end do

   end subroutine supm_elmrhp_oss 
   
   subroutine supm_elmrhc_oss(e,timom,tisig,dvolu,gprep,acvis,beta,auxtens,auxoss,elrhs)
   !-----------------------------------------------------------------------
   !
   ! This routine computes the rhs terms in constitutive equation for OSS
   !    
   ! -tau1(div(tau),resid_momentum)- tau3/2mu(tau,resid_constitutive)
   !-----------------------------------------------------------------------
      use typre
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxtens,auxoss
      real(rp),    intent(in)    :: gprep(e%ndime+1+auxtens)
      real(rp),    intent(in)    :: acvis,beta
      real(rp),    intent(in)    :: timom,tisig,dvolu
      real(rp),    intent(inout) :: elrhs(auxtens,e%mnode)
      integer(ip)                :: inode
      real(rp)                   :: aux1,aux3

      aux1 = -(1.0_rp - beta)*timom*dvolu*auxoss
      aux3 = -1.0_rp/(2.0_rp*acvis)*tisig*dvolu      
      do inode=1,e%pnode

         elrhs(1,inode) = e%cartd(1,inode)*aux1*gprep(4) + aux3*e%shape(inode,e%igaus)*gprep(1) &
            + elrhs(1,inode)
         elrhs(2,inode) = e%cartd(2,inode)*aux1*gprep(5) + aux3*e%shape(inode,e%igaus)*gprep(2) & 
            + elrhs(2,inode)
         elrhs(3,inode) = e%cartd(2,inode)*aux1*gprep(4) + e%cartd(1,inode)*aux1*gprep(5) &
             + aux3*2.0_rp*e%shape(inode,e%igaus)*gprep(3) + elrhs(3,inode)        

      end do
   end subroutine supm_elmrhc_oss 
   
   subroutine supm_elmrhc_oss3d(e,timom,tisig,dvolu,gprep,acvis,beta,auxtens,auxoss,elrhs)
   !-----------------------------------------------------------------------
   !
   ! This routine computes the rhs terms in constitutive equation for OSS
   !    
   ! -tau1(div(tau),resid_momentum)- tau3/2mu(tau,resid_constitutive)
   !-----------------------------------------------------------------------
      use typre
      implicit none
      class(FiniteElement) :: e
      integer(ip), intent(in)    :: auxtens,auxoss
      real(rp),    intent(in)    :: gprep(e%ndime+1+auxtens)
      real(rp),    intent(in)    :: acvis,beta
      real(rp),    intent(in)    :: timom,tisig,dvolu
      real(rp),    intent(inout) :: elrhs(auxtens,e%mnode)
      integer(ip)                :: inode
      real(rp)                   :: aux1,aux3

      aux1 = -(1.0_rp - beta)*timom*dvolu*auxoss
      aux3 = -1.0_rp/(2.0_rp*acvis)*tisig*dvolu       
      do inode=1,e%pnode
     
         elrhs(1,inode) = e%cartd(1,inode)*aux1*gprep(7) + aux3*e%shape(inode,e%igaus)*gprep(1) &
            + elrhs(1,inode)
         elrhs(2,inode) = e%cartd(2,inode)*aux1*gprep(8) + aux3*e%shape(inode,e%igaus)*gprep(2) &
            + elrhs(2,inode)
         elrhs(3,inode) = e%cartd(3,inode)*aux1*gprep(9) + aux3*e%shape(inode,e%igaus)*gprep(3) &
            + elrhs(3,inode)
         elrhs(4,inode) = e%cartd(3,inode)*aux1*gprep(8) + e%cartd(2,inode)*aux1*gprep(9) &
             + aux3*2.0_rp*e%shape(inode,e%igaus)*gprep(4) + elrhs(4,inode)
         elrhs(5,inode) = e%cartd(3,inode)*aux1*gprep(7) + e%cartd(1,inode)*aux1*gprep(9) &
             + aux3*2.0_rp*e%shape(inode,e%igaus)*gprep(5) + elrhs(5,inode)
         elrhs(6,inode) = e%cartd(2,inode)*aux1*gprep(7) + e%cartd(1,inode)*aux1*gprep(8) &
             + aux3*2.0_rp*e%shape(inode,e%igaus)*gprep(6) + elrhs(6,inode) 
      end do
  end subroutine supm_elmrhc_oss3d     
   
   subroutine supm_elmrhcVES_oss(e,auxVE,auxG,auxPTT,tisig,acvis,dvolu,auxtens,gpadv,grvel,gpsig,gprep,elrhs)
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxPTT
      real(rp),    intent(in)    :: tisig,gprep(e%ndime+1+auxtens),gpadv(e%pnode),grvel(e%ndime,e%ndime) 
      real(rp),    intent(in)    :: dvolu,auxVE,auxG,acvis,gpsig(auxtens)
      real(rp),    intent(inout) :: elrhs(auxtens,e%mnode)
      integer(ip)                :: inode
      real(rp)                   :: aux,aux2,aux3,aux5
      real(rp)                   :: Res11,Res12,Res22,traza
         
         
      traza= gpsig(1) + gpsig(3)   
         
      Res11 = gprep(1)
      Res12 = gprep(3)
      Res22 = gprep(2)

      do inode=1,e%pnode

     
         aux2= auxVE*(gpadv(inode)*tisig)*dvolu      
         aux5= (tisig*auxVE)*(e%shape(inode,e%igaus))*dvolu
         
              
         elrhs(1,inode) = aux2*Res11 &
               + aux5*(2.0_rp*grvel(1,1) - auxPTT*(auxG/acvis)*gpsig(1))*Res11 &              
               + aux5*(2.0_rp*grvel(1,2) - auxPTT*(auxG/acvis)*gpsig(3))*Res12 &               
               - aux5*(1_ip - auxPTT)*(auxG/acvis)*traza*Res11 &
               + elrhs(1,inode) 
               
         elrhs(2,inode) = aux2*Res22 &
               + aux5*(2.0_rp*grvel(2,2) - auxPTT*(auxG/acvis)*gpsig(2))*Res22 &                
               + aux5*(2.0_rp*grvel(2,1) - auxPTT*(auxG/acvis)*gpsig(3))*Res12 &                    
               - aux5*(1_ip - auxPTT)*(auxG/acvis)*traza*Res22 &
               + elrhs(2,inode)
               
         elrhs(3,inode) = aux2*(2.0_rp*Res12)  &
               + aux5*(2.0_rp*grvel(2,1) - auxPTT*(auxG/acvis)*gpsig(3))*Res11 &
               + aux5*(2.0_rp*grvel(1,2) - auxPTT*(auxG/acvis)*gpsig(3))*Res22 &
               - aux5*(auxPTT*(auxG/acvis)*(gpsig(1) + gpsig(2)))*Res12 &
               - aux5*2.0_rp*(1_ip - auxPTT)*(auxG/acvis)*traza*Res12 &
               + elrhs(3,inode)              
  
      end do

   end subroutine supm_elmrhcVES_oss   

   subroutine supm_elmrhcVES_oss3d(e,auxVE,auxG,auxPTT,tisig,acvis,dvolu,auxtens,gpadv,grvel,gpsig,gprep,elrhs)   
    !-----------------------------------------------------------------------
    !
    ! This routine computes the rhs terms for ASGS in constitutive equation
    !    -tau1*(div(T), f) -tau1(div(T),rho*u/dt)
    !
    !-----------------------------------------------------------------------
      implicit none
      class(FiniteElement) :: e

      integer(ip), intent(in)    :: auxtens,auxPTT
      real(rp),    intent(in)    :: tisig,gprep(e%ndime+1+auxtens),gpadv(e%pnode),grvel(e%ndime,e%ndime) 
      real(rp),    intent(in)    :: dvolu,auxVE,auxG,acvis,gpsig(auxtens)
      real(rp),    intent(inout) :: elrhs(auxtens,e%mnode)
      integer(ip)                :: inode
      real(rp)                   :: aux,aux2,aux3,aux5
      real(rp)                   :: Res11,Res12,Res13,Res22,Res23,Res33
      
      
      
      Res11 = gprep(1)            
      Res12 = gprep(6)
      Res13 = gprep(5)
      Res22 = gprep(2)  
      Res23 = gprep(4)
      Res33 = gprep(3)   
 
      do inode=1,e%pnode 
      
         aux2= auxVE*(gpadv(inode)*tisig)*dvolu      
         aux3= (tisig*auxVE)*(e%shape(inode,e%igaus))*dvolu                  
               
 
         elrhs(1,inode) = aux2*Res11 &
                  + aux3*(2.0_rp*grvel(1,1))*Res11 - aux3*((auxG/acvis)*gpsig(1))*Res11 &
                  + aux3*(2.0_rp*grvel(1,2))*Res12 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res12 &
                  + aux3*(2.0_rp*grvel(1,3))*Res13 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res13 &   
                  + elrhs(1,inode) 
               
         elrhs(2,inode) =  aux2*Res22 &
                  + aux3*(2.0_rp*grvel(2,2))*Res22 - aux3*((auxG/acvis)*gpsig(2))*Res22 &           
                  + aux3*(2.0_rp*grvel(2,1))*Res12 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res12 & 
                  + aux3*(2.0_rp*grvel(2,3))*Res23 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res23 &                
                  + elrhs(2,inode)
               
         elrhs(3,inode) =  aux2*Res33 &
                  + aux3*(2.0_rp*grvel(3,3))*Res33 - aux3*((auxG/acvis)*gpsig(3))*Res33 &           
                  + aux3*(2.0_rp*grvel(3,1))*Res13 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res13 & 
                  + aux3*(2.0_rp*grvel(3,2))*Res23 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res23 &                   
                  + elrhs(3,inode)
                  
         elrhs(4,inode) = (2.0_rp*aux2)*Res23 &
                  + aux3*(2.0_rp*(grvel(3,3) + grvel(2,2)))*Res23 - aux3*((auxG/acvis)*(gpsig(2) + gpsig(3)))*Res23 &
                  + aux3*(2.0_rp*grvel(3,1))*Res12 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res12 &           
                  + aux3*(2.0_rp*grvel(2,1))*Res13 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res13 & 
                  + aux3*(2.0_rp*grvel(3,2))*Res22 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res22 &           
                  + aux3*(2.0_rp*grvel(2,3))*Res33 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res33 &              
                  + elrhs(4,inode)
                  
         elrhs(5,inode) = (2.0_rp*aux2)*Res13 &
                  + aux3*(2.0_rp*(grvel(3,3) + grvel(1,1)))*Res13 - aux3*((auxG/acvis)*(gpsig(1) + gpsig(3)))*Res13 &
                  + aux3*(2.0_rp*grvel(3,2))*Res12 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res12 &           
                  + aux3*(2.0_rp*grvel(1,2))*Res23 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res23 & 
                  + aux3*(2.0_rp*grvel(3,1))*Res11 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res11 &           
                  + aux3*(2.0_rp*grvel(1,3))*Res33 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res33 &            
                  + elrhs(5,inode)
                 
         elrhs(6,inode) = (2.0_rp*aux2)*Res12 &
                  + aux3*(2.0_rp*(grvel(2,2) + grvel(1,1)))*Res12 - aux3*((auxG/acvis)*(gpsig(1) + gpsig(2)))*Res12 &
                  + aux3*(2.0_rp*grvel(2,3))*Res13 - aux3*(auxPTT*(auxG/acvis)*gpsig(4))*Res13 &           
                  + aux3*(2.0_rp*grvel(1,3))*Res23 - aux3*(auxPTT*(auxG/acvis)*gpsig(5))*Res23 & 
                  + aux3*(2.0_rp*grvel(2,1))*Res11 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res11 &           
                  + aux3*(2.0_rp*grvel(1,2))*Res22 - aux3*(auxPTT*(auxG/acvis)*gpsig(6))*Res22 &          
                  + elrhs(6,inode) 
  
      end do

   end subroutine supm_elmrhcVES_oss3d  
   

end module            

